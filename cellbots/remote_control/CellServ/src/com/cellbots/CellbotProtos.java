// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cellbots.proto

package com.cellbots;

public final class CellbotProtos {
  private CellbotProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class AudioVideoFrame extends
      com.google.protobuf.GeneratedMessage {
    // Use AudioVideoFrame.newBuilder() to construct.
    private AudioVideoFrame() {
      initFields();
    }
    private AudioVideoFrame(boolean noInit) {}
    
    private static final AudioVideoFrame defaultInstance;
    public static AudioVideoFrame getDefaultInstance() {
      return defaultInstance;
    }
    
    public AudioVideoFrame getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cellbots.CellbotProtos.internal_static_cellbots_AudioVideoFrame_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cellbots.CellbotProtos.internal_static_cellbots_AudioVideoFrame_fieldAccessorTable;
    }
    
    public enum Encoding
        implements com.google.protobuf.ProtocolMessageEnum {
      JPEG(0, 1),
      H263(1, 2),
      H264(2, 3),
      MP3(3, 4),
      AAC(4, 5),
      WAV(5, 6),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static Encoding valueOf(int value) {
        switch (value) {
          case 1: return JPEG;
          case 2: return H263;
          case 3: return H264;
          case 4: return MP3;
          case 5: return AAC;
          case 6: return WAV;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<Encoding>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Encoding>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Encoding>() {
              public Encoding findValueByNumber(int number) {
                return Encoding.valueOf(number)
      ;        }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.cellbots.CellbotProtos.AudioVideoFrame.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final Encoding[] VALUES = {
        JPEG, H263, H264, MP3, AAC, WAV, 
      };
      public static Encoding valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private Encoding(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        com.cellbots.CellbotProtos.getDescriptor();
      }
      
      // @@protoc_insertion_point(enum_scope:cellbots.AudioVideoFrame.Encoding)
    }
    
    // optional int64 timestamp = 1;
    public static final int TIMESTAMP_FIELD_NUMBER = 1;
    private boolean hasTimestamp;
    private long timestamp_ = 0L;
    public boolean hasTimestamp() { return hasTimestamp; }
    public long getTimestamp() { return timestamp_; }
    
    // optional bytes data = 2;
    public static final int DATA_FIELD_NUMBER = 2;
    private boolean hasData;
    private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
    public boolean hasData() { return hasData; }
    public com.google.protobuf.ByteString getData() { return data_; }
    
    // optional int64 frameNumber = 3;
    public static final int FRAMENUMBER_FIELD_NUMBER = 3;
    private boolean hasFrameNumber;
    private long frameNumber_ = 0L;
    public boolean hasFrameNumber() { return hasFrameNumber; }
    public long getFrameNumber() { return frameNumber_; }
    
    // optional string sourceID = 4;
    public static final int SOURCEID_FIELD_NUMBER = 4;
    private boolean hasSourceID;
    private java.lang.String sourceID_ = "";
    public boolean hasSourceID() { return hasSourceID; }
    public java.lang.String getSourceID() { return sourceID_; }
    
    // optional int32 whiteBalance = 5;
    public static final int WHITEBALANCE_FIELD_NUMBER = 5;
    private boolean hasWhiteBalance;
    private int whiteBalance_ = 0;
    public boolean hasWhiteBalance() { return hasWhiteBalance; }
    public int getWhiteBalance() { return whiteBalance_; }
    
    // optional int32 zoomLevel = 6;
    public static final int ZOOMLEVEL_FIELD_NUMBER = 6;
    private boolean hasZoomLevel;
    private int zoomLevel_ = 0;
    public boolean hasZoomLevel() { return hasZoomLevel; }
    public int getZoomLevel() { return zoomLevel_; }
    
    // optional int32 compressionLevel = 7;
    public static final int COMPRESSIONLEVEL_FIELD_NUMBER = 7;
    private boolean hasCompressionLevel;
    private int compressionLevel_ = 0;
    public boolean hasCompressionLevel() { return hasCompressionLevel; }
    public int getCompressionLevel() { return compressionLevel_; }
    
    // optional int32 widthPx = 8;
    public static final int WIDTHPX_FIELD_NUMBER = 8;
    private boolean hasWidthPx;
    private int widthPx_ = 0;
    public boolean hasWidthPx() { return hasWidthPx; }
    public int getWidthPx() { return widthPx_; }
    
    // optional int32 heightPx = 9;
    public static final int HEIGHTPX_FIELD_NUMBER = 9;
    private boolean hasHeightPx;
    private int heightPx_ = 0;
    public boolean hasHeightPx() { return hasHeightPx; }
    public int getHeightPx() { return heightPx_; }
    
    // optional int32 timeSpan = 10;
    public static final int TIMESPAN_FIELD_NUMBER = 10;
    private boolean hasTimeSpan;
    private int timeSpan_ = 0;
    public boolean hasTimeSpan() { return hasTimeSpan; }
    public int getTimeSpan() { return timeSpan_; }
    
    // optional bool lightOn = 11;
    public static final int LIGHTON_FIELD_NUMBER = 11;
    private boolean hasLightOn;
    private boolean lightOn_ = false;
    public boolean hasLightOn() { return hasLightOn; }
    public boolean getLightOn() { return lightOn_; }
    
    // optional .cellbots.AudioVideoFrame.Encoding encoding = 12;
    public static final int ENCODING_FIELD_NUMBER = 12;
    private boolean hasEncoding;
    private com.cellbots.CellbotProtos.AudioVideoFrame.Encoding encoding_;
    public boolean hasEncoding() { return hasEncoding; }
    public com.cellbots.CellbotProtos.AudioVideoFrame.Encoding getEncoding() { return encoding_; }
    
    // optional string botID = 16;
    public static final int BOTID_FIELD_NUMBER = 16;
    private boolean hasBotID;
    private java.lang.String botID_ = "";
    public boolean hasBotID() { return hasBotID; }
    public java.lang.String getBotID() { return botID_; }
    
    private void initFields() {
      encoding_ = com.cellbots.CellbotProtos.AudioVideoFrame.Encoding.JPEG;
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasTimestamp()) {
        output.writeInt64(1, getTimestamp());
      }
      if (hasData()) {
        output.writeBytes(2, getData());
      }
      if (hasFrameNumber()) {
        output.writeInt64(3, getFrameNumber());
      }
      if (hasSourceID()) {
        output.writeString(4, getSourceID());
      }
      if (hasWhiteBalance()) {
        output.writeInt32(5, getWhiteBalance());
      }
      if (hasZoomLevel()) {
        output.writeInt32(6, getZoomLevel());
      }
      if (hasCompressionLevel()) {
        output.writeInt32(7, getCompressionLevel());
      }
      if (hasWidthPx()) {
        output.writeInt32(8, getWidthPx());
      }
      if (hasHeightPx()) {
        output.writeInt32(9, getHeightPx());
      }
      if (hasTimeSpan()) {
        output.writeInt32(10, getTimeSpan());
      }
      if (hasLightOn()) {
        output.writeBool(11, getLightOn());
      }
      if (hasEncoding()) {
        output.writeEnum(12, getEncoding().getNumber());
      }
      if (hasBotID()) {
        output.writeString(16, getBotID());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTimestamp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, getTimestamp());
      }
      if (hasData()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getData());
      }
      if (hasFrameNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, getFrameNumber());
      }
      if (hasSourceID()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getSourceID());
      }
      if (hasWhiteBalance()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, getWhiteBalance());
      }
      if (hasZoomLevel()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, getZoomLevel());
      }
      if (hasCompressionLevel()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, getCompressionLevel());
      }
      if (hasWidthPx()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, getWidthPx());
      }
      if (hasHeightPx()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, getHeightPx());
      }
      if (hasTimeSpan()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, getTimeSpan());
      }
      if (hasLightOn()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, getLightOn());
      }
      if (hasEncoding()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(12, getEncoding().getNumber());
      }
      if (hasBotID()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(16, getBotID());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.cellbots.CellbotProtos.AudioVideoFrame parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.cellbots.CellbotProtos.AudioVideoFrame parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.cellbots.CellbotProtos.AudioVideoFrame parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.cellbots.CellbotProtos.AudioVideoFrame parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.cellbots.CellbotProtos.AudioVideoFrame parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.cellbots.CellbotProtos.AudioVideoFrame parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.cellbots.CellbotProtos.AudioVideoFrame parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.cellbots.CellbotProtos.AudioVideoFrame parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.cellbots.CellbotProtos.AudioVideoFrame parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.cellbots.CellbotProtos.AudioVideoFrame parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.cellbots.CellbotProtos.AudioVideoFrame prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.cellbots.CellbotProtos.AudioVideoFrame result;
      
      // Construct using com.cellbots.CellbotProtos.AudioVideoFrame.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.cellbots.CellbotProtos.AudioVideoFrame();
        return builder;
      }
      
      protected com.cellbots.CellbotProtos.AudioVideoFrame internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.cellbots.CellbotProtos.AudioVideoFrame();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cellbots.CellbotProtos.AudioVideoFrame.getDescriptor();
      }
      
      public com.cellbots.CellbotProtos.AudioVideoFrame getDefaultInstanceForType() {
        return com.cellbots.CellbotProtos.AudioVideoFrame.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.cellbots.CellbotProtos.AudioVideoFrame build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.cellbots.CellbotProtos.AudioVideoFrame buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.cellbots.CellbotProtos.AudioVideoFrame buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.cellbots.CellbotProtos.AudioVideoFrame returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cellbots.CellbotProtos.AudioVideoFrame) {
          return mergeFrom((com.cellbots.CellbotProtos.AudioVideoFrame)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.cellbots.CellbotProtos.AudioVideoFrame other) {
        if (other == com.cellbots.CellbotProtos.AudioVideoFrame.getDefaultInstance()) return this;
        if (other.hasTimestamp()) {
          setTimestamp(other.getTimestamp());
        }
        if (other.hasData()) {
          setData(other.getData());
        }
        if (other.hasFrameNumber()) {
          setFrameNumber(other.getFrameNumber());
        }
        if (other.hasSourceID()) {
          setSourceID(other.getSourceID());
        }
        if (other.hasWhiteBalance()) {
          setWhiteBalance(other.getWhiteBalance());
        }
        if (other.hasZoomLevel()) {
          setZoomLevel(other.getZoomLevel());
        }
        if (other.hasCompressionLevel()) {
          setCompressionLevel(other.getCompressionLevel());
        }
        if (other.hasWidthPx()) {
          setWidthPx(other.getWidthPx());
        }
        if (other.hasHeightPx()) {
          setHeightPx(other.getHeightPx());
        }
        if (other.hasTimeSpan()) {
          setTimeSpan(other.getTimeSpan());
        }
        if (other.hasLightOn()) {
          setLightOn(other.getLightOn());
        }
        if (other.hasEncoding()) {
          setEncoding(other.getEncoding());
        }
        if (other.hasBotID()) {
          setBotID(other.getBotID());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setTimestamp(input.readInt64());
              break;
            }
            case 18: {
              setData(input.readBytes());
              break;
            }
            case 24: {
              setFrameNumber(input.readInt64());
              break;
            }
            case 34: {
              setSourceID(input.readString());
              break;
            }
            case 40: {
              setWhiteBalance(input.readInt32());
              break;
            }
            case 48: {
              setZoomLevel(input.readInt32());
              break;
            }
            case 56: {
              setCompressionLevel(input.readInt32());
              break;
            }
            case 64: {
              setWidthPx(input.readInt32());
              break;
            }
            case 72: {
              setHeightPx(input.readInt32());
              break;
            }
            case 80: {
              setTimeSpan(input.readInt32());
              break;
            }
            case 88: {
              setLightOn(input.readBool());
              break;
            }
            case 96: {
              int rawValue = input.readEnum();
              com.cellbots.CellbotProtos.AudioVideoFrame.Encoding value = com.cellbots.CellbotProtos.AudioVideoFrame.Encoding.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(12, rawValue);
              } else {
                setEncoding(value);
              }
              break;
            }
            case 130: {
              setBotID(input.readString());
              break;
            }
          }
        }
      }
      
      
      // optional int64 timestamp = 1;
      public boolean hasTimestamp() {
        return result.hasTimestamp();
      }
      public long getTimestamp() {
        return result.getTimestamp();
      }
      public Builder setTimestamp(long value) {
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder clearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
      
      // optional bytes data = 2;
      public boolean hasData() {
        return result.hasData();
      }
      public com.google.protobuf.ByteString getData() {
        return result.getData();
      }
      public Builder setData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder clearData() {
        result.hasData = false;
        result.data_ = getDefaultInstance().getData();
        return this;
      }
      
      // optional int64 frameNumber = 3;
      public boolean hasFrameNumber() {
        return result.hasFrameNumber();
      }
      public long getFrameNumber() {
        return result.getFrameNumber();
      }
      public Builder setFrameNumber(long value) {
        result.hasFrameNumber = true;
        result.frameNumber_ = value;
        return this;
      }
      public Builder clearFrameNumber() {
        result.hasFrameNumber = false;
        result.frameNumber_ = 0L;
        return this;
      }
      
      // optional string sourceID = 4;
      public boolean hasSourceID() {
        return result.hasSourceID();
      }
      public java.lang.String getSourceID() {
        return result.getSourceID();
      }
      public Builder setSourceID(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasSourceID = true;
        result.sourceID_ = value;
        return this;
      }
      public Builder clearSourceID() {
        result.hasSourceID = false;
        result.sourceID_ = getDefaultInstance().getSourceID();
        return this;
      }
      
      // optional int32 whiteBalance = 5;
      public boolean hasWhiteBalance() {
        return result.hasWhiteBalance();
      }
      public int getWhiteBalance() {
        return result.getWhiteBalance();
      }
      public Builder setWhiteBalance(int value) {
        result.hasWhiteBalance = true;
        result.whiteBalance_ = value;
        return this;
      }
      public Builder clearWhiteBalance() {
        result.hasWhiteBalance = false;
        result.whiteBalance_ = 0;
        return this;
      }
      
      // optional int32 zoomLevel = 6;
      public boolean hasZoomLevel() {
        return result.hasZoomLevel();
      }
      public int getZoomLevel() {
        return result.getZoomLevel();
      }
      public Builder setZoomLevel(int value) {
        result.hasZoomLevel = true;
        result.zoomLevel_ = value;
        return this;
      }
      public Builder clearZoomLevel() {
        result.hasZoomLevel = false;
        result.zoomLevel_ = 0;
        return this;
      }
      
      // optional int32 compressionLevel = 7;
      public boolean hasCompressionLevel() {
        return result.hasCompressionLevel();
      }
      public int getCompressionLevel() {
        return result.getCompressionLevel();
      }
      public Builder setCompressionLevel(int value) {
        result.hasCompressionLevel = true;
        result.compressionLevel_ = value;
        return this;
      }
      public Builder clearCompressionLevel() {
        result.hasCompressionLevel = false;
        result.compressionLevel_ = 0;
        return this;
      }
      
      // optional int32 widthPx = 8;
      public boolean hasWidthPx() {
        return result.hasWidthPx();
      }
      public int getWidthPx() {
        return result.getWidthPx();
      }
      public Builder setWidthPx(int value) {
        result.hasWidthPx = true;
        result.widthPx_ = value;
        return this;
      }
      public Builder clearWidthPx() {
        result.hasWidthPx = false;
        result.widthPx_ = 0;
        return this;
      }
      
      // optional int32 heightPx = 9;
      public boolean hasHeightPx() {
        return result.hasHeightPx();
      }
      public int getHeightPx() {
        return result.getHeightPx();
      }
      public Builder setHeightPx(int value) {
        result.hasHeightPx = true;
        result.heightPx_ = value;
        return this;
      }
      public Builder clearHeightPx() {
        result.hasHeightPx = false;
        result.heightPx_ = 0;
        return this;
      }
      
      // optional int32 timeSpan = 10;
      public boolean hasTimeSpan() {
        return result.hasTimeSpan();
      }
      public int getTimeSpan() {
        return result.getTimeSpan();
      }
      public Builder setTimeSpan(int value) {
        result.hasTimeSpan = true;
        result.timeSpan_ = value;
        return this;
      }
      public Builder clearTimeSpan() {
        result.hasTimeSpan = false;
        result.timeSpan_ = 0;
        return this;
      }
      
      // optional bool lightOn = 11;
      public boolean hasLightOn() {
        return result.hasLightOn();
      }
      public boolean getLightOn() {
        return result.getLightOn();
      }
      public Builder setLightOn(boolean value) {
        result.hasLightOn = true;
        result.lightOn_ = value;
        return this;
      }
      public Builder clearLightOn() {
        result.hasLightOn = false;
        result.lightOn_ = false;
        return this;
      }
      
      // optional .cellbots.AudioVideoFrame.Encoding encoding = 12;
      public boolean hasEncoding() {
        return result.hasEncoding();
      }
      public com.cellbots.CellbotProtos.AudioVideoFrame.Encoding getEncoding() {
        return result.getEncoding();
      }
      public Builder setEncoding(com.cellbots.CellbotProtos.AudioVideoFrame.Encoding value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasEncoding = true;
        result.encoding_ = value;
        return this;
      }
      public Builder clearEncoding() {
        result.hasEncoding = false;
        result.encoding_ = com.cellbots.CellbotProtos.AudioVideoFrame.Encoding.JPEG;
        return this;
      }
      
      // optional string botID = 16;
      public boolean hasBotID() {
        return result.hasBotID();
      }
      public java.lang.String getBotID() {
        return result.getBotID();
      }
      public Builder setBotID(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasBotID = true;
        result.botID_ = value;
        return this;
      }
      public Builder clearBotID() {
        result.hasBotID = false;
        result.botID_ = getDefaultInstance().getBotID();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:cellbots.AudioVideoFrame)
    }
    
    static {
      defaultInstance = new AudioVideoFrame(true);
      com.cellbots.CellbotProtos.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:cellbots.AudioVideoFrame)
  }
  
  public static final class HALConnection extends
      com.google.protobuf.GeneratedMessage {
    // Use HALConnection.newBuilder() to construct.
    private HALConnection() {
      initFields();
    }
    private HALConnection(boolean noInit) {}
    
    private static final HALConnection defaultInstance;
    public static HALConnection getDefaultInstance() {
      return defaultInstance;
    }
    
    public HALConnection getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cellbots.CellbotProtos.internal_static_cellbots_HALConnection_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cellbots.CellbotProtos.internal_static_cellbots_HALConnection_fieldAccessorTable;
    }
    
    public enum ConnectionDirection
        implements com.google.protobuf.ProtocolMessageEnum {
      READ_ONLY(0, 1),
      WRITE_ONLY(1, 2),
      HALF_DUPLEX(2, 3),
      FULL_DUPLEX(3, 4),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static ConnectionDirection valueOf(int value) {
        switch (value) {
          case 1: return READ_ONLY;
          case 2: return WRITE_ONLY;
          case 3: return HALF_DUPLEX;
          case 4: return FULL_DUPLEX;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<ConnectionDirection>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ConnectionDirection>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ConnectionDirection>() {
              public ConnectionDirection findValueByNumber(int number) {
                return ConnectionDirection.valueOf(number)
      ;        }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.cellbots.CellbotProtos.HALConnection.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final ConnectionDirection[] VALUES = {
        READ_ONLY, WRITE_ONLY, HALF_DUPLEX, FULL_DUPLEX, 
      };
      public static ConnectionDirection valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private ConnectionDirection(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        com.cellbots.CellbotProtos.getDescriptor();
      }
      
      // @@protoc_insertion_point(enum_scope:cellbots.HALConnection.ConnectionDirection)
    }
    
    public enum ConnectionType
        implements com.google.protobuf.ProtocolMessageEnum {
      HARDWARE_SERIAL(0, 1),
      BLUETOOTH_SERIAL(1, 2),
      AUDIO_SERIAL(2, 3),
      AUDIO_PWM(3, 4),
      AUDIO_PPM(4, 5),
      AUDIO_AM(5, 6),
      AUDIO_FM(6, 7),
      INFRARED(7, 8),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static ConnectionType valueOf(int value) {
        switch (value) {
          case 1: return HARDWARE_SERIAL;
          case 2: return BLUETOOTH_SERIAL;
          case 3: return AUDIO_SERIAL;
          case 4: return AUDIO_PWM;
          case 5: return AUDIO_PPM;
          case 6: return AUDIO_AM;
          case 7: return AUDIO_FM;
          case 8: return INFRARED;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<ConnectionType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ConnectionType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ConnectionType>() {
              public ConnectionType findValueByNumber(int number) {
                return ConnectionType.valueOf(number)
      ;        }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.cellbots.CellbotProtos.HALConnection.getDescriptor().getEnumTypes().get(1);
      }
      
      private static final ConnectionType[] VALUES = {
        HARDWARE_SERIAL, BLUETOOTH_SERIAL, AUDIO_SERIAL, AUDIO_PWM, AUDIO_PPM, AUDIO_AM, AUDIO_FM, INFRARED, 
      };
      public static ConnectionType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private ConnectionType(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        com.cellbots.CellbotProtos.getDescriptor();
      }
      
      // @@protoc_insertion_point(enum_scope:cellbots.HALConnection.ConnectionType)
    }
    
    public enum ConnectionState
        implements com.google.protobuf.ProtocolMessageEnum {
      DISCONNECTED(0, 1),
      PAIRED(1, 2),
      BONDING(2, 3),
      BONDED(3, 4),
      TALKING(4, 5),
      WAITING(5, 7),
      PAUSED(6, 8),
      ERROR(7, 9),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static ConnectionState valueOf(int value) {
        switch (value) {
          case 1: return DISCONNECTED;
          case 2: return PAIRED;
          case 3: return BONDING;
          case 4: return BONDED;
          case 5: return TALKING;
          case 7: return WAITING;
          case 8: return PAUSED;
          case 9: return ERROR;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<ConnectionState>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ConnectionState>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ConnectionState>() {
              public ConnectionState findValueByNumber(int number) {
                return ConnectionState.valueOf(number)
      ;        }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.cellbots.CellbotProtos.HALConnection.getDescriptor().getEnumTypes().get(2);
      }
      
      private static final ConnectionState[] VALUES = {
        DISCONNECTED, PAIRED, BONDING, BONDED, TALKING, WAITING, PAUSED, ERROR, 
      };
      public static ConnectionState valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private ConnectionState(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        com.cellbots.CellbotProtos.getDescriptor();
      }
      
      // @@protoc_insertion_point(enum_scope:cellbots.HALConnection.ConnectionState)
    }
    
    // optional string address = 1;
    public static final int ADDRESS_FIELD_NUMBER = 1;
    private boolean hasAddress;
    private java.lang.String address_ = "";
    public boolean hasAddress() { return hasAddress; }
    public java.lang.String getAddress() { return address_; }
    
    // optional string name = 2;
    public static final int NAME_FIELD_NUMBER = 2;
    private boolean hasName;
    private java.lang.String name_ = "";
    public boolean hasName() { return hasName; }
    public java.lang.String getName() { return name_; }
    
    // optional string uuid = 3;
    public static final int UUID_FIELD_NUMBER = 3;
    private boolean hasUuid;
    private java.lang.String uuid_ = "";
    public boolean hasUuid() { return hasUuid; }
    public java.lang.String getUuid() { return uuid_; }
    
    // optional int32 baudRate = 5;
    public static final int BAUDRATE_FIELD_NUMBER = 5;
    private boolean hasBaudRate;
    private int baudRate_ = 0;
    public boolean hasBaudRate() { return hasBaudRate; }
    public int getBaudRate() { return baudRate_; }
    
    // optional bytes readBuffer = 6;
    public static final int READBUFFER_FIELD_NUMBER = 6;
    private boolean hasReadBuffer;
    private com.google.protobuf.ByteString readBuffer_ = com.google.protobuf.ByteString.EMPTY;
    public boolean hasReadBuffer() { return hasReadBuffer; }
    public com.google.protobuf.ByteString getReadBuffer() { return readBuffer_; }
    
    // optional bytes writeBuffer = 7;
    public static final int WRITEBUFFER_FIELD_NUMBER = 7;
    private boolean hasWriteBuffer;
    private com.google.protobuf.ByteString writeBuffer_ = com.google.protobuf.ByteString.EMPTY;
    public boolean hasWriteBuffer() { return hasWriteBuffer; }
    public com.google.protobuf.ByteString getWriteBuffer() { return writeBuffer_; }
    
    // optional bytes delimiter = 8;
    public static final int DELIMITER_FIELD_NUMBER = 8;
    private boolean hasDelimiter;
    private com.google.protobuf.ByteString delimiter_ = com.google.protobuf.ByteString.EMPTY;
    public boolean hasDelimiter() { return hasDelimiter; }
    public com.google.protobuf.ByteString getDelimiter() { return delimiter_; }
    
    // optional int32 rssi = 9;
    public static final int RSSI_FIELD_NUMBER = 9;
    private boolean hasRssi;
    private int rssi_ = 0;
    public boolean hasRssi() { return hasRssi; }
    public int getRssi() { return rssi_; }
    
    // optional .cellbots.HALConnection.ConnectionDirection connectionDirection = 11;
    public static final int CONNECTIONDIRECTION_FIELD_NUMBER = 11;
    private boolean hasConnectionDirection;
    private com.cellbots.CellbotProtos.HALConnection.ConnectionDirection connectionDirection_;
    public boolean hasConnectionDirection() { return hasConnectionDirection; }
    public com.cellbots.CellbotProtos.HALConnection.ConnectionDirection getConnectionDirection() { return connectionDirection_; }
    
    // optional .cellbots.HALConnection.ConnectionType connectionType = 12;
    public static final int CONNECTIONTYPE_FIELD_NUMBER = 12;
    private boolean hasConnectionType;
    private com.cellbots.CellbotProtos.HALConnection.ConnectionType connectionType_;
    public boolean hasConnectionType() { return hasConnectionType; }
    public com.cellbots.CellbotProtos.HALConnection.ConnectionType getConnectionType() { return connectionType_; }
    
    // optional .cellbots.HALConnection.ConnectionState connectionState = 13;
    public static final int CONNECTIONSTATE_FIELD_NUMBER = 13;
    private boolean hasConnectionState;
    private com.cellbots.CellbotProtos.HALConnection.ConnectionState connectionState_;
    public boolean hasConnectionState() { return hasConnectionState; }
    public com.cellbots.CellbotProtos.HALConnection.ConnectionState getConnectionState() { return connectionState_; }
    
    // optional .cellbots.HALConnection.ConnectionState prevConnectionState = 14;
    public static final int PREVCONNECTIONSTATE_FIELD_NUMBER = 14;
    private boolean hasPrevConnectionState;
    private com.cellbots.CellbotProtos.HALConnection.ConnectionState prevConnectionState_;
    public boolean hasPrevConnectionState() { return hasPrevConnectionState; }
    public com.cellbots.CellbotProtos.HALConnection.ConnectionState getPrevConnectionState() { return prevConnectionState_; }
    
    // optional int64 timestamp = 15;
    public static final int TIMESTAMP_FIELD_NUMBER = 15;
    private boolean hasTimestamp;
    private long timestamp_ = 0L;
    public boolean hasTimestamp() { return hasTimestamp; }
    public long getTimestamp() { return timestamp_; }
    
    // optional string botID = 16;
    public static final int BOTID_FIELD_NUMBER = 16;
    private boolean hasBotID;
    private java.lang.String botID_ = "";
    public boolean hasBotID() { return hasBotID; }
    public java.lang.String getBotID() { return botID_; }
    
    // optional string dbgMsg = 17;
    public static final int DBGMSG_FIELD_NUMBER = 17;
    private boolean hasDbgMsg;
    private java.lang.String dbgMsg_ = "";
    public boolean hasDbgMsg() { return hasDbgMsg; }
    public java.lang.String getDbgMsg() { return dbgMsg_; }
    
    private void initFields() {
      connectionDirection_ = com.cellbots.CellbotProtos.HALConnection.ConnectionDirection.READ_ONLY;
      connectionType_ = com.cellbots.CellbotProtos.HALConnection.ConnectionType.HARDWARE_SERIAL;
      connectionState_ = com.cellbots.CellbotProtos.HALConnection.ConnectionState.DISCONNECTED;
      prevConnectionState_ = com.cellbots.CellbotProtos.HALConnection.ConnectionState.DISCONNECTED;
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasAddress()) {
        output.writeString(1, getAddress());
      }
      if (hasName()) {
        output.writeString(2, getName());
      }
      if (hasUuid()) {
        output.writeString(3, getUuid());
      }
      if (hasBaudRate()) {
        output.writeInt32(5, getBaudRate());
      }
      if (hasReadBuffer()) {
        output.writeBytes(6, getReadBuffer());
      }
      if (hasWriteBuffer()) {
        output.writeBytes(7, getWriteBuffer());
      }
      if (hasDelimiter()) {
        output.writeBytes(8, getDelimiter());
      }
      if (hasRssi()) {
        output.writeInt32(9, getRssi());
      }
      if (hasConnectionDirection()) {
        output.writeEnum(11, getConnectionDirection().getNumber());
      }
      if (hasConnectionType()) {
        output.writeEnum(12, getConnectionType().getNumber());
      }
      if (hasConnectionState()) {
        output.writeEnum(13, getConnectionState().getNumber());
      }
      if (hasPrevConnectionState()) {
        output.writeEnum(14, getPrevConnectionState().getNumber());
      }
      if (hasTimestamp()) {
        output.writeInt64(15, getTimestamp());
      }
      if (hasBotID()) {
        output.writeString(16, getBotID());
      }
      if (hasDbgMsg()) {
        output.writeString(17, getDbgMsg());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasAddress()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getAddress());
      }
      if (hasName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getName());
      }
      if (hasUuid()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getUuid());
      }
      if (hasBaudRate()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, getBaudRate());
      }
      if (hasReadBuffer()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, getReadBuffer());
      }
      if (hasWriteBuffer()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, getWriteBuffer());
      }
      if (hasDelimiter()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, getDelimiter());
      }
      if (hasRssi()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, getRssi());
      }
      if (hasConnectionDirection()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(11, getConnectionDirection().getNumber());
      }
      if (hasConnectionType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(12, getConnectionType().getNumber());
      }
      if (hasConnectionState()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(13, getConnectionState().getNumber());
      }
      if (hasPrevConnectionState()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(14, getPrevConnectionState().getNumber());
      }
      if (hasTimestamp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(15, getTimestamp());
      }
      if (hasBotID()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(16, getBotID());
      }
      if (hasDbgMsg()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(17, getDbgMsg());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.cellbots.CellbotProtos.HALConnection parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALConnection parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALConnection parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALConnection parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALConnection parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALConnection parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALConnection parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.cellbots.CellbotProtos.HALConnection parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.cellbots.CellbotProtos.HALConnection parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALConnection parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.cellbots.CellbotProtos.HALConnection prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.cellbots.CellbotProtos.HALConnection result;
      
      // Construct using com.cellbots.CellbotProtos.HALConnection.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.cellbots.CellbotProtos.HALConnection();
        return builder;
      }
      
      protected com.cellbots.CellbotProtos.HALConnection internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.cellbots.CellbotProtos.HALConnection();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cellbots.CellbotProtos.HALConnection.getDescriptor();
      }
      
      public com.cellbots.CellbotProtos.HALConnection getDefaultInstanceForType() {
        return com.cellbots.CellbotProtos.HALConnection.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.cellbots.CellbotProtos.HALConnection build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.cellbots.CellbotProtos.HALConnection buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.cellbots.CellbotProtos.HALConnection buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.cellbots.CellbotProtos.HALConnection returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cellbots.CellbotProtos.HALConnection) {
          return mergeFrom((com.cellbots.CellbotProtos.HALConnection)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.cellbots.CellbotProtos.HALConnection other) {
        if (other == com.cellbots.CellbotProtos.HALConnection.getDefaultInstance()) return this;
        if (other.hasAddress()) {
          setAddress(other.getAddress());
        }
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasUuid()) {
          setUuid(other.getUuid());
        }
        if (other.hasBaudRate()) {
          setBaudRate(other.getBaudRate());
        }
        if (other.hasReadBuffer()) {
          setReadBuffer(other.getReadBuffer());
        }
        if (other.hasWriteBuffer()) {
          setWriteBuffer(other.getWriteBuffer());
        }
        if (other.hasDelimiter()) {
          setDelimiter(other.getDelimiter());
        }
        if (other.hasRssi()) {
          setRssi(other.getRssi());
        }
        if (other.hasConnectionDirection()) {
          setConnectionDirection(other.getConnectionDirection());
        }
        if (other.hasConnectionType()) {
          setConnectionType(other.getConnectionType());
        }
        if (other.hasConnectionState()) {
          setConnectionState(other.getConnectionState());
        }
        if (other.hasPrevConnectionState()) {
          setPrevConnectionState(other.getPrevConnectionState());
        }
        if (other.hasTimestamp()) {
          setTimestamp(other.getTimestamp());
        }
        if (other.hasBotID()) {
          setBotID(other.getBotID());
        }
        if (other.hasDbgMsg()) {
          setDbgMsg(other.getDbgMsg());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setAddress(input.readString());
              break;
            }
            case 18: {
              setName(input.readString());
              break;
            }
            case 26: {
              setUuid(input.readString());
              break;
            }
            case 40: {
              setBaudRate(input.readInt32());
              break;
            }
            case 50: {
              setReadBuffer(input.readBytes());
              break;
            }
            case 58: {
              setWriteBuffer(input.readBytes());
              break;
            }
            case 66: {
              setDelimiter(input.readBytes());
              break;
            }
            case 72: {
              setRssi(input.readInt32());
              break;
            }
            case 88: {
              int rawValue = input.readEnum();
              com.cellbots.CellbotProtos.HALConnection.ConnectionDirection value = com.cellbots.CellbotProtos.HALConnection.ConnectionDirection.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(11, rawValue);
              } else {
                setConnectionDirection(value);
              }
              break;
            }
            case 96: {
              int rawValue = input.readEnum();
              com.cellbots.CellbotProtos.HALConnection.ConnectionType value = com.cellbots.CellbotProtos.HALConnection.ConnectionType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(12, rawValue);
              } else {
                setConnectionType(value);
              }
              break;
            }
            case 104: {
              int rawValue = input.readEnum();
              com.cellbots.CellbotProtos.HALConnection.ConnectionState value = com.cellbots.CellbotProtos.HALConnection.ConnectionState.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(13, rawValue);
              } else {
                setConnectionState(value);
              }
              break;
            }
            case 112: {
              int rawValue = input.readEnum();
              com.cellbots.CellbotProtos.HALConnection.ConnectionState value = com.cellbots.CellbotProtos.HALConnection.ConnectionState.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(14, rawValue);
              } else {
                setPrevConnectionState(value);
              }
              break;
            }
            case 120: {
              setTimestamp(input.readInt64());
              break;
            }
            case 130: {
              setBotID(input.readString());
              break;
            }
            case 138: {
              setDbgMsg(input.readString());
              break;
            }
          }
        }
      }
      
      
      // optional string address = 1;
      public boolean hasAddress() {
        return result.hasAddress();
      }
      public java.lang.String getAddress() {
        return result.getAddress();
      }
      public Builder setAddress(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasAddress = true;
        result.address_ = value;
        return this;
      }
      public Builder clearAddress() {
        result.hasAddress = false;
        result.address_ = getDefaultInstance().getAddress();
        return this;
      }
      
      // optional string name = 2;
      public boolean hasName() {
        return result.hasName();
      }
      public java.lang.String getName() {
        return result.getName();
      }
      public Builder setName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder clearName() {
        result.hasName = false;
        result.name_ = getDefaultInstance().getName();
        return this;
      }
      
      // optional string uuid = 3;
      public boolean hasUuid() {
        return result.hasUuid();
      }
      public java.lang.String getUuid() {
        return result.getUuid();
      }
      public Builder setUuid(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasUuid = true;
        result.uuid_ = value;
        return this;
      }
      public Builder clearUuid() {
        result.hasUuid = false;
        result.uuid_ = getDefaultInstance().getUuid();
        return this;
      }
      
      // optional int32 baudRate = 5;
      public boolean hasBaudRate() {
        return result.hasBaudRate();
      }
      public int getBaudRate() {
        return result.getBaudRate();
      }
      public Builder setBaudRate(int value) {
        result.hasBaudRate = true;
        result.baudRate_ = value;
        return this;
      }
      public Builder clearBaudRate() {
        result.hasBaudRate = false;
        result.baudRate_ = 0;
        return this;
      }
      
      // optional bytes readBuffer = 6;
      public boolean hasReadBuffer() {
        return result.hasReadBuffer();
      }
      public com.google.protobuf.ByteString getReadBuffer() {
        return result.getReadBuffer();
      }
      public Builder setReadBuffer(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasReadBuffer = true;
        result.readBuffer_ = value;
        return this;
      }
      public Builder clearReadBuffer() {
        result.hasReadBuffer = false;
        result.readBuffer_ = getDefaultInstance().getReadBuffer();
        return this;
      }
      
      // optional bytes writeBuffer = 7;
      public boolean hasWriteBuffer() {
        return result.hasWriteBuffer();
      }
      public com.google.protobuf.ByteString getWriteBuffer() {
        return result.getWriteBuffer();
      }
      public Builder setWriteBuffer(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasWriteBuffer = true;
        result.writeBuffer_ = value;
        return this;
      }
      public Builder clearWriteBuffer() {
        result.hasWriteBuffer = false;
        result.writeBuffer_ = getDefaultInstance().getWriteBuffer();
        return this;
      }
      
      // optional bytes delimiter = 8;
      public boolean hasDelimiter() {
        return result.hasDelimiter();
      }
      public com.google.protobuf.ByteString getDelimiter() {
        return result.getDelimiter();
      }
      public Builder setDelimiter(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasDelimiter = true;
        result.delimiter_ = value;
        return this;
      }
      public Builder clearDelimiter() {
        result.hasDelimiter = false;
        result.delimiter_ = getDefaultInstance().getDelimiter();
        return this;
      }
      
      // optional int32 rssi = 9;
      public boolean hasRssi() {
        return result.hasRssi();
      }
      public int getRssi() {
        return result.getRssi();
      }
      public Builder setRssi(int value) {
        result.hasRssi = true;
        result.rssi_ = value;
        return this;
      }
      public Builder clearRssi() {
        result.hasRssi = false;
        result.rssi_ = 0;
        return this;
      }
      
      // optional .cellbots.HALConnection.ConnectionDirection connectionDirection = 11;
      public boolean hasConnectionDirection() {
        return result.hasConnectionDirection();
      }
      public com.cellbots.CellbotProtos.HALConnection.ConnectionDirection getConnectionDirection() {
        return result.getConnectionDirection();
      }
      public Builder setConnectionDirection(com.cellbots.CellbotProtos.HALConnection.ConnectionDirection value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasConnectionDirection = true;
        result.connectionDirection_ = value;
        return this;
      }
      public Builder clearConnectionDirection() {
        result.hasConnectionDirection = false;
        result.connectionDirection_ = com.cellbots.CellbotProtos.HALConnection.ConnectionDirection.READ_ONLY;
        return this;
      }
      
      // optional .cellbots.HALConnection.ConnectionType connectionType = 12;
      public boolean hasConnectionType() {
        return result.hasConnectionType();
      }
      public com.cellbots.CellbotProtos.HALConnection.ConnectionType getConnectionType() {
        return result.getConnectionType();
      }
      public Builder setConnectionType(com.cellbots.CellbotProtos.HALConnection.ConnectionType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasConnectionType = true;
        result.connectionType_ = value;
        return this;
      }
      public Builder clearConnectionType() {
        result.hasConnectionType = false;
        result.connectionType_ = com.cellbots.CellbotProtos.HALConnection.ConnectionType.HARDWARE_SERIAL;
        return this;
      }
      
      // optional .cellbots.HALConnection.ConnectionState connectionState = 13;
      public boolean hasConnectionState() {
        return result.hasConnectionState();
      }
      public com.cellbots.CellbotProtos.HALConnection.ConnectionState getConnectionState() {
        return result.getConnectionState();
      }
      public Builder setConnectionState(com.cellbots.CellbotProtos.HALConnection.ConnectionState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasConnectionState = true;
        result.connectionState_ = value;
        return this;
      }
      public Builder clearConnectionState() {
        result.hasConnectionState = false;
        result.connectionState_ = com.cellbots.CellbotProtos.HALConnection.ConnectionState.DISCONNECTED;
        return this;
      }
      
      // optional .cellbots.HALConnection.ConnectionState prevConnectionState = 14;
      public boolean hasPrevConnectionState() {
        return result.hasPrevConnectionState();
      }
      public com.cellbots.CellbotProtos.HALConnection.ConnectionState getPrevConnectionState() {
        return result.getPrevConnectionState();
      }
      public Builder setPrevConnectionState(com.cellbots.CellbotProtos.HALConnection.ConnectionState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasPrevConnectionState = true;
        result.prevConnectionState_ = value;
        return this;
      }
      public Builder clearPrevConnectionState() {
        result.hasPrevConnectionState = false;
        result.prevConnectionState_ = com.cellbots.CellbotProtos.HALConnection.ConnectionState.DISCONNECTED;
        return this;
      }
      
      // optional int64 timestamp = 15;
      public boolean hasTimestamp() {
        return result.hasTimestamp();
      }
      public long getTimestamp() {
        return result.getTimestamp();
      }
      public Builder setTimestamp(long value) {
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder clearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
      
      // optional string botID = 16;
      public boolean hasBotID() {
        return result.hasBotID();
      }
      public java.lang.String getBotID() {
        return result.getBotID();
      }
      public Builder setBotID(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasBotID = true;
        result.botID_ = value;
        return this;
      }
      public Builder clearBotID() {
        result.hasBotID = false;
        result.botID_ = getDefaultInstance().getBotID();
        return this;
      }
      
      // optional string dbgMsg = 17;
      public boolean hasDbgMsg() {
        return result.hasDbgMsg();
      }
      public java.lang.String getDbgMsg() {
        return result.getDbgMsg();
      }
      public Builder setDbgMsg(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasDbgMsg = true;
        result.dbgMsg_ = value;
        return this;
      }
      public Builder clearDbgMsg() {
        result.hasDbgMsg = false;
        result.dbgMsg_ = getDefaultInstance().getDbgMsg();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:cellbots.HALConnection)
    }
    
    static {
      defaultInstance = new HALConnection(true);
      com.cellbots.CellbotProtos.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:cellbots.HALConnection)
  }
  
  public static final class PhoneState extends
      com.google.protobuf.GeneratedMessage {
    // Use PhoneState.newBuilder() to construct.
    private PhoneState() {
      initFields();
    }
    private PhoneState(boolean noInit) {}
    
    private static final PhoneState defaultInstance;
    public static PhoneState getDefaultInstance() {
      return defaultInstance;
    }
    
    public PhoneState getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cellbots.CellbotProtos.internal_static_cellbots_PhoneState_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cellbots.CellbotProtos.internal_static_cellbots_PhoneState_fieldAccessorTable;
    }
    
    public static final class Compass extends
        com.google.protobuf.GeneratedMessage {
      // Use Compass.newBuilder() to construct.
      private Compass() {
        initFields();
      }
      private Compass(boolean noInit) {}
      
      private static final Compass defaultInstance;
      public static Compass getDefaultInstance() {
        return defaultInstance;
      }
      
      public Compass getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_PhoneState_Compass_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_PhoneState_Compass_fieldAccessorTable;
      }
      
      // optional float x = 1;
      public static final int X_FIELD_NUMBER = 1;
      private boolean hasX;
      private float x_ = 0F;
      public boolean hasX() { return hasX; }
      public float getX() { return x_; }
      
      // optional float y = 2;
      public static final int Y_FIELD_NUMBER = 2;
      private boolean hasY;
      private float y_ = 0F;
      public boolean hasY() { return hasY; }
      public float getY() { return y_; }
      
      // optional float z = 3;
      public static final int Z_FIELD_NUMBER = 3;
      private boolean hasZ;
      private float z_ = 0F;
      public boolean hasZ() { return hasZ; }
      public float getZ() { return z_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasX()) {
          output.writeFloat(1, getX());
        }
        if (hasY()) {
          output.writeFloat(2, getY());
        }
        if (hasZ()) {
          output.writeFloat(3, getZ());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasX()) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(1, getX());
        }
        if (hasY()) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(2, getY());
        }
        if (hasZ()) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(3, getZ());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static com.cellbots.CellbotProtos.PhoneState.Compass parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Compass parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Compass parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Compass parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Compass parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Compass parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Compass parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.PhoneState.Compass parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.PhoneState.Compass parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Compass parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.cellbots.CellbotProtos.PhoneState.Compass prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private com.cellbots.CellbotProtos.PhoneState.Compass result;
        
        // Construct using com.cellbots.CellbotProtos.PhoneState.Compass.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new com.cellbots.CellbotProtos.PhoneState.Compass();
          return builder;
        }
        
        protected com.cellbots.CellbotProtos.PhoneState.Compass internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new com.cellbots.CellbotProtos.PhoneState.Compass();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.cellbots.CellbotProtos.PhoneState.Compass.getDescriptor();
        }
        
        public com.cellbots.CellbotProtos.PhoneState.Compass getDefaultInstanceForType() {
          return com.cellbots.CellbotProtos.PhoneState.Compass.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public com.cellbots.CellbotProtos.PhoneState.Compass build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private com.cellbots.CellbotProtos.PhoneState.Compass buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public com.cellbots.CellbotProtos.PhoneState.Compass buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          com.cellbots.CellbotProtos.PhoneState.Compass returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.cellbots.CellbotProtos.PhoneState.Compass) {
            return mergeFrom((com.cellbots.CellbotProtos.PhoneState.Compass)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(com.cellbots.CellbotProtos.PhoneState.Compass other) {
          if (other == com.cellbots.CellbotProtos.PhoneState.Compass.getDefaultInstance()) return this;
          if (other.hasX()) {
            setX(other.getX());
          }
          if (other.hasY()) {
            setY(other.getY());
          }
          if (other.hasZ()) {
            setZ(other.getZ());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 13: {
                setX(input.readFloat());
                break;
              }
              case 21: {
                setY(input.readFloat());
                break;
              }
              case 29: {
                setZ(input.readFloat());
                break;
              }
            }
          }
        }
        
        
        // optional float x = 1;
        public boolean hasX() {
          return result.hasX();
        }
        public float getX() {
          return result.getX();
        }
        public Builder setX(float value) {
          result.hasX = true;
          result.x_ = value;
          return this;
        }
        public Builder clearX() {
          result.hasX = false;
          result.x_ = 0F;
          return this;
        }
        
        // optional float y = 2;
        public boolean hasY() {
          return result.hasY();
        }
        public float getY() {
          return result.getY();
        }
        public Builder setY(float value) {
          result.hasY = true;
          result.y_ = value;
          return this;
        }
        public Builder clearY() {
          result.hasY = false;
          result.y_ = 0F;
          return this;
        }
        
        // optional float z = 3;
        public boolean hasZ() {
          return result.hasZ();
        }
        public float getZ() {
          return result.getZ();
        }
        public Builder setZ(float value) {
          result.hasZ = true;
          result.z_ = value;
          return this;
        }
        public Builder clearZ() {
          result.hasZ = false;
          result.z_ = 0F;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:cellbots.PhoneState.Compass)
      }
      
      static {
        defaultInstance = new Compass(true);
        com.cellbots.CellbotProtos.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:cellbots.PhoneState.Compass)
    }
    
    public static final class Accelerometer extends
        com.google.protobuf.GeneratedMessage {
      // Use Accelerometer.newBuilder() to construct.
      private Accelerometer() {
        initFields();
      }
      private Accelerometer(boolean noInit) {}
      
      private static final Accelerometer defaultInstance;
      public static Accelerometer getDefaultInstance() {
        return defaultInstance;
      }
      
      public Accelerometer getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_PhoneState_Accelerometer_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_PhoneState_Accelerometer_fieldAccessorTable;
      }
      
      // optional float x = 1;
      public static final int X_FIELD_NUMBER = 1;
      private boolean hasX;
      private float x_ = 0F;
      public boolean hasX() { return hasX; }
      public float getX() { return x_; }
      
      // optional float y = 2;
      public static final int Y_FIELD_NUMBER = 2;
      private boolean hasY;
      private float y_ = 0F;
      public boolean hasY() { return hasY; }
      public float getY() { return y_; }
      
      // optional float z = 3;
      public static final int Z_FIELD_NUMBER = 3;
      private boolean hasZ;
      private float z_ = 0F;
      public boolean hasZ() { return hasZ; }
      public float getZ() { return z_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasX()) {
          output.writeFloat(1, getX());
        }
        if (hasY()) {
          output.writeFloat(2, getY());
        }
        if (hasZ()) {
          output.writeFloat(3, getZ());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasX()) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(1, getX());
        }
        if (hasY()) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(2, getY());
        }
        if (hasZ()) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(3, getZ());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static com.cellbots.CellbotProtos.PhoneState.Accelerometer parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Accelerometer parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Accelerometer parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Accelerometer parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Accelerometer parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Accelerometer parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Accelerometer parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.PhoneState.Accelerometer parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.PhoneState.Accelerometer parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Accelerometer parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.cellbots.CellbotProtos.PhoneState.Accelerometer prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private com.cellbots.CellbotProtos.PhoneState.Accelerometer result;
        
        // Construct using com.cellbots.CellbotProtos.PhoneState.Accelerometer.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new com.cellbots.CellbotProtos.PhoneState.Accelerometer();
          return builder;
        }
        
        protected com.cellbots.CellbotProtos.PhoneState.Accelerometer internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new com.cellbots.CellbotProtos.PhoneState.Accelerometer();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.cellbots.CellbotProtos.PhoneState.Accelerometer.getDescriptor();
        }
        
        public com.cellbots.CellbotProtos.PhoneState.Accelerometer getDefaultInstanceForType() {
          return com.cellbots.CellbotProtos.PhoneState.Accelerometer.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public com.cellbots.CellbotProtos.PhoneState.Accelerometer build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private com.cellbots.CellbotProtos.PhoneState.Accelerometer buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public com.cellbots.CellbotProtos.PhoneState.Accelerometer buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          com.cellbots.CellbotProtos.PhoneState.Accelerometer returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.cellbots.CellbotProtos.PhoneState.Accelerometer) {
            return mergeFrom((com.cellbots.CellbotProtos.PhoneState.Accelerometer)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(com.cellbots.CellbotProtos.PhoneState.Accelerometer other) {
          if (other == com.cellbots.CellbotProtos.PhoneState.Accelerometer.getDefaultInstance()) return this;
          if (other.hasX()) {
            setX(other.getX());
          }
          if (other.hasY()) {
            setY(other.getY());
          }
          if (other.hasZ()) {
            setZ(other.getZ());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 13: {
                setX(input.readFloat());
                break;
              }
              case 21: {
                setY(input.readFloat());
                break;
              }
              case 29: {
                setZ(input.readFloat());
                break;
              }
            }
          }
        }
        
        
        // optional float x = 1;
        public boolean hasX() {
          return result.hasX();
        }
        public float getX() {
          return result.getX();
        }
        public Builder setX(float value) {
          result.hasX = true;
          result.x_ = value;
          return this;
        }
        public Builder clearX() {
          result.hasX = false;
          result.x_ = 0F;
          return this;
        }
        
        // optional float y = 2;
        public boolean hasY() {
          return result.hasY();
        }
        public float getY() {
          return result.getY();
        }
        public Builder setY(float value) {
          result.hasY = true;
          result.y_ = value;
          return this;
        }
        public Builder clearY() {
          result.hasY = false;
          result.y_ = 0F;
          return this;
        }
        
        // optional float z = 3;
        public boolean hasZ() {
          return result.hasZ();
        }
        public float getZ() {
          return result.getZ();
        }
        public Builder setZ(float value) {
          result.hasZ = true;
          result.z_ = value;
          return this;
        }
        public Builder clearZ() {
          result.hasZ = false;
          result.z_ = 0F;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:cellbots.PhoneState.Accelerometer)
      }
      
      static {
        defaultInstance = new Accelerometer(true);
        com.cellbots.CellbotProtos.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:cellbots.PhoneState.Accelerometer)
    }
    
    public static final class Orientation extends
        com.google.protobuf.GeneratedMessage {
      // Use Orientation.newBuilder() to construct.
      private Orientation() {
        initFields();
      }
      private Orientation(boolean noInit) {}
      
      private static final Orientation defaultInstance;
      public static Orientation getDefaultInstance() {
        return defaultInstance;
      }
      
      public Orientation getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_PhoneState_Orientation_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_PhoneState_Orientation_fieldAccessorTable;
      }
      
      // optional float azimuth = 6;
      public static final int AZIMUTH_FIELD_NUMBER = 6;
      private boolean hasAzimuth;
      private float azimuth_ = 0F;
      public boolean hasAzimuth() { return hasAzimuth; }
      public float getAzimuth() { return azimuth_; }
      
      // optional float pitch = 7;
      public static final int PITCH_FIELD_NUMBER = 7;
      private boolean hasPitch;
      private float pitch_ = 0F;
      public boolean hasPitch() { return hasPitch; }
      public float getPitch() { return pitch_; }
      
      // optional float roll = 8;
      public static final int ROLL_FIELD_NUMBER = 8;
      private boolean hasRoll;
      private float roll_ = 0F;
      public boolean hasRoll() { return hasRoll; }
      public float getRoll() { return roll_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasAzimuth()) {
          output.writeFloat(6, getAzimuth());
        }
        if (hasPitch()) {
          output.writeFloat(7, getPitch());
        }
        if (hasRoll()) {
          output.writeFloat(8, getRoll());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasAzimuth()) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(6, getAzimuth());
        }
        if (hasPitch()) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(7, getPitch());
        }
        if (hasRoll()) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(8, getRoll());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static com.cellbots.CellbotProtos.PhoneState.Orientation parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Orientation parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Orientation parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Orientation parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Orientation parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Orientation parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Orientation parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.PhoneState.Orientation parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.PhoneState.Orientation parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Orientation parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.cellbots.CellbotProtos.PhoneState.Orientation prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private com.cellbots.CellbotProtos.PhoneState.Orientation result;
        
        // Construct using com.cellbots.CellbotProtos.PhoneState.Orientation.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new com.cellbots.CellbotProtos.PhoneState.Orientation();
          return builder;
        }
        
        protected com.cellbots.CellbotProtos.PhoneState.Orientation internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new com.cellbots.CellbotProtos.PhoneState.Orientation();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.cellbots.CellbotProtos.PhoneState.Orientation.getDescriptor();
        }
        
        public com.cellbots.CellbotProtos.PhoneState.Orientation getDefaultInstanceForType() {
          return com.cellbots.CellbotProtos.PhoneState.Orientation.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public com.cellbots.CellbotProtos.PhoneState.Orientation build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private com.cellbots.CellbotProtos.PhoneState.Orientation buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public com.cellbots.CellbotProtos.PhoneState.Orientation buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          com.cellbots.CellbotProtos.PhoneState.Orientation returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.cellbots.CellbotProtos.PhoneState.Orientation) {
            return mergeFrom((com.cellbots.CellbotProtos.PhoneState.Orientation)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(com.cellbots.CellbotProtos.PhoneState.Orientation other) {
          if (other == com.cellbots.CellbotProtos.PhoneState.Orientation.getDefaultInstance()) return this;
          if (other.hasAzimuth()) {
            setAzimuth(other.getAzimuth());
          }
          if (other.hasPitch()) {
            setPitch(other.getPitch());
          }
          if (other.hasRoll()) {
            setRoll(other.getRoll());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 53: {
                setAzimuth(input.readFloat());
                break;
              }
              case 61: {
                setPitch(input.readFloat());
                break;
              }
              case 69: {
                setRoll(input.readFloat());
                break;
              }
            }
          }
        }
        
        
        // optional float azimuth = 6;
        public boolean hasAzimuth() {
          return result.hasAzimuth();
        }
        public float getAzimuth() {
          return result.getAzimuth();
        }
        public Builder setAzimuth(float value) {
          result.hasAzimuth = true;
          result.azimuth_ = value;
          return this;
        }
        public Builder clearAzimuth() {
          result.hasAzimuth = false;
          result.azimuth_ = 0F;
          return this;
        }
        
        // optional float pitch = 7;
        public boolean hasPitch() {
          return result.hasPitch();
        }
        public float getPitch() {
          return result.getPitch();
        }
        public Builder setPitch(float value) {
          result.hasPitch = true;
          result.pitch_ = value;
          return this;
        }
        public Builder clearPitch() {
          result.hasPitch = false;
          result.pitch_ = 0F;
          return this;
        }
        
        // optional float roll = 8;
        public boolean hasRoll() {
          return result.hasRoll();
        }
        public float getRoll() {
          return result.getRoll();
        }
        public Builder setRoll(float value) {
          result.hasRoll = true;
          result.roll_ = value;
          return this;
        }
        public Builder clearRoll() {
          result.hasRoll = false;
          result.roll_ = 0F;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:cellbots.PhoneState.Orientation)
      }
      
      static {
        defaultInstance = new Orientation(true);
        com.cellbots.CellbotProtos.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:cellbots.PhoneState.Orientation)
    }
    
    public static final class WIFI extends
        com.google.protobuf.GeneratedMessage {
      // Use WIFI.newBuilder() to construct.
      private WIFI() {
        initFields();
      }
      private WIFI(boolean noInit) {}
      
      private static final WIFI defaultInstance;
      public static WIFI getDefaultInstance() {
        return defaultInstance;
      }
      
      public WIFI getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_PhoneState_WIFI_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_PhoneState_WIFI_fieldAccessorTable;
      }
      
      // optional bool enabled = 1;
      public static final int ENABLED_FIELD_NUMBER = 1;
      private boolean hasEnabled;
      private boolean enabled_ = false;
      public boolean hasEnabled() { return hasEnabled; }
      public boolean getEnabled() { return enabled_; }
      
      // optional bool connected = 2;
      public static final int CONNECTED_FIELD_NUMBER = 2;
      private boolean hasConnected;
      private boolean connected_ = false;
      public boolean hasConnected() { return hasConnected; }
      public boolean getConnected() { return connected_; }
      
      // optional int32 strength = 3;
      public static final int STRENGTH_FIELD_NUMBER = 3;
      private boolean hasStrength;
      private int strength_ = 0;
      public boolean hasStrength() { return hasStrength; }
      public int getStrength() { return strength_; }
      
      // optional int32 kbps = 4;
      public static final int KBPS_FIELD_NUMBER = 4;
      private boolean hasKbps;
      private int kbps_ = 0;
      public boolean hasKbps() { return hasKbps; }
      public int getKbps() { return kbps_; }
      
      // optional int32 ssid = 5;
      public static final int SSID_FIELD_NUMBER = 5;
      private boolean hasSsid;
      private int ssid_ = 0;
      public boolean hasSsid() { return hasSsid; }
      public int getSsid() { return ssid_; }
      
      // optional int32 ip = 6;
      public static final int IP_FIELD_NUMBER = 6;
      private boolean hasIp;
      private int ip_ = 0;
      public boolean hasIp() { return hasIp; }
      public int getIp() { return ip_; }
      
      // optional int32 chanel = 7;
      public static final int CHANEL_FIELD_NUMBER = 7;
      private boolean hasChanel;
      private int chanel_ = 0;
      public boolean hasChanel() { return hasChanel; }
      public int getChanel() { return chanel_; }
      
      // optional bool adhoc = 8;
      public static final int ADHOC_FIELD_NUMBER = 8;
      private boolean hasAdhoc;
      private boolean adhoc_ = false;
      public boolean hasAdhoc() { return hasAdhoc; }
      public boolean getAdhoc() { return adhoc_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasEnabled()) {
          output.writeBool(1, getEnabled());
        }
        if (hasConnected()) {
          output.writeBool(2, getConnected());
        }
        if (hasStrength()) {
          output.writeInt32(3, getStrength());
        }
        if (hasKbps()) {
          output.writeInt32(4, getKbps());
        }
        if (hasSsid()) {
          output.writeInt32(5, getSsid());
        }
        if (hasIp()) {
          output.writeInt32(6, getIp());
        }
        if (hasChanel()) {
          output.writeInt32(7, getChanel());
        }
        if (hasAdhoc()) {
          output.writeBool(8, getAdhoc());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasEnabled()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(1, getEnabled());
        }
        if (hasConnected()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(2, getConnected());
        }
        if (hasStrength()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, getStrength());
        }
        if (hasKbps()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(4, getKbps());
        }
        if (hasSsid()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(5, getSsid());
        }
        if (hasIp()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(6, getIp());
        }
        if (hasChanel()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(7, getChanel());
        }
        if (hasAdhoc()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(8, getAdhoc());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static com.cellbots.CellbotProtos.PhoneState.WIFI parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.WIFI parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.WIFI parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.WIFI parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.WIFI parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.WIFI parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.WIFI parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.PhoneState.WIFI parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.PhoneState.WIFI parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.WIFI parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.cellbots.CellbotProtos.PhoneState.WIFI prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private com.cellbots.CellbotProtos.PhoneState.WIFI result;
        
        // Construct using com.cellbots.CellbotProtos.PhoneState.WIFI.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new com.cellbots.CellbotProtos.PhoneState.WIFI();
          return builder;
        }
        
        protected com.cellbots.CellbotProtos.PhoneState.WIFI internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new com.cellbots.CellbotProtos.PhoneState.WIFI();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.cellbots.CellbotProtos.PhoneState.WIFI.getDescriptor();
        }
        
        public com.cellbots.CellbotProtos.PhoneState.WIFI getDefaultInstanceForType() {
          return com.cellbots.CellbotProtos.PhoneState.WIFI.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public com.cellbots.CellbotProtos.PhoneState.WIFI build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private com.cellbots.CellbotProtos.PhoneState.WIFI buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public com.cellbots.CellbotProtos.PhoneState.WIFI buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          com.cellbots.CellbotProtos.PhoneState.WIFI returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.cellbots.CellbotProtos.PhoneState.WIFI) {
            return mergeFrom((com.cellbots.CellbotProtos.PhoneState.WIFI)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(com.cellbots.CellbotProtos.PhoneState.WIFI other) {
          if (other == com.cellbots.CellbotProtos.PhoneState.WIFI.getDefaultInstance()) return this;
          if (other.hasEnabled()) {
            setEnabled(other.getEnabled());
          }
          if (other.hasConnected()) {
            setConnected(other.getConnected());
          }
          if (other.hasStrength()) {
            setStrength(other.getStrength());
          }
          if (other.hasKbps()) {
            setKbps(other.getKbps());
          }
          if (other.hasSsid()) {
            setSsid(other.getSsid());
          }
          if (other.hasIp()) {
            setIp(other.getIp());
          }
          if (other.hasChanel()) {
            setChanel(other.getChanel());
          }
          if (other.hasAdhoc()) {
            setAdhoc(other.getAdhoc());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 8: {
                setEnabled(input.readBool());
                break;
              }
              case 16: {
                setConnected(input.readBool());
                break;
              }
              case 24: {
                setStrength(input.readInt32());
                break;
              }
              case 32: {
                setKbps(input.readInt32());
                break;
              }
              case 40: {
                setSsid(input.readInt32());
                break;
              }
              case 48: {
                setIp(input.readInt32());
                break;
              }
              case 56: {
                setChanel(input.readInt32());
                break;
              }
              case 64: {
                setAdhoc(input.readBool());
                break;
              }
            }
          }
        }
        
        
        // optional bool enabled = 1;
        public boolean hasEnabled() {
          return result.hasEnabled();
        }
        public boolean getEnabled() {
          return result.getEnabled();
        }
        public Builder setEnabled(boolean value) {
          result.hasEnabled = true;
          result.enabled_ = value;
          return this;
        }
        public Builder clearEnabled() {
          result.hasEnabled = false;
          result.enabled_ = false;
          return this;
        }
        
        // optional bool connected = 2;
        public boolean hasConnected() {
          return result.hasConnected();
        }
        public boolean getConnected() {
          return result.getConnected();
        }
        public Builder setConnected(boolean value) {
          result.hasConnected = true;
          result.connected_ = value;
          return this;
        }
        public Builder clearConnected() {
          result.hasConnected = false;
          result.connected_ = false;
          return this;
        }
        
        // optional int32 strength = 3;
        public boolean hasStrength() {
          return result.hasStrength();
        }
        public int getStrength() {
          return result.getStrength();
        }
        public Builder setStrength(int value) {
          result.hasStrength = true;
          result.strength_ = value;
          return this;
        }
        public Builder clearStrength() {
          result.hasStrength = false;
          result.strength_ = 0;
          return this;
        }
        
        // optional int32 kbps = 4;
        public boolean hasKbps() {
          return result.hasKbps();
        }
        public int getKbps() {
          return result.getKbps();
        }
        public Builder setKbps(int value) {
          result.hasKbps = true;
          result.kbps_ = value;
          return this;
        }
        public Builder clearKbps() {
          result.hasKbps = false;
          result.kbps_ = 0;
          return this;
        }
        
        // optional int32 ssid = 5;
        public boolean hasSsid() {
          return result.hasSsid();
        }
        public int getSsid() {
          return result.getSsid();
        }
        public Builder setSsid(int value) {
          result.hasSsid = true;
          result.ssid_ = value;
          return this;
        }
        public Builder clearSsid() {
          result.hasSsid = false;
          result.ssid_ = 0;
          return this;
        }
        
        // optional int32 ip = 6;
        public boolean hasIp() {
          return result.hasIp();
        }
        public int getIp() {
          return result.getIp();
        }
        public Builder setIp(int value) {
          result.hasIp = true;
          result.ip_ = value;
          return this;
        }
        public Builder clearIp() {
          result.hasIp = false;
          result.ip_ = 0;
          return this;
        }
        
        // optional int32 chanel = 7;
        public boolean hasChanel() {
          return result.hasChanel();
        }
        public int getChanel() {
          return result.getChanel();
        }
        public Builder setChanel(int value) {
          result.hasChanel = true;
          result.chanel_ = value;
          return this;
        }
        public Builder clearChanel() {
          result.hasChanel = false;
          result.chanel_ = 0;
          return this;
        }
        
        // optional bool adhoc = 8;
        public boolean hasAdhoc() {
          return result.hasAdhoc();
        }
        public boolean getAdhoc() {
          return result.getAdhoc();
        }
        public Builder setAdhoc(boolean value) {
          result.hasAdhoc = true;
          result.adhoc_ = value;
          return this;
        }
        public Builder clearAdhoc() {
          result.hasAdhoc = false;
          result.adhoc_ = false;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:cellbots.PhoneState.WIFI)
      }
      
      static {
        defaultInstance = new WIFI(true);
        com.cellbots.CellbotProtos.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:cellbots.PhoneState.WIFI)
    }
    
    public static final class Cellular extends
        com.google.protobuf.GeneratedMessage {
      // Use Cellular.newBuilder() to construct.
      private Cellular() {
        initFields();
      }
      private Cellular(boolean noInit) {}
      
      private static final Cellular defaultInstance;
      public static Cellular getDefaultInstance() {
        return defaultInstance;
      }
      
      public Cellular getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_PhoneState_Cellular_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_PhoneState_Cellular_fieldAccessorTable;
      }
      
      // optional bool enabled = 1;
      public static final int ENABLED_FIELD_NUMBER = 1;
      private boolean hasEnabled;
      private boolean enabled_ = false;
      public boolean hasEnabled() { return hasEnabled; }
      public boolean getEnabled() { return enabled_; }
      
      // optional bool connected = 2;
      public static final int CONNECTED_FIELD_NUMBER = 2;
      private boolean hasConnected;
      private boolean connected_ = false;
      public boolean hasConnected() { return hasConnected; }
      public boolean getConnected() { return connected_; }
      
      // optional int32 strength = 3;
      public static final int STRENGTH_FIELD_NUMBER = 3;
      private boolean hasStrength;
      private int strength_ = 0;
      public boolean hasStrength() { return hasStrength; }
      public int getStrength() { return strength_; }
      
      // optional int32 kbps = 4;
      public static final int KBPS_FIELD_NUMBER = 4;
      private boolean hasKbps;
      private int kbps_ = 0;
      public boolean hasKbps() { return hasKbps; }
      public int getKbps() { return kbps_; }
      
      // optional int32 ip = 5;
      public static final int IP_FIELD_NUMBER = 5;
      private boolean hasIp;
      private int ip_ = 0;
      public boolean hasIp() { return hasIp; }
      public int getIp() { return ip_; }
      
      // optional bool roaming = 6;
      public static final int ROAMING_FIELD_NUMBER = 6;
      private boolean hasRoaming;
      private boolean roaming_ = false;
      public boolean hasRoaming() { return hasRoaming; }
      public boolean getRoaming() { return roaming_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasEnabled()) {
          output.writeBool(1, getEnabled());
        }
        if (hasConnected()) {
          output.writeBool(2, getConnected());
        }
        if (hasStrength()) {
          output.writeInt32(3, getStrength());
        }
        if (hasKbps()) {
          output.writeInt32(4, getKbps());
        }
        if (hasIp()) {
          output.writeInt32(5, getIp());
        }
        if (hasRoaming()) {
          output.writeBool(6, getRoaming());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasEnabled()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(1, getEnabled());
        }
        if (hasConnected()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(2, getConnected());
        }
        if (hasStrength()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, getStrength());
        }
        if (hasKbps()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(4, getKbps());
        }
        if (hasIp()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(5, getIp());
        }
        if (hasRoaming()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(6, getRoaming());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static com.cellbots.CellbotProtos.PhoneState.Cellular parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Cellular parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Cellular parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Cellular parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Cellular parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Cellular parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Cellular parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.PhoneState.Cellular parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.PhoneState.Cellular parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Cellular parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.cellbots.CellbotProtos.PhoneState.Cellular prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private com.cellbots.CellbotProtos.PhoneState.Cellular result;
        
        // Construct using com.cellbots.CellbotProtos.PhoneState.Cellular.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new com.cellbots.CellbotProtos.PhoneState.Cellular();
          return builder;
        }
        
        protected com.cellbots.CellbotProtos.PhoneState.Cellular internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new com.cellbots.CellbotProtos.PhoneState.Cellular();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.cellbots.CellbotProtos.PhoneState.Cellular.getDescriptor();
        }
        
        public com.cellbots.CellbotProtos.PhoneState.Cellular getDefaultInstanceForType() {
          return com.cellbots.CellbotProtos.PhoneState.Cellular.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public com.cellbots.CellbotProtos.PhoneState.Cellular build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private com.cellbots.CellbotProtos.PhoneState.Cellular buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public com.cellbots.CellbotProtos.PhoneState.Cellular buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          com.cellbots.CellbotProtos.PhoneState.Cellular returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.cellbots.CellbotProtos.PhoneState.Cellular) {
            return mergeFrom((com.cellbots.CellbotProtos.PhoneState.Cellular)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(com.cellbots.CellbotProtos.PhoneState.Cellular other) {
          if (other == com.cellbots.CellbotProtos.PhoneState.Cellular.getDefaultInstance()) return this;
          if (other.hasEnabled()) {
            setEnabled(other.getEnabled());
          }
          if (other.hasConnected()) {
            setConnected(other.getConnected());
          }
          if (other.hasStrength()) {
            setStrength(other.getStrength());
          }
          if (other.hasKbps()) {
            setKbps(other.getKbps());
          }
          if (other.hasIp()) {
            setIp(other.getIp());
          }
          if (other.hasRoaming()) {
            setRoaming(other.getRoaming());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 8: {
                setEnabled(input.readBool());
                break;
              }
              case 16: {
                setConnected(input.readBool());
                break;
              }
              case 24: {
                setStrength(input.readInt32());
                break;
              }
              case 32: {
                setKbps(input.readInt32());
                break;
              }
              case 40: {
                setIp(input.readInt32());
                break;
              }
              case 48: {
                setRoaming(input.readBool());
                break;
              }
            }
          }
        }
        
        
        // optional bool enabled = 1;
        public boolean hasEnabled() {
          return result.hasEnabled();
        }
        public boolean getEnabled() {
          return result.getEnabled();
        }
        public Builder setEnabled(boolean value) {
          result.hasEnabled = true;
          result.enabled_ = value;
          return this;
        }
        public Builder clearEnabled() {
          result.hasEnabled = false;
          result.enabled_ = false;
          return this;
        }
        
        // optional bool connected = 2;
        public boolean hasConnected() {
          return result.hasConnected();
        }
        public boolean getConnected() {
          return result.getConnected();
        }
        public Builder setConnected(boolean value) {
          result.hasConnected = true;
          result.connected_ = value;
          return this;
        }
        public Builder clearConnected() {
          result.hasConnected = false;
          result.connected_ = false;
          return this;
        }
        
        // optional int32 strength = 3;
        public boolean hasStrength() {
          return result.hasStrength();
        }
        public int getStrength() {
          return result.getStrength();
        }
        public Builder setStrength(int value) {
          result.hasStrength = true;
          result.strength_ = value;
          return this;
        }
        public Builder clearStrength() {
          result.hasStrength = false;
          result.strength_ = 0;
          return this;
        }
        
        // optional int32 kbps = 4;
        public boolean hasKbps() {
          return result.hasKbps();
        }
        public int getKbps() {
          return result.getKbps();
        }
        public Builder setKbps(int value) {
          result.hasKbps = true;
          result.kbps_ = value;
          return this;
        }
        public Builder clearKbps() {
          result.hasKbps = false;
          result.kbps_ = 0;
          return this;
        }
        
        // optional int32 ip = 5;
        public boolean hasIp() {
          return result.hasIp();
        }
        public int getIp() {
          return result.getIp();
        }
        public Builder setIp(int value) {
          result.hasIp = true;
          result.ip_ = value;
          return this;
        }
        public Builder clearIp() {
          result.hasIp = false;
          result.ip_ = 0;
          return this;
        }
        
        // optional bool roaming = 6;
        public boolean hasRoaming() {
          return result.hasRoaming();
        }
        public boolean getRoaming() {
          return result.getRoaming();
        }
        public Builder setRoaming(boolean value) {
          result.hasRoaming = true;
          result.roaming_ = value;
          return this;
        }
        public Builder clearRoaming() {
          result.hasRoaming = false;
          result.roaming_ = false;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:cellbots.PhoneState.Cellular)
      }
      
      static {
        defaultInstance = new Cellular(true);
        com.cellbots.CellbotProtos.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:cellbots.PhoneState.Cellular)
    }
    
    public static final class Location extends
        com.google.protobuf.GeneratedMessage {
      // Use Location.newBuilder() to construct.
      private Location() {
        initFields();
      }
      private Location(boolean noInit) {}
      
      private static final Location defaultInstance;
      public static Location getDefaultInstance() {
        return defaultInstance;
      }
      
      public Location getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_PhoneState_Location_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_PhoneState_Location_fieldAccessorTable;
      }
      
      // optional float accuracy = 1;
      public static final int ACCURACY_FIELD_NUMBER = 1;
      private boolean hasAccuracy;
      private float accuracy_ = 0F;
      public boolean hasAccuracy() { return hasAccuracy; }
      public float getAccuracy() { return accuracy_; }
      
      // optional double altitude = 2;
      public static final int ALTITUDE_FIELD_NUMBER = 2;
      private boolean hasAltitude;
      private double altitude_ = 0D;
      public boolean hasAltitude() { return hasAltitude; }
      public double getAltitude() { return altitude_; }
      
      // optional float bearing = 3;
      public static final int BEARING_FIELD_NUMBER = 3;
      private boolean hasBearing;
      private float bearing_ = 0F;
      public boolean hasBearing() { return hasBearing; }
      public float getBearing() { return bearing_; }
      
      // required double latitude = 4;
      public static final int LATITUDE_FIELD_NUMBER = 4;
      private boolean hasLatitude;
      private double latitude_ = 0D;
      public boolean hasLatitude() { return hasLatitude; }
      public double getLatitude() { return latitude_; }
      
      // required double longitude = 5;
      public static final int LONGITUDE_FIELD_NUMBER = 5;
      private boolean hasLongitude;
      private double longitude_ = 0D;
      public boolean hasLongitude() { return hasLongitude; }
      public double getLongitude() { return longitude_; }
      
      // optional string provider = 6;
      public static final int PROVIDER_FIELD_NUMBER = 6;
      private boolean hasProvider;
      private java.lang.String provider_ = "";
      public boolean hasProvider() { return hasProvider; }
      public java.lang.String getProvider() { return provider_; }
      
      // optional float speed = 7;
      public static final int SPEED_FIELD_NUMBER = 7;
      private boolean hasSpeed;
      private float speed_ = 0F;
      public boolean hasSpeed() { return hasSpeed; }
      public float getSpeed() { return speed_; }
      
      // optional int64 time = 8;
      public static final int TIME_FIELD_NUMBER = 8;
      private boolean hasTime;
      private long time_ = 0L;
      public boolean hasTime() { return hasTime; }
      public long getTime() { return time_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        if (!hasLatitude) return false;
        if (!hasLongitude) return false;
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasAccuracy()) {
          output.writeFloat(1, getAccuracy());
        }
        if (hasAltitude()) {
          output.writeDouble(2, getAltitude());
        }
        if (hasBearing()) {
          output.writeFloat(3, getBearing());
        }
        if (hasLatitude()) {
          output.writeDouble(4, getLatitude());
        }
        if (hasLongitude()) {
          output.writeDouble(5, getLongitude());
        }
        if (hasProvider()) {
          output.writeString(6, getProvider());
        }
        if (hasSpeed()) {
          output.writeFloat(7, getSpeed());
        }
        if (hasTime()) {
          output.writeInt64(8, getTime());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasAccuracy()) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(1, getAccuracy());
        }
        if (hasAltitude()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, getAltitude());
        }
        if (hasBearing()) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(3, getBearing());
        }
        if (hasLatitude()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(4, getLatitude());
        }
        if (hasLongitude()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(5, getLongitude());
        }
        if (hasProvider()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(6, getProvider());
        }
        if (hasSpeed()) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(7, getSpeed());
        }
        if (hasTime()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(8, getTime());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static com.cellbots.CellbotProtos.PhoneState.Location parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Location parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Location parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Location parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Location parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Location parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Location parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.PhoneState.Location parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.PhoneState.Location parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.PhoneState.Location parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.cellbots.CellbotProtos.PhoneState.Location prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private com.cellbots.CellbotProtos.PhoneState.Location result;
        
        // Construct using com.cellbots.CellbotProtos.PhoneState.Location.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new com.cellbots.CellbotProtos.PhoneState.Location();
          return builder;
        }
        
        protected com.cellbots.CellbotProtos.PhoneState.Location internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new com.cellbots.CellbotProtos.PhoneState.Location();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.cellbots.CellbotProtos.PhoneState.Location.getDescriptor();
        }
        
        public com.cellbots.CellbotProtos.PhoneState.Location getDefaultInstanceForType() {
          return com.cellbots.CellbotProtos.PhoneState.Location.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public com.cellbots.CellbotProtos.PhoneState.Location build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private com.cellbots.CellbotProtos.PhoneState.Location buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public com.cellbots.CellbotProtos.PhoneState.Location buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          com.cellbots.CellbotProtos.PhoneState.Location returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.cellbots.CellbotProtos.PhoneState.Location) {
            return mergeFrom((com.cellbots.CellbotProtos.PhoneState.Location)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(com.cellbots.CellbotProtos.PhoneState.Location other) {
          if (other == com.cellbots.CellbotProtos.PhoneState.Location.getDefaultInstance()) return this;
          if (other.hasAccuracy()) {
            setAccuracy(other.getAccuracy());
          }
          if (other.hasAltitude()) {
            setAltitude(other.getAltitude());
          }
          if (other.hasBearing()) {
            setBearing(other.getBearing());
          }
          if (other.hasLatitude()) {
            setLatitude(other.getLatitude());
          }
          if (other.hasLongitude()) {
            setLongitude(other.getLongitude());
          }
          if (other.hasProvider()) {
            setProvider(other.getProvider());
          }
          if (other.hasSpeed()) {
            setSpeed(other.getSpeed());
          }
          if (other.hasTime()) {
            setTime(other.getTime());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 13: {
                setAccuracy(input.readFloat());
                break;
              }
              case 17: {
                setAltitude(input.readDouble());
                break;
              }
              case 29: {
                setBearing(input.readFloat());
                break;
              }
              case 33: {
                setLatitude(input.readDouble());
                break;
              }
              case 41: {
                setLongitude(input.readDouble());
                break;
              }
              case 50: {
                setProvider(input.readString());
                break;
              }
              case 61: {
                setSpeed(input.readFloat());
                break;
              }
              case 64: {
                setTime(input.readInt64());
                break;
              }
            }
          }
        }
        
        
        // optional float accuracy = 1;
        public boolean hasAccuracy() {
          return result.hasAccuracy();
        }
        public float getAccuracy() {
          return result.getAccuracy();
        }
        public Builder setAccuracy(float value) {
          result.hasAccuracy = true;
          result.accuracy_ = value;
          return this;
        }
        public Builder clearAccuracy() {
          result.hasAccuracy = false;
          result.accuracy_ = 0F;
          return this;
        }
        
        // optional double altitude = 2;
        public boolean hasAltitude() {
          return result.hasAltitude();
        }
        public double getAltitude() {
          return result.getAltitude();
        }
        public Builder setAltitude(double value) {
          result.hasAltitude = true;
          result.altitude_ = value;
          return this;
        }
        public Builder clearAltitude() {
          result.hasAltitude = false;
          result.altitude_ = 0D;
          return this;
        }
        
        // optional float bearing = 3;
        public boolean hasBearing() {
          return result.hasBearing();
        }
        public float getBearing() {
          return result.getBearing();
        }
        public Builder setBearing(float value) {
          result.hasBearing = true;
          result.bearing_ = value;
          return this;
        }
        public Builder clearBearing() {
          result.hasBearing = false;
          result.bearing_ = 0F;
          return this;
        }
        
        // required double latitude = 4;
        public boolean hasLatitude() {
          return result.hasLatitude();
        }
        public double getLatitude() {
          return result.getLatitude();
        }
        public Builder setLatitude(double value) {
          result.hasLatitude = true;
          result.latitude_ = value;
          return this;
        }
        public Builder clearLatitude() {
          result.hasLatitude = false;
          result.latitude_ = 0D;
          return this;
        }
        
        // required double longitude = 5;
        public boolean hasLongitude() {
          return result.hasLongitude();
        }
        public double getLongitude() {
          return result.getLongitude();
        }
        public Builder setLongitude(double value) {
          result.hasLongitude = true;
          result.longitude_ = value;
          return this;
        }
        public Builder clearLongitude() {
          result.hasLongitude = false;
          result.longitude_ = 0D;
          return this;
        }
        
        // optional string provider = 6;
        public boolean hasProvider() {
          return result.hasProvider();
        }
        public java.lang.String getProvider() {
          return result.getProvider();
        }
        public Builder setProvider(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasProvider = true;
          result.provider_ = value;
          return this;
        }
        public Builder clearProvider() {
          result.hasProvider = false;
          result.provider_ = getDefaultInstance().getProvider();
          return this;
        }
        
        // optional float speed = 7;
        public boolean hasSpeed() {
          return result.hasSpeed();
        }
        public float getSpeed() {
          return result.getSpeed();
        }
        public Builder setSpeed(float value) {
          result.hasSpeed = true;
          result.speed_ = value;
          return this;
        }
        public Builder clearSpeed() {
          result.hasSpeed = false;
          result.speed_ = 0F;
          return this;
        }
        
        // optional int64 time = 8;
        public boolean hasTime() {
          return result.hasTime();
        }
        public long getTime() {
          return result.getTime();
        }
        public Builder setTime(long value) {
          result.hasTime = true;
          result.time_ = value;
          return this;
        }
        public Builder clearTime() {
          result.hasTime = false;
          result.time_ = 0L;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:cellbots.PhoneState.Location)
      }
      
      static {
        defaultInstance = new Location(true);
        com.cellbots.CellbotProtos.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:cellbots.PhoneState.Location)
    }
    
    // required int64 timestamp = 1;
    public static final int TIMESTAMP_FIELD_NUMBER = 1;
    private boolean hasTimestamp;
    private long timestamp_ = 0L;
    public boolean hasTimestamp() { return hasTimestamp; }
    public long getTimestamp() { return timestamp_; }
    
    // optional string botID = 2;
    public static final int BOTID_FIELD_NUMBER = 2;
    private boolean hasBotID;
    private java.lang.String botID_ = "";
    public boolean hasBotID() { return hasBotID; }
    public java.lang.String getBotID() { return botID_; }
    
    // optional string dbgMsg = 3;
    public static final int DBGMSG_FIELD_NUMBER = 3;
    private boolean hasDbgMsg;
    private java.lang.String dbgMsg_ = "";
    public boolean hasDbgMsg() { return hasDbgMsg; }
    public java.lang.String getDbgMsg() { return dbgMsg_; }
    
    // optional .cellbots.PhoneState.Compass compass = 4;
    public static final int COMPASS_FIELD_NUMBER = 4;
    private boolean hasCompass;
    private com.cellbots.CellbotProtos.PhoneState.Compass compass_;
    public boolean hasCompass() { return hasCompass; }
    public com.cellbots.CellbotProtos.PhoneState.Compass getCompass() { return compass_; }
    
    // optional .cellbots.PhoneState.Accelerometer accelerometer = 5;
    public static final int ACCELEROMETER_FIELD_NUMBER = 5;
    private boolean hasAccelerometer;
    private com.cellbots.CellbotProtos.PhoneState.Accelerometer accelerometer_;
    public boolean hasAccelerometer() { return hasAccelerometer; }
    public com.cellbots.CellbotProtos.PhoneState.Accelerometer getAccelerometer() { return accelerometer_; }
    
    // optional .cellbots.PhoneState.Orientation orientation = 6;
    public static final int ORIENTATION_FIELD_NUMBER = 6;
    private boolean hasOrientation;
    private com.cellbots.CellbotProtos.PhoneState.Orientation orientation_;
    public boolean hasOrientation() { return hasOrientation; }
    public com.cellbots.CellbotProtos.PhoneState.Orientation getOrientation() { return orientation_; }
    
    // optional float phoneBatteryLevel = 7;
    public static final int PHONEBATTERYLEVEL_FIELD_NUMBER = 7;
    private boolean hasPhoneBatteryLevel;
    private float phoneBatteryLevel_ = 0F;
    public boolean hasPhoneBatteryLevel() { return hasPhoneBatteryLevel; }
    public float getPhoneBatteryLevel() { return phoneBatteryLevel_; }
    
    // optional int32 phoneBatteryTemp = 8;
    public static final int PHONEBATTERYTEMP_FIELD_NUMBER = 8;
    private boolean hasPhoneBatteryTemp;
    private int phoneBatteryTemp_ = 0;
    public boolean hasPhoneBatteryTemp() { return hasPhoneBatteryTemp; }
    public int getPhoneBatteryTemp() { return phoneBatteryTemp_; }
    
    // optional float lightLevel = 9;
    public static final int LIGHTLEVEL_FIELD_NUMBER = 9;
    private boolean hasLightLevel;
    private float lightLevel_ = 0F;
    public boolean hasLightLevel() { return hasLightLevel; }
    public float getLightLevel() { return lightLevel_; }
    
    // optional bool vibrating = 10;
    public static final int VIBRATING_FIELD_NUMBER = 10;
    private boolean hasVibrating;
    private boolean vibrating_ = false;
    public boolean hasVibrating() { return hasVibrating; }
    public boolean getVibrating() { return vibrating_; }
    
    // optional bool notificationLightOn = 11;
    public static final int NOTIFICATIONLIGHTON_FIELD_NUMBER = 11;
    private boolean hasNotificationLightOn;
    private boolean notificationLightOn_ = false;
    public boolean hasNotificationLightOn() { return hasNotificationLightOn; }
    public boolean getNotificationLightOn() { return notificationLightOn_; }
    
    // optional int32 notificationLightFreq = 12;
    public static final int NOTIFICATIONLIGHTFREQ_FIELD_NUMBER = 12;
    private boolean hasNotificationLightFreq;
    private int notificationLightFreq_ = 0;
    public boolean hasNotificationLightFreq() { return hasNotificationLightFreq; }
    public int getNotificationLightFreq() { return notificationLightFreq_; }
    
    // optional int32 notificationLightColor = 13;
    public static final int NOTIFICATIONLIGHTCOLOR_FIELD_NUMBER = 13;
    private boolean hasNotificationLightColor;
    private int notificationLightColor_ = 0;
    public boolean hasNotificationLightColor() { return hasNotificationLightColor; }
    public int getNotificationLightColor() { return notificationLightColor_; }
    
    // optional int32 proximity = 14;
    public static final int PROXIMITY_FIELD_NUMBER = 14;
    private boolean hasProximity;
    private int proximity_ = 0;
    public boolean hasProximity() { return hasProximity; }
    public int getProximity() { return proximity_; }
    
    // optional int32 screenBrightness = 15;
    public static final int SCREENBRIGHTNESS_FIELD_NUMBER = 15;
    private boolean hasScreenBrightness;
    private int screenBrightness_ = 0;
    public boolean hasScreenBrightness() { return hasScreenBrightness; }
    public int getScreenBrightness() { return screenBrightness_; }
    
    // optional .cellbots.PhoneState.WIFI wifi = 16;
    public static final int WIFI_FIELD_NUMBER = 16;
    private boolean hasWifi;
    private com.cellbots.CellbotProtos.PhoneState.WIFI wifi_;
    public boolean hasWifi() { return hasWifi; }
    public com.cellbots.CellbotProtos.PhoneState.WIFI getWifi() { return wifi_; }
    
    // optional .cellbots.PhoneState.Cellular cellular = 17;
    public static final int CELLULAR_FIELD_NUMBER = 17;
    private boolean hasCellular;
    private com.cellbots.CellbotProtos.PhoneState.Cellular cellular_;
    public boolean hasCellular() { return hasCellular; }
    public com.cellbots.CellbotProtos.PhoneState.Cellular getCellular() { return cellular_; }
    
    // optional .cellbots.PhoneState.Location location = 18;
    public static final int LOCATION_FIELD_NUMBER = 18;
    private boolean hasLocation;
    private com.cellbots.CellbotProtos.PhoneState.Location location_;
    public boolean hasLocation() { return hasLocation; }
    public com.cellbots.CellbotProtos.PhoneState.Location getLocation() { return location_; }
    
    // optional bool gpsEnabled = 19;
    public static final int GPSENABLED_FIELD_NUMBER = 19;
    private boolean hasGpsEnabled;
    private boolean gpsEnabled_ = false;
    public boolean hasGpsEnabled() { return hasGpsEnabled; }
    public boolean getGpsEnabled() { return gpsEnabled_; }
    
    // optional .cellbots.HALConnection HALConnection = 20;
    public static final int HALCONNECTION_FIELD_NUMBER = 20;
    private boolean hasHALConnection;
    private com.cellbots.CellbotProtos.HALConnection hALConnection_;
    public boolean hasHALConnection() { return hasHALConnection; }
    public com.cellbots.CellbotProtos.HALConnection getHALConnection() { return hALConnection_; }
    
    private void initFields() {
      compass_ = com.cellbots.CellbotProtos.PhoneState.Compass.getDefaultInstance();
      accelerometer_ = com.cellbots.CellbotProtos.PhoneState.Accelerometer.getDefaultInstance();
      orientation_ = com.cellbots.CellbotProtos.PhoneState.Orientation.getDefaultInstance();
      wifi_ = com.cellbots.CellbotProtos.PhoneState.WIFI.getDefaultInstance();
      cellular_ = com.cellbots.CellbotProtos.PhoneState.Cellular.getDefaultInstance();
      location_ = com.cellbots.CellbotProtos.PhoneState.Location.getDefaultInstance();
      hALConnection_ = com.cellbots.CellbotProtos.HALConnection.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasTimestamp) return false;
      if (hasLocation()) {
        if (!getLocation().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasTimestamp()) {
        output.writeInt64(1, getTimestamp());
      }
      if (hasBotID()) {
        output.writeString(2, getBotID());
      }
      if (hasDbgMsg()) {
        output.writeString(3, getDbgMsg());
      }
      if (hasCompass()) {
        output.writeMessage(4, getCompass());
      }
      if (hasAccelerometer()) {
        output.writeMessage(5, getAccelerometer());
      }
      if (hasOrientation()) {
        output.writeMessage(6, getOrientation());
      }
      if (hasPhoneBatteryLevel()) {
        output.writeFloat(7, getPhoneBatteryLevel());
      }
      if (hasPhoneBatteryTemp()) {
        output.writeInt32(8, getPhoneBatteryTemp());
      }
      if (hasLightLevel()) {
        output.writeFloat(9, getLightLevel());
      }
      if (hasVibrating()) {
        output.writeBool(10, getVibrating());
      }
      if (hasNotificationLightOn()) {
        output.writeBool(11, getNotificationLightOn());
      }
      if (hasNotificationLightFreq()) {
        output.writeInt32(12, getNotificationLightFreq());
      }
      if (hasNotificationLightColor()) {
        output.writeInt32(13, getNotificationLightColor());
      }
      if (hasProximity()) {
        output.writeInt32(14, getProximity());
      }
      if (hasScreenBrightness()) {
        output.writeInt32(15, getScreenBrightness());
      }
      if (hasWifi()) {
        output.writeMessage(16, getWifi());
      }
      if (hasCellular()) {
        output.writeMessage(17, getCellular());
      }
      if (hasLocation()) {
        output.writeMessage(18, getLocation());
      }
      if (hasGpsEnabled()) {
        output.writeBool(19, getGpsEnabled());
      }
      if (hasHALConnection()) {
        output.writeMessage(20, getHALConnection());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTimestamp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, getTimestamp());
      }
      if (hasBotID()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getBotID());
      }
      if (hasDbgMsg()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getDbgMsg());
      }
      if (hasCompass()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getCompass());
      }
      if (hasAccelerometer()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getAccelerometer());
      }
      if (hasOrientation()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getOrientation());
      }
      if (hasPhoneBatteryLevel()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, getPhoneBatteryLevel());
      }
      if (hasPhoneBatteryTemp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, getPhoneBatteryTemp());
      }
      if (hasLightLevel()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, getLightLevel());
      }
      if (hasVibrating()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, getVibrating());
      }
      if (hasNotificationLightOn()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, getNotificationLightOn());
      }
      if (hasNotificationLightFreq()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, getNotificationLightFreq());
      }
      if (hasNotificationLightColor()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, getNotificationLightColor());
      }
      if (hasProximity()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, getProximity());
      }
      if (hasScreenBrightness()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, getScreenBrightness());
      }
      if (hasWifi()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, getWifi());
      }
      if (hasCellular()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, getCellular());
      }
      if (hasLocation()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, getLocation());
      }
      if (hasGpsEnabled()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(19, getGpsEnabled());
      }
      if (hasHALConnection()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, getHALConnection());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.cellbots.CellbotProtos.PhoneState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.cellbots.CellbotProtos.PhoneState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.cellbots.CellbotProtos.PhoneState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.cellbots.CellbotProtos.PhoneState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.cellbots.CellbotProtos.PhoneState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.cellbots.CellbotProtos.PhoneState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.cellbots.CellbotProtos.PhoneState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.cellbots.CellbotProtos.PhoneState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.cellbots.CellbotProtos.PhoneState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.cellbots.CellbotProtos.PhoneState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.cellbots.CellbotProtos.PhoneState prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.cellbots.CellbotProtos.PhoneState result;
      
      // Construct using com.cellbots.CellbotProtos.PhoneState.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.cellbots.CellbotProtos.PhoneState();
        return builder;
      }
      
      protected com.cellbots.CellbotProtos.PhoneState internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.cellbots.CellbotProtos.PhoneState();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cellbots.CellbotProtos.PhoneState.getDescriptor();
      }
      
      public com.cellbots.CellbotProtos.PhoneState getDefaultInstanceForType() {
        return com.cellbots.CellbotProtos.PhoneState.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.cellbots.CellbotProtos.PhoneState build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.cellbots.CellbotProtos.PhoneState buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.cellbots.CellbotProtos.PhoneState buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.cellbots.CellbotProtos.PhoneState returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cellbots.CellbotProtos.PhoneState) {
          return mergeFrom((com.cellbots.CellbotProtos.PhoneState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.cellbots.CellbotProtos.PhoneState other) {
        if (other == com.cellbots.CellbotProtos.PhoneState.getDefaultInstance()) return this;
        if (other.hasTimestamp()) {
          setTimestamp(other.getTimestamp());
        }
        if (other.hasBotID()) {
          setBotID(other.getBotID());
        }
        if (other.hasDbgMsg()) {
          setDbgMsg(other.getDbgMsg());
        }
        if (other.hasCompass()) {
          mergeCompass(other.getCompass());
        }
        if (other.hasAccelerometer()) {
          mergeAccelerometer(other.getAccelerometer());
        }
        if (other.hasOrientation()) {
          mergeOrientation(other.getOrientation());
        }
        if (other.hasPhoneBatteryLevel()) {
          setPhoneBatteryLevel(other.getPhoneBatteryLevel());
        }
        if (other.hasPhoneBatteryTemp()) {
          setPhoneBatteryTemp(other.getPhoneBatteryTemp());
        }
        if (other.hasLightLevel()) {
          setLightLevel(other.getLightLevel());
        }
        if (other.hasVibrating()) {
          setVibrating(other.getVibrating());
        }
        if (other.hasNotificationLightOn()) {
          setNotificationLightOn(other.getNotificationLightOn());
        }
        if (other.hasNotificationLightFreq()) {
          setNotificationLightFreq(other.getNotificationLightFreq());
        }
        if (other.hasNotificationLightColor()) {
          setNotificationLightColor(other.getNotificationLightColor());
        }
        if (other.hasProximity()) {
          setProximity(other.getProximity());
        }
        if (other.hasScreenBrightness()) {
          setScreenBrightness(other.getScreenBrightness());
        }
        if (other.hasWifi()) {
          mergeWifi(other.getWifi());
        }
        if (other.hasCellular()) {
          mergeCellular(other.getCellular());
        }
        if (other.hasLocation()) {
          mergeLocation(other.getLocation());
        }
        if (other.hasGpsEnabled()) {
          setGpsEnabled(other.getGpsEnabled());
        }
        if (other.hasHALConnection()) {
          mergeHALConnection(other.getHALConnection());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setTimestamp(input.readInt64());
              break;
            }
            case 18: {
              setBotID(input.readString());
              break;
            }
            case 26: {
              setDbgMsg(input.readString());
              break;
            }
            case 34: {
              com.cellbots.CellbotProtos.PhoneState.Compass.Builder subBuilder = com.cellbots.CellbotProtos.PhoneState.Compass.newBuilder();
              if (hasCompass()) {
                subBuilder.mergeFrom(getCompass());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCompass(subBuilder.buildPartial());
              break;
            }
            case 42: {
              com.cellbots.CellbotProtos.PhoneState.Accelerometer.Builder subBuilder = com.cellbots.CellbotProtos.PhoneState.Accelerometer.newBuilder();
              if (hasAccelerometer()) {
                subBuilder.mergeFrom(getAccelerometer());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setAccelerometer(subBuilder.buildPartial());
              break;
            }
            case 50: {
              com.cellbots.CellbotProtos.PhoneState.Orientation.Builder subBuilder = com.cellbots.CellbotProtos.PhoneState.Orientation.newBuilder();
              if (hasOrientation()) {
                subBuilder.mergeFrom(getOrientation());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setOrientation(subBuilder.buildPartial());
              break;
            }
            case 61: {
              setPhoneBatteryLevel(input.readFloat());
              break;
            }
            case 64: {
              setPhoneBatteryTemp(input.readInt32());
              break;
            }
            case 77: {
              setLightLevel(input.readFloat());
              break;
            }
            case 80: {
              setVibrating(input.readBool());
              break;
            }
            case 88: {
              setNotificationLightOn(input.readBool());
              break;
            }
            case 96: {
              setNotificationLightFreq(input.readInt32());
              break;
            }
            case 104: {
              setNotificationLightColor(input.readInt32());
              break;
            }
            case 112: {
              setProximity(input.readInt32());
              break;
            }
            case 120: {
              setScreenBrightness(input.readInt32());
              break;
            }
            case 130: {
              com.cellbots.CellbotProtos.PhoneState.WIFI.Builder subBuilder = com.cellbots.CellbotProtos.PhoneState.WIFI.newBuilder();
              if (hasWifi()) {
                subBuilder.mergeFrom(getWifi());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setWifi(subBuilder.buildPartial());
              break;
            }
            case 138: {
              com.cellbots.CellbotProtos.PhoneState.Cellular.Builder subBuilder = com.cellbots.CellbotProtos.PhoneState.Cellular.newBuilder();
              if (hasCellular()) {
                subBuilder.mergeFrom(getCellular());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCellular(subBuilder.buildPartial());
              break;
            }
            case 146: {
              com.cellbots.CellbotProtos.PhoneState.Location.Builder subBuilder = com.cellbots.CellbotProtos.PhoneState.Location.newBuilder();
              if (hasLocation()) {
                subBuilder.mergeFrom(getLocation());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setLocation(subBuilder.buildPartial());
              break;
            }
            case 152: {
              setGpsEnabled(input.readBool());
              break;
            }
            case 162: {
              com.cellbots.CellbotProtos.HALConnection.Builder subBuilder = com.cellbots.CellbotProtos.HALConnection.newBuilder();
              if (hasHALConnection()) {
                subBuilder.mergeFrom(getHALConnection());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setHALConnection(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required int64 timestamp = 1;
      public boolean hasTimestamp() {
        return result.hasTimestamp();
      }
      public long getTimestamp() {
        return result.getTimestamp();
      }
      public Builder setTimestamp(long value) {
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder clearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
      
      // optional string botID = 2;
      public boolean hasBotID() {
        return result.hasBotID();
      }
      public java.lang.String getBotID() {
        return result.getBotID();
      }
      public Builder setBotID(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasBotID = true;
        result.botID_ = value;
        return this;
      }
      public Builder clearBotID() {
        result.hasBotID = false;
        result.botID_ = getDefaultInstance().getBotID();
        return this;
      }
      
      // optional string dbgMsg = 3;
      public boolean hasDbgMsg() {
        return result.hasDbgMsg();
      }
      public java.lang.String getDbgMsg() {
        return result.getDbgMsg();
      }
      public Builder setDbgMsg(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasDbgMsg = true;
        result.dbgMsg_ = value;
        return this;
      }
      public Builder clearDbgMsg() {
        result.hasDbgMsg = false;
        result.dbgMsg_ = getDefaultInstance().getDbgMsg();
        return this;
      }
      
      // optional .cellbots.PhoneState.Compass compass = 4;
      public boolean hasCompass() {
        return result.hasCompass();
      }
      public com.cellbots.CellbotProtos.PhoneState.Compass getCompass() {
        return result.getCompass();
      }
      public Builder setCompass(com.cellbots.CellbotProtos.PhoneState.Compass value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCompass = true;
        result.compass_ = value;
        return this;
      }
      public Builder setCompass(com.cellbots.CellbotProtos.PhoneState.Compass.Builder builderForValue) {
        result.hasCompass = true;
        result.compass_ = builderForValue.build();
        return this;
      }
      public Builder mergeCompass(com.cellbots.CellbotProtos.PhoneState.Compass value) {
        if (result.hasCompass() &&
            result.compass_ != com.cellbots.CellbotProtos.PhoneState.Compass.getDefaultInstance()) {
          result.compass_ =
            com.cellbots.CellbotProtos.PhoneState.Compass.newBuilder(result.compass_).mergeFrom(value).buildPartial();
        } else {
          result.compass_ = value;
        }
        result.hasCompass = true;
        return this;
      }
      public Builder clearCompass() {
        result.hasCompass = false;
        result.compass_ = com.cellbots.CellbotProtos.PhoneState.Compass.getDefaultInstance();
        return this;
      }
      
      // optional .cellbots.PhoneState.Accelerometer accelerometer = 5;
      public boolean hasAccelerometer() {
        return result.hasAccelerometer();
      }
      public com.cellbots.CellbotProtos.PhoneState.Accelerometer getAccelerometer() {
        return result.getAccelerometer();
      }
      public Builder setAccelerometer(com.cellbots.CellbotProtos.PhoneState.Accelerometer value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasAccelerometer = true;
        result.accelerometer_ = value;
        return this;
      }
      public Builder setAccelerometer(com.cellbots.CellbotProtos.PhoneState.Accelerometer.Builder builderForValue) {
        result.hasAccelerometer = true;
        result.accelerometer_ = builderForValue.build();
        return this;
      }
      public Builder mergeAccelerometer(com.cellbots.CellbotProtos.PhoneState.Accelerometer value) {
        if (result.hasAccelerometer() &&
            result.accelerometer_ != com.cellbots.CellbotProtos.PhoneState.Accelerometer.getDefaultInstance()) {
          result.accelerometer_ =
            com.cellbots.CellbotProtos.PhoneState.Accelerometer.newBuilder(result.accelerometer_).mergeFrom(value).buildPartial();
        } else {
          result.accelerometer_ = value;
        }
        result.hasAccelerometer = true;
        return this;
      }
      public Builder clearAccelerometer() {
        result.hasAccelerometer = false;
        result.accelerometer_ = com.cellbots.CellbotProtos.PhoneState.Accelerometer.getDefaultInstance();
        return this;
      }
      
      // optional .cellbots.PhoneState.Orientation orientation = 6;
      public boolean hasOrientation() {
        return result.hasOrientation();
      }
      public com.cellbots.CellbotProtos.PhoneState.Orientation getOrientation() {
        return result.getOrientation();
      }
      public Builder setOrientation(com.cellbots.CellbotProtos.PhoneState.Orientation value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasOrientation = true;
        result.orientation_ = value;
        return this;
      }
      public Builder setOrientation(com.cellbots.CellbotProtos.PhoneState.Orientation.Builder builderForValue) {
        result.hasOrientation = true;
        result.orientation_ = builderForValue.build();
        return this;
      }
      public Builder mergeOrientation(com.cellbots.CellbotProtos.PhoneState.Orientation value) {
        if (result.hasOrientation() &&
            result.orientation_ != com.cellbots.CellbotProtos.PhoneState.Orientation.getDefaultInstance()) {
          result.orientation_ =
            com.cellbots.CellbotProtos.PhoneState.Orientation.newBuilder(result.orientation_).mergeFrom(value).buildPartial();
        } else {
          result.orientation_ = value;
        }
        result.hasOrientation = true;
        return this;
      }
      public Builder clearOrientation() {
        result.hasOrientation = false;
        result.orientation_ = com.cellbots.CellbotProtos.PhoneState.Orientation.getDefaultInstance();
        return this;
      }
      
      // optional float phoneBatteryLevel = 7;
      public boolean hasPhoneBatteryLevel() {
        return result.hasPhoneBatteryLevel();
      }
      public float getPhoneBatteryLevel() {
        return result.getPhoneBatteryLevel();
      }
      public Builder setPhoneBatteryLevel(float value) {
        result.hasPhoneBatteryLevel = true;
        result.phoneBatteryLevel_ = value;
        return this;
      }
      public Builder clearPhoneBatteryLevel() {
        result.hasPhoneBatteryLevel = false;
        result.phoneBatteryLevel_ = 0F;
        return this;
      }
      
      // optional int32 phoneBatteryTemp = 8;
      public boolean hasPhoneBatteryTemp() {
        return result.hasPhoneBatteryTemp();
      }
      public int getPhoneBatteryTemp() {
        return result.getPhoneBatteryTemp();
      }
      public Builder setPhoneBatteryTemp(int value) {
        result.hasPhoneBatteryTemp = true;
        result.phoneBatteryTemp_ = value;
        return this;
      }
      public Builder clearPhoneBatteryTemp() {
        result.hasPhoneBatteryTemp = false;
        result.phoneBatteryTemp_ = 0;
        return this;
      }
      
      // optional float lightLevel = 9;
      public boolean hasLightLevel() {
        return result.hasLightLevel();
      }
      public float getLightLevel() {
        return result.getLightLevel();
      }
      public Builder setLightLevel(float value) {
        result.hasLightLevel = true;
        result.lightLevel_ = value;
        return this;
      }
      public Builder clearLightLevel() {
        result.hasLightLevel = false;
        result.lightLevel_ = 0F;
        return this;
      }
      
      // optional bool vibrating = 10;
      public boolean hasVibrating() {
        return result.hasVibrating();
      }
      public boolean getVibrating() {
        return result.getVibrating();
      }
      public Builder setVibrating(boolean value) {
        result.hasVibrating = true;
        result.vibrating_ = value;
        return this;
      }
      public Builder clearVibrating() {
        result.hasVibrating = false;
        result.vibrating_ = false;
        return this;
      }
      
      // optional bool notificationLightOn = 11;
      public boolean hasNotificationLightOn() {
        return result.hasNotificationLightOn();
      }
      public boolean getNotificationLightOn() {
        return result.getNotificationLightOn();
      }
      public Builder setNotificationLightOn(boolean value) {
        result.hasNotificationLightOn = true;
        result.notificationLightOn_ = value;
        return this;
      }
      public Builder clearNotificationLightOn() {
        result.hasNotificationLightOn = false;
        result.notificationLightOn_ = false;
        return this;
      }
      
      // optional int32 notificationLightFreq = 12;
      public boolean hasNotificationLightFreq() {
        return result.hasNotificationLightFreq();
      }
      public int getNotificationLightFreq() {
        return result.getNotificationLightFreq();
      }
      public Builder setNotificationLightFreq(int value) {
        result.hasNotificationLightFreq = true;
        result.notificationLightFreq_ = value;
        return this;
      }
      public Builder clearNotificationLightFreq() {
        result.hasNotificationLightFreq = false;
        result.notificationLightFreq_ = 0;
        return this;
      }
      
      // optional int32 notificationLightColor = 13;
      public boolean hasNotificationLightColor() {
        return result.hasNotificationLightColor();
      }
      public int getNotificationLightColor() {
        return result.getNotificationLightColor();
      }
      public Builder setNotificationLightColor(int value) {
        result.hasNotificationLightColor = true;
        result.notificationLightColor_ = value;
        return this;
      }
      public Builder clearNotificationLightColor() {
        result.hasNotificationLightColor = false;
        result.notificationLightColor_ = 0;
        return this;
      }
      
      // optional int32 proximity = 14;
      public boolean hasProximity() {
        return result.hasProximity();
      }
      public int getProximity() {
        return result.getProximity();
      }
      public Builder setProximity(int value) {
        result.hasProximity = true;
        result.proximity_ = value;
        return this;
      }
      public Builder clearProximity() {
        result.hasProximity = false;
        result.proximity_ = 0;
        return this;
      }
      
      // optional int32 screenBrightness = 15;
      public boolean hasScreenBrightness() {
        return result.hasScreenBrightness();
      }
      public int getScreenBrightness() {
        return result.getScreenBrightness();
      }
      public Builder setScreenBrightness(int value) {
        result.hasScreenBrightness = true;
        result.screenBrightness_ = value;
        return this;
      }
      public Builder clearScreenBrightness() {
        result.hasScreenBrightness = false;
        result.screenBrightness_ = 0;
        return this;
      }
      
      // optional .cellbots.PhoneState.WIFI wifi = 16;
      public boolean hasWifi() {
        return result.hasWifi();
      }
      public com.cellbots.CellbotProtos.PhoneState.WIFI getWifi() {
        return result.getWifi();
      }
      public Builder setWifi(com.cellbots.CellbotProtos.PhoneState.WIFI value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasWifi = true;
        result.wifi_ = value;
        return this;
      }
      public Builder setWifi(com.cellbots.CellbotProtos.PhoneState.WIFI.Builder builderForValue) {
        result.hasWifi = true;
        result.wifi_ = builderForValue.build();
        return this;
      }
      public Builder mergeWifi(com.cellbots.CellbotProtos.PhoneState.WIFI value) {
        if (result.hasWifi() &&
            result.wifi_ != com.cellbots.CellbotProtos.PhoneState.WIFI.getDefaultInstance()) {
          result.wifi_ =
            com.cellbots.CellbotProtos.PhoneState.WIFI.newBuilder(result.wifi_).mergeFrom(value).buildPartial();
        } else {
          result.wifi_ = value;
        }
        result.hasWifi = true;
        return this;
      }
      public Builder clearWifi() {
        result.hasWifi = false;
        result.wifi_ = com.cellbots.CellbotProtos.PhoneState.WIFI.getDefaultInstance();
        return this;
      }
      
      // optional .cellbots.PhoneState.Cellular cellular = 17;
      public boolean hasCellular() {
        return result.hasCellular();
      }
      public com.cellbots.CellbotProtos.PhoneState.Cellular getCellular() {
        return result.getCellular();
      }
      public Builder setCellular(com.cellbots.CellbotProtos.PhoneState.Cellular value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCellular = true;
        result.cellular_ = value;
        return this;
      }
      public Builder setCellular(com.cellbots.CellbotProtos.PhoneState.Cellular.Builder builderForValue) {
        result.hasCellular = true;
        result.cellular_ = builderForValue.build();
        return this;
      }
      public Builder mergeCellular(com.cellbots.CellbotProtos.PhoneState.Cellular value) {
        if (result.hasCellular() &&
            result.cellular_ != com.cellbots.CellbotProtos.PhoneState.Cellular.getDefaultInstance()) {
          result.cellular_ =
            com.cellbots.CellbotProtos.PhoneState.Cellular.newBuilder(result.cellular_).mergeFrom(value).buildPartial();
        } else {
          result.cellular_ = value;
        }
        result.hasCellular = true;
        return this;
      }
      public Builder clearCellular() {
        result.hasCellular = false;
        result.cellular_ = com.cellbots.CellbotProtos.PhoneState.Cellular.getDefaultInstance();
        return this;
      }
      
      // optional .cellbots.PhoneState.Location location = 18;
      public boolean hasLocation() {
        return result.hasLocation();
      }
      public com.cellbots.CellbotProtos.PhoneState.Location getLocation() {
        return result.getLocation();
      }
      public Builder setLocation(com.cellbots.CellbotProtos.PhoneState.Location value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasLocation = true;
        result.location_ = value;
        return this;
      }
      public Builder setLocation(com.cellbots.CellbotProtos.PhoneState.Location.Builder builderForValue) {
        result.hasLocation = true;
        result.location_ = builderForValue.build();
        return this;
      }
      public Builder mergeLocation(com.cellbots.CellbotProtos.PhoneState.Location value) {
        if (result.hasLocation() &&
            result.location_ != com.cellbots.CellbotProtos.PhoneState.Location.getDefaultInstance()) {
          result.location_ =
            com.cellbots.CellbotProtos.PhoneState.Location.newBuilder(result.location_).mergeFrom(value).buildPartial();
        } else {
          result.location_ = value;
        }
        result.hasLocation = true;
        return this;
      }
      public Builder clearLocation() {
        result.hasLocation = false;
        result.location_ = com.cellbots.CellbotProtos.PhoneState.Location.getDefaultInstance();
        return this;
      }
      
      // optional bool gpsEnabled = 19;
      public boolean hasGpsEnabled() {
        return result.hasGpsEnabled();
      }
      public boolean getGpsEnabled() {
        return result.getGpsEnabled();
      }
      public Builder setGpsEnabled(boolean value) {
        result.hasGpsEnabled = true;
        result.gpsEnabled_ = value;
        return this;
      }
      public Builder clearGpsEnabled() {
        result.hasGpsEnabled = false;
        result.gpsEnabled_ = false;
        return this;
      }
      
      // optional .cellbots.HALConnection HALConnection = 20;
      public boolean hasHALConnection() {
        return result.hasHALConnection();
      }
      public com.cellbots.CellbotProtos.HALConnection getHALConnection() {
        return result.getHALConnection();
      }
      public Builder setHALConnection(com.cellbots.CellbotProtos.HALConnection value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasHALConnection = true;
        result.hALConnection_ = value;
        return this;
      }
      public Builder setHALConnection(com.cellbots.CellbotProtos.HALConnection.Builder builderForValue) {
        result.hasHALConnection = true;
        result.hALConnection_ = builderForValue.build();
        return this;
      }
      public Builder mergeHALConnection(com.cellbots.CellbotProtos.HALConnection value) {
        if (result.hasHALConnection() &&
            result.hALConnection_ != com.cellbots.CellbotProtos.HALConnection.getDefaultInstance()) {
          result.hALConnection_ =
            com.cellbots.CellbotProtos.HALConnection.newBuilder(result.hALConnection_).mergeFrom(value).buildPartial();
        } else {
          result.hALConnection_ = value;
        }
        result.hasHALConnection = true;
        return this;
      }
      public Builder clearHALConnection() {
        result.hasHALConnection = false;
        result.hALConnection_ = com.cellbots.CellbotProtos.HALConnection.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:cellbots.PhoneState)
    }
    
    static {
      defaultInstance = new PhoneState(true);
      com.cellbots.CellbotProtos.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:cellbots.PhoneState)
  }
  
  public static final class ControllerState extends
      com.google.protobuf.GeneratedMessage {
    // Use ControllerState.newBuilder() to construct.
    private ControllerState() {
      initFields();
    }
    private ControllerState(boolean noInit) {}
    
    private static final ControllerState defaultInstance;
    public static ControllerState getDefaultInstance() {
      return defaultInstance;
    }
    
    public ControllerState getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cellbots.CellbotProtos.internal_static_cellbots_ControllerState_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cellbots.CellbotProtos.internal_static_cellbots_ControllerState_fieldAccessorTable;
    }
    
    public static final class KeyEvent extends
        com.google.protobuf.GeneratedMessage {
      // Use KeyEvent.newBuilder() to construct.
      private KeyEvent() {
        initFields();
      }
      private KeyEvent(boolean noInit) {}
      
      private static final KeyEvent defaultInstance;
      public static KeyEvent getDefaultInstance() {
        return defaultInstance;
      }
      
      public KeyEvent getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_ControllerState_KeyEvent_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_ControllerState_KeyEvent_fieldAccessorTable;
      }
      
      // required string keyCode = 1;
      public static final int KEYCODE_FIELD_NUMBER = 1;
      private boolean hasKeyCode;
      private java.lang.String keyCode_ = "";
      public boolean hasKeyCode() { return hasKeyCode; }
      public java.lang.String getKeyCode() { return keyCode_; }
      
      // optional bool keyDown = 2;
      public static final int KEYDOWN_FIELD_NUMBER = 2;
      private boolean hasKeyDown;
      private boolean keyDown_ = false;
      public boolean hasKeyDown() { return hasKeyDown; }
      public boolean getKeyDown() { return keyDown_; }
      
      // optional bool keyUp = 3;
      public static final int KEYUP_FIELD_NUMBER = 3;
      private boolean hasKeyUp;
      private boolean keyUp_ = false;
      public boolean hasKeyUp() { return hasKeyUp; }
      public boolean getKeyUp() { return keyUp_; }
      
      // optional float keyPressure = 4;
      public static final int KEYPRESSURE_FIELD_NUMBER = 4;
      private boolean hasKeyPressure;
      private float keyPressure_ = 0F;
      public boolean hasKeyPressure() { return hasKeyPressure; }
      public float getKeyPressure() { return keyPressure_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        if (!hasKeyCode) return false;
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasKeyCode()) {
          output.writeString(1, getKeyCode());
        }
        if (hasKeyDown()) {
          output.writeBool(2, getKeyDown());
        }
        if (hasKeyUp()) {
          output.writeBool(3, getKeyUp());
        }
        if (hasKeyPressure()) {
          output.writeFloat(4, getKeyPressure());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasKeyCode()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(1, getKeyCode());
        }
        if (hasKeyDown()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(2, getKeyDown());
        }
        if (hasKeyUp()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(3, getKeyUp());
        }
        if (hasKeyPressure()) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(4, getKeyPressure());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static com.cellbots.CellbotProtos.ControllerState.KeyEvent parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.ControllerState.KeyEvent parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.ControllerState.KeyEvent parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.ControllerState.KeyEvent parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.ControllerState.KeyEvent parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.ControllerState.KeyEvent parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.ControllerState.KeyEvent parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.ControllerState.KeyEvent parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.ControllerState.KeyEvent parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.ControllerState.KeyEvent parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.cellbots.CellbotProtos.ControllerState.KeyEvent prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private com.cellbots.CellbotProtos.ControllerState.KeyEvent result;
        
        // Construct using com.cellbots.CellbotProtos.ControllerState.KeyEvent.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new com.cellbots.CellbotProtos.ControllerState.KeyEvent();
          return builder;
        }
        
        protected com.cellbots.CellbotProtos.ControllerState.KeyEvent internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new com.cellbots.CellbotProtos.ControllerState.KeyEvent();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.cellbots.CellbotProtos.ControllerState.KeyEvent.getDescriptor();
        }
        
        public com.cellbots.CellbotProtos.ControllerState.KeyEvent getDefaultInstanceForType() {
          return com.cellbots.CellbotProtos.ControllerState.KeyEvent.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public com.cellbots.CellbotProtos.ControllerState.KeyEvent build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private com.cellbots.CellbotProtos.ControllerState.KeyEvent buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public com.cellbots.CellbotProtos.ControllerState.KeyEvent buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          com.cellbots.CellbotProtos.ControllerState.KeyEvent returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.cellbots.CellbotProtos.ControllerState.KeyEvent) {
            return mergeFrom((com.cellbots.CellbotProtos.ControllerState.KeyEvent)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(com.cellbots.CellbotProtos.ControllerState.KeyEvent other) {
          if (other == com.cellbots.CellbotProtos.ControllerState.KeyEvent.getDefaultInstance()) return this;
          if (other.hasKeyCode()) {
            setKeyCode(other.getKeyCode());
          }
          if (other.hasKeyDown()) {
            setKeyDown(other.getKeyDown());
          }
          if (other.hasKeyUp()) {
            setKeyUp(other.getKeyUp());
          }
          if (other.hasKeyPressure()) {
            setKeyPressure(other.getKeyPressure());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 10: {
                setKeyCode(input.readString());
                break;
              }
              case 16: {
                setKeyDown(input.readBool());
                break;
              }
              case 24: {
                setKeyUp(input.readBool());
                break;
              }
              case 37: {
                setKeyPressure(input.readFloat());
                break;
              }
            }
          }
        }
        
        
        // required string keyCode = 1;
        public boolean hasKeyCode() {
          return result.hasKeyCode();
        }
        public java.lang.String getKeyCode() {
          return result.getKeyCode();
        }
        public Builder setKeyCode(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasKeyCode = true;
          result.keyCode_ = value;
          return this;
        }
        public Builder clearKeyCode() {
          result.hasKeyCode = false;
          result.keyCode_ = getDefaultInstance().getKeyCode();
          return this;
        }
        
        // optional bool keyDown = 2;
        public boolean hasKeyDown() {
          return result.hasKeyDown();
        }
        public boolean getKeyDown() {
          return result.getKeyDown();
        }
        public Builder setKeyDown(boolean value) {
          result.hasKeyDown = true;
          result.keyDown_ = value;
          return this;
        }
        public Builder clearKeyDown() {
          result.hasKeyDown = false;
          result.keyDown_ = false;
          return this;
        }
        
        // optional bool keyUp = 3;
        public boolean hasKeyUp() {
          return result.hasKeyUp();
        }
        public boolean getKeyUp() {
          return result.getKeyUp();
        }
        public Builder setKeyUp(boolean value) {
          result.hasKeyUp = true;
          result.keyUp_ = value;
          return this;
        }
        public Builder clearKeyUp() {
          result.hasKeyUp = false;
          result.keyUp_ = false;
          return this;
        }
        
        // optional float keyPressure = 4;
        public boolean hasKeyPressure() {
          return result.hasKeyPressure();
        }
        public float getKeyPressure() {
          return result.getKeyPressure();
        }
        public Builder setKeyPressure(float value) {
          result.hasKeyPressure = true;
          result.keyPressure_ = value;
          return this;
        }
        public Builder clearKeyPressure() {
          result.hasKeyPressure = false;
          result.keyPressure_ = 0F;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:cellbots.ControllerState.KeyEvent)
      }
      
      static {
        defaultInstance = new KeyEvent(true);
        com.cellbots.CellbotProtos.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:cellbots.ControllerState.KeyEvent)
    }
    
    public static final class StickEvent extends
        com.google.protobuf.GeneratedMessage {
      // Use StickEvent.newBuilder() to construct.
      private StickEvent() {
        initFields();
      }
      private StickEvent(boolean noInit) {}
      
      private static final StickEvent defaultInstance;
      public static StickEvent getDefaultInstance() {
        return defaultInstance;
      }
      
      public StickEvent getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_ControllerState_StickEvent_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_ControllerState_StickEvent_fieldAccessorTable;
      }
      
      public enum StickType
          implements com.google.protobuf.ProtocolMessageEnum {
        ANALOG(0, 1),
        ORIENTATION(1, 2),
        LINEAR_ACCEL(2, 3),
        ANGULAR_ACCEL(3, 4),
        SLIDER(4, 5),
        WHEEL(5, 6),
        MOUSE(6, 7),
        ;
        
        
        public final int getNumber() { return value; }
        
        public static StickType valueOf(int value) {
          switch (value) {
            case 1: return ANALOG;
            case 2: return ORIENTATION;
            case 3: return LINEAR_ACCEL;
            case 4: return ANGULAR_ACCEL;
            case 5: return SLIDER;
            case 6: return WHEEL;
            case 7: return MOUSE;
            default: return null;
          }
        }
        
        public static com.google.protobuf.Internal.EnumLiteMap<StickType>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static com.google.protobuf.Internal.EnumLiteMap<StickType>
            internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<StickType>() {
                public StickType findValueByNumber(int number) {
                  return StickType.valueOf(number)
        ;        }
              };
        
        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(index);
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.cellbots.CellbotProtos.ControllerState.StickEvent.getDescriptor().getEnumTypes().get(0);
        }
        
        private static final StickType[] VALUES = {
          ANALOG, ORIENTATION, LINEAR_ACCEL, ANGULAR_ACCEL, SLIDER, WHEEL, MOUSE, 
        };
        public static StickType valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }
        private final int index;
        private final int value;
        private StickType(int index, int value) {
          this.index = index;
          this.value = value;
        }
        
        static {
          com.cellbots.CellbotProtos.getDescriptor();
        }
        
        // @@protoc_insertion_point(enum_scope:cellbots.ControllerState.StickEvent.StickType)
      }
      
      // required .cellbots.ControllerState.StickEvent.StickType stickType = 1;
      public static final int STICKTYPE_FIELD_NUMBER = 1;
      private boolean hasStickType;
      private com.cellbots.CellbotProtos.ControllerState.StickEvent.StickType stickType_;
      public boolean hasStickType() { return hasStickType; }
      public com.cellbots.CellbotProtos.ControllerState.StickEvent.StickType getStickType() { return stickType_; }
      
      // required int32 stickNumber = 2;
      public static final int STICKNUMBER_FIELD_NUMBER = 2;
      private boolean hasStickNumber;
      private int stickNumber_ = 0;
      public boolean hasStickNumber() { return hasStickNumber; }
      public int getStickNumber() { return stickNumber_; }
      
      // optional float x = 3;
      public static final int X_FIELD_NUMBER = 3;
      private boolean hasX;
      private float x_ = 0F;
      public boolean hasX() { return hasX; }
      public float getX() { return x_; }
      
      // optional float y = 4;
      public static final int Y_FIELD_NUMBER = 4;
      private boolean hasY;
      private float y_ = 0F;
      public boolean hasY() { return hasY; }
      public float getY() { return y_; }
      
      // optional float z = 5;
      public static final int Z_FIELD_NUMBER = 5;
      private boolean hasZ;
      private float z_ = 0F;
      public boolean hasZ() { return hasZ; }
      public float getZ() { return z_; }
      
      private void initFields() {
        stickType_ = com.cellbots.CellbotProtos.ControllerState.StickEvent.StickType.ANALOG;
      }
      public final boolean isInitialized() {
        if (!hasStickType) return false;
        if (!hasStickNumber) return false;
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasStickType()) {
          output.writeEnum(1, getStickType().getNumber());
        }
        if (hasStickNumber()) {
          output.writeInt32(2, getStickNumber());
        }
        if (hasX()) {
          output.writeFloat(3, getX());
        }
        if (hasY()) {
          output.writeFloat(4, getY());
        }
        if (hasZ()) {
          output.writeFloat(5, getZ());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasStickType()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, getStickType().getNumber());
        }
        if (hasStickNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, getStickNumber());
        }
        if (hasX()) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(3, getX());
        }
        if (hasY()) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(4, getY());
        }
        if (hasZ()) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(5, getZ());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static com.cellbots.CellbotProtos.ControllerState.StickEvent parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.ControllerState.StickEvent parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.ControllerState.StickEvent parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.ControllerState.StickEvent parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.ControllerState.StickEvent parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.ControllerState.StickEvent parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.ControllerState.StickEvent parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.ControllerState.StickEvent parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.ControllerState.StickEvent parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.ControllerState.StickEvent parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.cellbots.CellbotProtos.ControllerState.StickEvent prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private com.cellbots.CellbotProtos.ControllerState.StickEvent result;
        
        // Construct using com.cellbots.CellbotProtos.ControllerState.StickEvent.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new com.cellbots.CellbotProtos.ControllerState.StickEvent();
          return builder;
        }
        
        protected com.cellbots.CellbotProtos.ControllerState.StickEvent internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new com.cellbots.CellbotProtos.ControllerState.StickEvent();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.cellbots.CellbotProtos.ControllerState.StickEvent.getDescriptor();
        }
        
        public com.cellbots.CellbotProtos.ControllerState.StickEvent getDefaultInstanceForType() {
          return com.cellbots.CellbotProtos.ControllerState.StickEvent.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public com.cellbots.CellbotProtos.ControllerState.StickEvent build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private com.cellbots.CellbotProtos.ControllerState.StickEvent buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public com.cellbots.CellbotProtos.ControllerState.StickEvent buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          com.cellbots.CellbotProtos.ControllerState.StickEvent returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.cellbots.CellbotProtos.ControllerState.StickEvent) {
            return mergeFrom((com.cellbots.CellbotProtos.ControllerState.StickEvent)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(com.cellbots.CellbotProtos.ControllerState.StickEvent other) {
          if (other == com.cellbots.CellbotProtos.ControllerState.StickEvent.getDefaultInstance()) return this;
          if (other.hasStickType()) {
            setStickType(other.getStickType());
          }
          if (other.hasStickNumber()) {
            setStickNumber(other.getStickNumber());
          }
          if (other.hasX()) {
            setX(other.getX());
          }
          if (other.hasY()) {
            setY(other.getY());
          }
          if (other.hasZ()) {
            setZ(other.getZ());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                com.cellbots.CellbotProtos.ControllerState.StickEvent.StickType value = com.cellbots.CellbotProtos.ControllerState.StickEvent.StickType.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1, rawValue);
                } else {
                  setStickType(value);
                }
                break;
              }
              case 16: {
                setStickNumber(input.readInt32());
                break;
              }
              case 29: {
                setX(input.readFloat());
                break;
              }
              case 37: {
                setY(input.readFloat());
                break;
              }
              case 45: {
                setZ(input.readFloat());
                break;
              }
            }
          }
        }
        
        
        // required .cellbots.ControllerState.StickEvent.StickType stickType = 1;
        public boolean hasStickType() {
          return result.hasStickType();
        }
        public com.cellbots.CellbotProtos.ControllerState.StickEvent.StickType getStickType() {
          return result.getStickType();
        }
        public Builder setStickType(com.cellbots.CellbotProtos.ControllerState.StickEvent.StickType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          result.hasStickType = true;
          result.stickType_ = value;
          return this;
        }
        public Builder clearStickType() {
          result.hasStickType = false;
          result.stickType_ = com.cellbots.CellbotProtos.ControllerState.StickEvent.StickType.ANALOG;
          return this;
        }
        
        // required int32 stickNumber = 2;
        public boolean hasStickNumber() {
          return result.hasStickNumber();
        }
        public int getStickNumber() {
          return result.getStickNumber();
        }
        public Builder setStickNumber(int value) {
          result.hasStickNumber = true;
          result.stickNumber_ = value;
          return this;
        }
        public Builder clearStickNumber() {
          result.hasStickNumber = false;
          result.stickNumber_ = 0;
          return this;
        }
        
        // optional float x = 3;
        public boolean hasX() {
          return result.hasX();
        }
        public float getX() {
          return result.getX();
        }
        public Builder setX(float value) {
          result.hasX = true;
          result.x_ = value;
          return this;
        }
        public Builder clearX() {
          result.hasX = false;
          result.x_ = 0F;
          return this;
        }
        
        // optional float y = 4;
        public boolean hasY() {
          return result.hasY();
        }
        public float getY() {
          return result.getY();
        }
        public Builder setY(float value) {
          result.hasY = true;
          result.y_ = value;
          return this;
        }
        public Builder clearY() {
          result.hasY = false;
          result.y_ = 0F;
          return this;
        }
        
        // optional float z = 5;
        public boolean hasZ() {
          return result.hasZ();
        }
        public float getZ() {
          return result.getZ();
        }
        public Builder setZ(float value) {
          result.hasZ = true;
          result.z_ = value;
          return this;
        }
        public Builder clearZ() {
          result.hasZ = false;
          result.z_ = 0F;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:cellbots.ControllerState.StickEvent)
      }
      
      static {
        defaultInstance = new StickEvent(true);
        com.cellbots.CellbotProtos.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:cellbots.ControllerState.StickEvent)
    }
    
    // required int64 timestamp = 1;
    public static final int TIMESTAMP_FIELD_NUMBER = 1;
    private boolean hasTimestamp;
    private long timestamp_ = 0L;
    public boolean hasTimestamp() { return hasTimestamp; }
    public long getTimestamp() { return timestamp_; }
    
    // repeated .cellbots.ControllerState.KeyEvent keyEvent = 2;
    public static final int KEYEVENT_FIELD_NUMBER = 2;
    private java.util.List<com.cellbots.CellbotProtos.ControllerState.KeyEvent> keyEvent_ =
      java.util.Collections.emptyList();
    public java.util.List<com.cellbots.CellbotProtos.ControllerState.KeyEvent> getKeyEventList() {
      return keyEvent_;
    }
    public int getKeyEventCount() { return keyEvent_.size(); }
    public com.cellbots.CellbotProtos.ControllerState.KeyEvent getKeyEvent(int index) {
      return keyEvent_.get(index);
    }
    
    // repeated .cellbots.ControllerState.StickEvent stickEvent = 3;
    public static final int STICKEVENT_FIELD_NUMBER = 3;
    private java.util.List<com.cellbots.CellbotProtos.ControllerState.StickEvent> stickEvent_ =
      java.util.Collections.emptyList();
    public java.util.List<com.cellbots.CellbotProtos.ControllerState.StickEvent> getStickEventList() {
      return stickEvent_;
    }
    public int getStickEventCount() { return stickEvent_.size(); }
    public com.cellbots.CellbotProtos.ControllerState.StickEvent getStickEvent(int index) {
      return stickEvent_.get(index);
    }
    
    // optional string txtCommand = 4;
    public static final int TXTCOMMAND_FIELD_NUMBER = 4;
    private boolean hasTxtCommand;
    private java.lang.String txtCommand_ = "";
    public boolean hasTxtCommand() { return hasTxtCommand; }
    public java.lang.String getTxtCommand() { return txtCommand_; }
    
    // optional string controllerID = 5;
    public static final int CONTROLLERID_FIELD_NUMBER = 5;
    private boolean hasControllerID;
    private java.lang.String controllerID_ = "";
    public boolean hasControllerID() { return hasControllerID; }
    public java.lang.String getControllerID() { return controllerID_; }
    
    // optional string botID = 16;
    public static final int BOTID_FIELD_NUMBER = 16;
    private boolean hasBotID;
    private java.lang.String botID_ = "";
    public boolean hasBotID() { return hasBotID; }
    public java.lang.String getBotID() { return botID_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasTimestamp) return false;
      for (com.cellbots.CellbotProtos.ControllerState.KeyEvent element : getKeyEventList()) {
        if (!element.isInitialized()) return false;
      }
      for (com.cellbots.CellbotProtos.ControllerState.StickEvent element : getStickEventList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasTimestamp()) {
        output.writeInt64(1, getTimestamp());
      }
      for (com.cellbots.CellbotProtos.ControllerState.KeyEvent element : getKeyEventList()) {
        output.writeMessage(2, element);
      }
      for (com.cellbots.CellbotProtos.ControllerState.StickEvent element : getStickEventList()) {
        output.writeMessage(3, element);
      }
      if (hasTxtCommand()) {
        output.writeString(4, getTxtCommand());
      }
      if (hasControllerID()) {
        output.writeString(5, getControllerID());
      }
      if (hasBotID()) {
        output.writeString(16, getBotID());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTimestamp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, getTimestamp());
      }
      for (com.cellbots.CellbotProtos.ControllerState.KeyEvent element : getKeyEventList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      for (com.cellbots.CellbotProtos.ControllerState.StickEvent element : getStickEventList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, element);
      }
      if (hasTxtCommand()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getTxtCommand());
      }
      if (hasControllerID()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getControllerID());
      }
      if (hasBotID()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(16, getBotID());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.cellbots.CellbotProtos.ControllerState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.cellbots.CellbotProtos.ControllerState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.cellbots.CellbotProtos.ControllerState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.cellbots.CellbotProtos.ControllerState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.cellbots.CellbotProtos.ControllerState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.cellbots.CellbotProtos.ControllerState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.cellbots.CellbotProtos.ControllerState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.cellbots.CellbotProtos.ControllerState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.cellbots.CellbotProtos.ControllerState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.cellbots.CellbotProtos.ControllerState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.cellbots.CellbotProtos.ControllerState prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.cellbots.CellbotProtos.ControllerState result;
      
      // Construct using com.cellbots.CellbotProtos.ControllerState.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.cellbots.CellbotProtos.ControllerState();
        return builder;
      }
      
      protected com.cellbots.CellbotProtos.ControllerState internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.cellbots.CellbotProtos.ControllerState();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cellbots.CellbotProtos.ControllerState.getDescriptor();
      }
      
      public com.cellbots.CellbotProtos.ControllerState getDefaultInstanceForType() {
        return com.cellbots.CellbotProtos.ControllerState.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.cellbots.CellbotProtos.ControllerState build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.cellbots.CellbotProtos.ControllerState buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.cellbots.CellbotProtos.ControllerState buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.keyEvent_ != java.util.Collections.EMPTY_LIST) {
          result.keyEvent_ =
            java.util.Collections.unmodifiableList(result.keyEvent_);
        }
        if (result.stickEvent_ != java.util.Collections.EMPTY_LIST) {
          result.stickEvent_ =
            java.util.Collections.unmodifiableList(result.stickEvent_);
        }
        com.cellbots.CellbotProtos.ControllerState returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cellbots.CellbotProtos.ControllerState) {
          return mergeFrom((com.cellbots.CellbotProtos.ControllerState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.cellbots.CellbotProtos.ControllerState other) {
        if (other == com.cellbots.CellbotProtos.ControllerState.getDefaultInstance()) return this;
        if (other.hasTimestamp()) {
          setTimestamp(other.getTimestamp());
        }
        if (!other.keyEvent_.isEmpty()) {
          if (result.keyEvent_.isEmpty()) {
            result.keyEvent_ = new java.util.ArrayList<com.cellbots.CellbotProtos.ControllerState.KeyEvent>();
          }
          result.keyEvent_.addAll(other.keyEvent_);
        }
        if (!other.stickEvent_.isEmpty()) {
          if (result.stickEvent_.isEmpty()) {
            result.stickEvent_ = new java.util.ArrayList<com.cellbots.CellbotProtos.ControllerState.StickEvent>();
          }
          result.stickEvent_.addAll(other.stickEvent_);
        }
        if (other.hasTxtCommand()) {
          setTxtCommand(other.getTxtCommand());
        }
        if (other.hasControllerID()) {
          setControllerID(other.getControllerID());
        }
        if (other.hasBotID()) {
          setBotID(other.getBotID());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setTimestamp(input.readInt64());
              break;
            }
            case 18: {
              com.cellbots.CellbotProtos.ControllerState.KeyEvent.Builder subBuilder = com.cellbots.CellbotProtos.ControllerState.KeyEvent.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addKeyEvent(subBuilder.buildPartial());
              break;
            }
            case 26: {
              com.cellbots.CellbotProtos.ControllerState.StickEvent.Builder subBuilder = com.cellbots.CellbotProtos.ControllerState.StickEvent.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addStickEvent(subBuilder.buildPartial());
              break;
            }
            case 34: {
              setTxtCommand(input.readString());
              break;
            }
            case 42: {
              setControllerID(input.readString());
              break;
            }
            case 130: {
              setBotID(input.readString());
              break;
            }
          }
        }
      }
      
      
      // required int64 timestamp = 1;
      public boolean hasTimestamp() {
        return result.hasTimestamp();
      }
      public long getTimestamp() {
        return result.getTimestamp();
      }
      public Builder setTimestamp(long value) {
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder clearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
      
      // repeated .cellbots.ControllerState.KeyEvent keyEvent = 2;
      public java.util.List<com.cellbots.CellbotProtos.ControllerState.KeyEvent> getKeyEventList() {
        return java.util.Collections.unmodifiableList(result.keyEvent_);
      }
      public int getKeyEventCount() {
        return result.getKeyEventCount();
      }
      public com.cellbots.CellbotProtos.ControllerState.KeyEvent getKeyEvent(int index) {
        return result.getKeyEvent(index);
      }
      public Builder setKeyEvent(int index, com.cellbots.CellbotProtos.ControllerState.KeyEvent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.keyEvent_.set(index, value);
        return this;
      }
      public Builder setKeyEvent(int index, com.cellbots.CellbotProtos.ControllerState.KeyEvent.Builder builderForValue) {
        result.keyEvent_.set(index, builderForValue.build());
        return this;
      }
      public Builder addKeyEvent(com.cellbots.CellbotProtos.ControllerState.KeyEvent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.keyEvent_.isEmpty()) {
          result.keyEvent_ = new java.util.ArrayList<com.cellbots.CellbotProtos.ControllerState.KeyEvent>();
        }
        result.keyEvent_.add(value);
        return this;
      }
      public Builder addKeyEvent(com.cellbots.CellbotProtos.ControllerState.KeyEvent.Builder builderForValue) {
        if (result.keyEvent_.isEmpty()) {
          result.keyEvent_ = new java.util.ArrayList<com.cellbots.CellbotProtos.ControllerState.KeyEvent>();
        }
        result.keyEvent_.add(builderForValue.build());
        return this;
      }
      public Builder addAllKeyEvent(
          java.lang.Iterable<? extends com.cellbots.CellbotProtos.ControllerState.KeyEvent> values) {
        if (result.keyEvent_.isEmpty()) {
          result.keyEvent_ = new java.util.ArrayList<com.cellbots.CellbotProtos.ControllerState.KeyEvent>();
        }
        super.addAll(values, result.keyEvent_);
        return this;
      }
      public Builder clearKeyEvent() {
        result.keyEvent_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .cellbots.ControllerState.StickEvent stickEvent = 3;
      public java.util.List<com.cellbots.CellbotProtos.ControllerState.StickEvent> getStickEventList() {
        return java.util.Collections.unmodifiableList(result.stickEvent_);
      }
      public int getStickEventCount() {
        return result.getStickEventCount();
      }
      public com.cellbots.CellbotProtos.ControllerState.StickEvent getStickEvent(int index) {
        return result.getStickEvent(index);
      }
      public Builder setStickEvent(int index, com.cellbots.CellbotProtos.ControllerState.StickEvent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.stickEvent_.set(index, value);
        return this;
      }
      public Builder setStickEvent(int index, com.cellbots.CellbotProtos.ControllerState.StickEvent.Builder builderForValue) {
        result.stickEvent_.set(index, builderForValue.build());
        return this;
      }
      public Builder addStickEvent(com.cellbots.CellbotProtos.ControllerState.StickEvent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.stickEvent_.isEmpty()) {
          result.stickEvent_ = new java.util.ArrayList<com.cellbots.CellbotProtos.ControllerState.StickEvent>();
        }
        result.stickEvent_.add(value);
        return this;
      }
      public Builder addStickEvent(com.cellbots.CellbotProtos.ControllerState.StickEvent.Builder builderForValue) {
        if (result.stickEvent_.isEmpty()) {
          result.stickEvent_ = new java.util.ArrayList<com.cellbots.CellbotProtos.ControllerState.StickEvent>();
        }
        result.stickEvent_.add(builderForValue.build());
        return this;
      }
      public Builder addAllStickEvent(
          java.lang.Iterable<? extends com.cellbots.CellbotProtos.ControllerState.StickEvent> values) {
        if (result.stickEvent_.isEmpty()) {
          result.stickEvent_ = new java.util.ArrayList<com.cellbots.CellbotProtos.ControllerState.StickEvent>();
        }
        super.addAll(values, result.stickEvent_);
        return this;
      }
      public Builder clearStickEvent() {
        result.stickEvent_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional string txtCommand = 4;
      public boolean hasTxtCommand() {
        return result.hasTxtCommand();
      }
      public java.lang.String getTxtCommand() {
        return result.getTxtCommand();
      }
      public Builder setTxtCommand(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasTxtCommand = true;
        result.txtCommand_ = value;
        return this;
      }
      public Builder clearTxtCommand() {
        result.hasTxtCommand = false;
        result.txtCommand_ = getDefaultInstance().getTxtCommand();
        return this;
      }
      
      // optional string controllerID = 5;
      public boolean hasControllerID() {
        return result.hasControllerID();
      }
      public java.lang.String getControllerID() {
        return result.getControllerID();
      }
      public Builder setControllerID(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasControllerID = true;
        result.controllerID_ = value;
        return this;
      }
      public Builder clearControllerID() {
        result.hasControllerID = false;
        result.controllerID_ = getDefaultInstance().getControllerID();
        return this;
      }
      
      // optional string botID = 16;
      public boolean hasBotID() {
        return result.hasBotID();
      }
      public java.lang.String getBotID() {
        return result.getBotID();
      }
      public Builder setBotID(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasBotID = true;
        result.botID_ = value;
        return this;
      }
      public Builder clearBotID() {
        result.hasBotID = false;
        result.botID_ = getDefaultInstance().getBotID();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:cellbots.ControllerState)
    }
    
    static {
      defaultInstance = new ControllerState(true);
      com.cellbots.CellbotProtos.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:cellbots.ControllerState)
  }
  
  public static final class HALCommand extends
      com.google.protobuf.GeneratedMessage {
    // Use HALCommand.newBuilder() to construct.
    private HALCommand() {
      initFields();
    }
    private HALCommand(boolean noInit) {}
    
    private static final HALCommand defaultInstance;
    public static HALCommand getDefaultInstance() {
      return defaultInstance;
    }
    
    public HALCommand getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cellbots.CellbotProtos.internal_static_cellbots_HALCommand_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cellbots.CellbotProtos.internal_static_cellbots_HALCommand_fieldAccessorTable;
    }
    
    public static final class Servo extends
        com.google.protobuf.GeneratedMessage {
      // Use Servo.newBuilder() to construct.
      private Servo() {
        initFields();
      }
      private Servo(boolean noInit) {}
      
      private static final Servo defaultInstance;
      public static Servo getDefaultInstance() {
        return defaultInstance;
      }
      
      public Servo getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_HALCommand_Servo_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_HALCommand_Servo_fieldAccessorTable;
      }
      
      // required string ID = 1;
      public static final int ID_FIELD_NUMBER = 1;
      private boolean hasID;
      private java.lang.String iD_ = "";
      public boolean hasID() { return hasID; }
      public java.lang.String getID() { return iD_; }
      
      // optional int32 speed = 3;
      public static final int SPEED_FIELD_NUMBER = 3;
      private boolean hasSpeed;
      private int speed_ = 0;
      public boolean hasSpeed() { return hasSpeed; }
      public int getSpeed() { return speed_; }
      
      // optional int32 targetPosition = 4;
      public static final int TARGETPOSITION_FIELD_NUMBER = 4;
      private boolean hasTargetPosition;
      private int targetPosition_ = 0;
      public boolean hasTargetPosition() { return hasTargetPosition; }
      public int getTargetPosition() { return targetPosition_; }
      
      // optional int32 torque = 5;
      public static final int TORQUE_FIELD_NUMBER = 5;
      private boolean hasTorque;
      private int torque_ = 0;
      public boolean hasTorque() { return hasTorque; }
      public int getTorque() { return torque_; }
      
      // optional bool freeWheel = 6;
      public static final int FREEWHEEL_FIELD_NUMBER = 6;
      private boolean hasFreeWheel;
      private boolean freeWheel_ = false;
      public boolean hasFreeWheel() { return hasFreeWheel; }
      public boolean getFreeWheel() { return freeWheel_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        if (!hasID) return false;
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasID()) {
          output.writeString(1, getID());
        }
        if (hasSpeed()) {
          output.writeInt32(3, getSpeed());
        }
        if (hasTargetPosition()) {
          output.writeInt32(4, getTargetPosition());
        }
        if (hasTorque()) {
          output.writeInt32(5, getTorque());
        }
        if (hasFreeWheel()) {
          output.writeBool(6, getFreeWheel());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasID()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(1, getID());
        }
        if (hasSpeed()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, getSpeed());
        }
        if (hasTargetPosition()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(4, getTargetPosition());
        }
        if (hasTorque()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(5, getTorque());
        }
        if (hasFreeWheel()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(6, getFreeWheel());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static com.cellbots.CellbotProtos.HALCommand.Servo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Servo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Servo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Servo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Servo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Servo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Servo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.HALCommand.Servo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.HALCommand.Servo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Servo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.cellbots.CellbotProtos.HALCommand.Servo prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private com.cellbots.CellbotProtos.HALCommand.Servo result;
        
        // Construct using com.cellbots.CellbotProtos.HALCommand.Servo.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new com.cellbots.CellbotProtos.HALCommand.Servo();
          return builder;
        }
        
        protected com.cellbots.CellbotProtos.HALCommand.Servo internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new com.cellbots.CellbotProtos.HALCommand.Servo();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.cellbots.CellbotProtos.HALCommand.Servo.getDescriptor();
        }
        
        public com.cellbots.CellbotProtos.HALCommand.Servo getDefaultInstanceForType() {
          return com.cellbots.CellbotProtos.HALCommand.Servo.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public com.cellbots.CellbotProtos.HALCommand.Servo build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private com.cellbots.CellbotProtos.HALCommand.Servo buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public com.cellbots.CellbotProtos.HALCommand.Servo buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          com.cellbots.CellbotProtos.HALCommand.Servo returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.cellbots.CellbotProtos.HALCommand.Servo) {
            return mergeFrom((com.cellbots.CellbotProtos.HALCommand.Servo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(com.cellbots.CellbotProtos.HALCommand.Servo other) {
          if (other == com.cellbots.CellbotProtos.HALCommand.Servo.getDefaultInstance()) return this;
          if (other.hasID()) {
            setID(other.getID());
          }
          if (other.hasSpeed()) {
            setSpeed(other.getSpeed());
          }
          if (other.hasTargetPosition()) {
            setTargetPosition(other.getTargetPosition());
          }
          if (other.hasTorque()) {
            setTorque(other.getTorque());
          }
          if (other.hasFreeWheel()) {
            setFreeWheel(other.getFreeWheel());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 10: {
                setID(input.readString());
                break;
              }
              case 24: {
                setSpeed(input.readInt32());
                break;
              }
              case 32: {
                setTargetPosition(input.readInt32());
                break;
              }
              case 40: {
                setTorque(input.readInt32());
                break;
              }
              case 48: {
                setFreeWheel(input.readBool());
                break;
              }
            }
          }
        }
        
        
        // required string ID = 1;
        public boolean hasID() {
          return result.hasID();
        }
        public java.lang.String getID() {
          return result.getID();
        }
        public Builder setID(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasID = true;
          result.iD_ = value;
          return this;
        }
        public Builder clearID() {
          result.hasID = false;
          result.iD_ = getDefaultInstance().getID();
          return this;
        }
        
        // optional int32 speed = 3;
        public boolean hasSpeed() {
          return result.hasSpeed();
        }
        public int getSpeed() {
          return result.getSpeed();
        }
        public Builder setSpeed(int value) {
          result.hasSpeed = true;
          result.speed_ = value;
          return this;
        }
        public Builder clearSpeed() {
          result.hasSpeed = false;
          result.speed_ = 0;
          return this;
        }
        
        // optional int32 targetPosition = 4;
        public boolean hasTargetPosition() {
          return result.hasTargetPosition();
        }
        public int getTargetPosition() {
          return result.getTargetPosition();
        }
        public Builder setTargetPosition(int value) {
          result.hasTargetPosition = true;
          result.targetPosition_ = value;
          return this;
        }
        public Builder clearTargetPosition() {
          result.hasTargetPosition = false;
          result.targetPosition_ = 0;
          return this;
        }
        
        // optional int32 torque = 5;
        public boolean hasTorque() {
          return result.hasTorque();
        }
        public int getTorque() {
          return result.getTorque();
        }
        public Builder setTorque(int value) {
          result.hasTorque = true;
          result.torque_ = value;
          return this;
        }
        public Builder clearTorque() {
          result.hasTorque = false;
          result.torque_ = 0;
          return this;
        }
        
        // optional bool freeWheel = 6;
        public boolean hasFreeWheel() {
          return result.hasFreeWheel();
        }
        public boolean getFreeWheel() {
          return result.getFreeWheel();
        }
        public Builder setFreeWheel(boolean value) {
          result.hasFreeWheel = true;
          result.freeWheel_ = value;
          return this;
        }
        public Builder clearFreeWheel() {
          result.hasFreeWheel = false;
          result.freeWheel_ = false;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:cellbots.HALCommand.Servo)
      }
      
      static {
        defaultInstance = new Servo(true);
        com.cellbots.CellbotProtos.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:cellbots.HALCommand.Servo)
    }
    
    public static final class Motor extends
        com.google.protobuf.GeneratedMessage {
      // Use Motor.newBuilder() to construct.
      private Motor() {
        initFields();
      }
      private Motor(boolean noInit) {}
      
      private static final Motor defaultInstance;
      public static Motor getDefaultInstance() {
        return defaultInstance;
      }
      
      public Motor getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_HALCommand_Motor_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_HALCommand_Motor_fieldAccessorTable;
      }
      
      // required string ID = 1;
      public static final int ID_FIELD_NUMBER = 1;
      private boolean hasID;
      private java.lang.String iD_ = "";
      public boolean hasID() { return hasID; }
      public java.lang.String getID() { return iD_; }
      
      // optional int32 steps = 2;
      public static final int STEPS_FIELD_NUMBER = 2;
      private boolean hasSteps;
      private int steps_ = 0;
      public boolean hasSteps() { return hasSteps; }
      public int getSteps() { return steps_; }
      
      // optional int32 speed = 3;
      public static final int SPEED_FIELD_NUMBER = 3;
      private boolean hasSpeed;
      private int speed_ = 0;
      public boolean hasSpeed() { return hasSpeed; }
      public int getSpeed() { return speed_; }
      
      // optional bool freeWheel = 4;
      public static final int FREEWHEEL_FIELD_NUMBER = 4;
      private boolean hasFreeWheel;
      private boolean freeWheel_ = false;
      public boolean hasFreeWheel() { return hasFreeWheel; }
      public boolean getFreeWheel() { return freeWheel_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        if (!hasID) return false;
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasID()) {
          output.writeString(1, getID());
        }
        if (hasSteps()) {
          output.writeInt32(2, getSteps());
        }
        if (hasSpeed()) {
          output.writeInt32(3, getSpeed());
        }
        if (hasFreeWheel()) {
          output.writeBool(4, getFreeWheel());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasID()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(1, getID());
        }
        if (hasSteps()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, getSteps());
        }
        if (hasSpeed()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, getSpeed());
        }
        if (hasFreeWheel()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(4, getFreeWheel());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static com.cellbots.CellbotProtos.HALCommand.Motor parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Motor parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Motor parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Motor parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Motor parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Motor parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Motor parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.HALCommand.Motor parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.HALCommand.Motor parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Motor parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.cellbots.CellbotProtos.HALCommand.Motor prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private com.cellbots.CellbotProtos.HALCommand.Motor result;
        
        // Construct using com.cellbots.CellbotProtos.HALCommand.Motor.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new com.cellbots.CellbotProtos.HALCommand.Motor();
          return builder;
        }
        
        protected com.cellbots.CellbotProtos.HALCommand.Motor internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new com.cellbots.CellbotProtos.HALCommand.Motor();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.cellbots.CellbotProtos.HALCommand.Motor.getDescriptor();
        }
        
        public com.cellbots.CellbotProtos.HALCommand.Motor getDefaultInstanceForType() {
          return com.cellbots.CellbotProtos.HALCommand.Motor.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public com.cellbots.CellbotProtos.HALCommand.Motor build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private com.cellbots.CellbotProtos.HALCommand.Motor buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public com.cellbots.CellbotProtos.HALCommand.Motor buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          com.cellbots.CellbotProtos.HALCommand.Motor returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.cellbots.CellbotProtos.HALCommand.Motor) {
            return mergeFrom((com.cellbots.CellbotProtos.HALCommand.Motor)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(com.cellbots.CellbotProtos.HALCommand.Motor other) {
          if (other == com.cellbots.CellbotProtos.HALCommand.Motor.getDefaultInstance()) return this;
          if (other.hasID()) {
            setID(other.getID());
          }
          if (other.hasSteps()) {
            setSteps(other.getSteps());
          }
          if (other.hasSpeed()) {
            setSpeed(other.getSpeed());
          }
          if (other.hasFreeWheel()) {
            setFreeWheel(other.getFreeWheel());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 10: {
                setID(input.readString());
                break;
              }
              case 16: {
                setSteps(input.readInt32());
                break;
              }
              case 24: {
                setSpeed(input.readInt32());
                break;
              }
              case 32: {
                setFreeWheel(input.readBool());
                break;
              }
            }
          }
        }
        
        
        // required string ID = 1;
        public boolean hasID() {
          return result.hasID();
        }
        public java.lang.String getID() {
          return result.getID();
        }
        public Builder setID(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasID = true;
          result.iD_ = value;
          return this;
        }
        public Builder clearID() {
          result.hasID = false;
          result.iD_ = getDefaultInstance().getID();
          return this;
        }
        
        // optional int32 steps = 2;
        public boolean hasSteps() {
          return result.hasSteps();
        }
        public int getSteps() {
          return result.getSteps();
        }
        public Builder setSteps(int value) {
          result.hasSteps = true;
          result.steps_ = value;
          return this;
        }
        public Builder clearSteps() {
          result.hasSteps = false;
          result.steps_ = 0;
          return this;
        }
        
        // optional int32 speed = 3;
        public boolean hasSpeed() {
          return result.hasSpeed();
        }
        public int getSpeed() {
          return result.getSpeed();
        }
        public Builder setSpeed(int value) {
          result.hasSpeed = true;
          result.speed_ = value;
          return this;
        }
        public Builder clearSpeed() {
          result.hasSpeed = false;
          result.speed_ = 0;
          return this;
        }
        
        // optional bool freeWheel = 4;
        public boolean hasFreeWheel() {
          return result.hasFreeWheel();
        }
        public boolean getFreeWheel() {
          return result.getFreeWheel();
        }
        public Builder setFreeWheel(boolean value) {
          result.hasFreeWheel = true;
          result.freeWheel_ = value;
          return this;
        }
        public Builder clearFreeWheel() {
          result.hasFreeWheel = false;
          result.freeWheel_ = false;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:cellbots.HALCommand.Motor)
      }
      
      static {
        defaultInstance = new Motor(true);
        com.cellbots.CellbotProtos.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:cellbots.HALCommand.Motor)
    }
    
    public static final class PWM extends
        com.google.protobuf.GeneratedMessage {
      // Use PWM.newBuilder() to construct.
      private PWM() {
        initFields();
      }
      private PWM(boolean noInit) {}
      
      private static final PWM defaultInstance;
      public static PWM getDefaultInstance() {
        return defaultInstance;
      }
      
      public PWM getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_HALCommand_PWM_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_HALCommand_PWM_fieldAccessorTable;
      }
      
      // required string ID = 1;
      public static final int ID_FIELD_NUMBER = 1;
      private boolean hasID;
      private java.lang.String iD_ = "";
      public boolean hasID() { return hasID; }
      public java.lang.String getID() { return iD_; }
      
      // required int32 frequency = 2;
      public static final int FREQUENCY_FIELD_NUMBER = 2;
      private boolean hasFrequency;
      private int frequency_ = 0;
      public boolean hasFrequency() { return hasFrequency; }
      public int getFrequency() { return frequency_; }
      
      // required int32 duty = 3;
      public static final int DUTY_FIELD_NUMBER = 3;
      private boolean hasDuty;
      private int duty_ = 0;
      public boolean hasDuty() { return hasDuty; }
      public int getDuty() { return duty_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        if (!hasID) return false;
        if (!hasFrequency) return false;
        if (!hasDuty) return false;
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasID()) {
          output.writeString(1, getID());
        }
        if (hasFrequency()) {
          output.writeInt32(2, getFrequency());
        }
        if (hasDuty()) {
          output.writeInt32(3, getDuty());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasID()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(1, getID());
        }
        if (hasFrequency()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, getFrequency());
        }
        if (hasDuty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, getDuty());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static com.cellbots.CellbotProtos.HALCommand.PWM parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.PWM parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.PWM parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.PWM parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.PWM parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.PWM parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.PWM parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.HALCommand.PWM parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.HALCommand.PWM parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.PWM parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.cellbots.CellbotProtos.HALCommand.PWM prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private com.cellbots.CellbotProtos.HALCommand.PWM result;
        
        // Construct using com.cellbots.CellbotProtos.HALCommand.PWM.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new com.cellbots.CellbotProtos.HALCommand.PWM();
          return builder;
        }
        
        protected com.cellbots.CellbotProtos.HALCommand.PWM internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new com.cellbots.CellbotProtos.HALCommand.PWM();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.cellbots.CellbotProtos.HALCommand.PWM.getDescriptor();
        }
        
        public com.cellbots.CellbotProtos.HALCommand.PWM getDefaultInstanceForType() {
          return com.cellbots.CellbotProtos.HALCommand.PWM.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public com.cellbots.CellbotProtos.HALCommand.PWM build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private com.cellbots.CellbotProtos.HALCommand.PWM buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public com.cellbots.CellbotProtos.HALCommand.PWM buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          com.cellbots.CellbotProtos.HALCommand.PWM returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.cellbots.CellbotProtos.HALCommand.PWM) {
            return mergeFrom((com.cellbots.CellbotProtos.HALCommand.PWM)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(com.cellbots.CellbotProtos.HALCommand.PWM other) {
          if (other == com.cellbots.CellbotProtos.HALCommand.PWM.getDefaultInstance()) return this;
          if (other.hasID()) {
            setID(other.getID());
          }
          if (other.hasFrequency()) {
            setFrequency(other.getFrequency());
          }
          if (other.hasDuty()) {
            setDuty(other.getDuty());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 10: {
                setID(input.readString());
                break;
              }
              case 16: {
                setFrequency(input.readInt32());
                break;
              }
              case 24: {
                setDuty(input.readInt32());
                break;
              }
            }
          }
        }
        
        
        // required string ID = 1;
        public boolean hasID() {
          return result.hasID();
        }
        public java.lang.String getID() {
          return result.getID();
        }
        public Builder setID(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasID = true;
          result.iD_ = value;
          return this;
        }
        public Builder clearID() {
          result.hasID = false;
          result.iD_ = getDefaultInstance().getID();
          return this;
        }
        
        // required int32 frequency = 2;
        public boolean hasFrequency() {
          return result.hasFrequency();
        }
        public int getFrequency() {
          return result.getFrequency();
        }
        public Builder setFrequency(int value) {
          result.hasFrequency = true;
          result.frequency_ = value;
          return this;
        }
        public Builder clearFrequency() {
          result.hasFrequency = false;
          result.frequency_ = 0;
          return this;
        }
        
        // required int32 duty = 3;
        public boolean hasDuty() {
          return result.hasDuty();
        }
        public int getDuty() {
          return result.getDuty();
        }
        public Builder setDuty(int value) {
          result.hasDuty = true;
          result.duty_ = value;
          return this;
        }
        public Builder clearDuty() {
          result.hasDuty = false;
          result.duty_ = 0;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:cellbots.HALCommand.PWM)
      }
      
      static {
        defaultInstance = new PWM(true);
        com.cellbots.CellbotProtos.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:cellbots.HALCommand.PWM)
    }
    
    public static final class Relay extends
        com.google.protobuf.GeneratedMessage {
      // Use Relay.newBuilder() to construct.
      private Relay() {
        initFields();
      }
      private Relay(boolean noInit) {}
      
      private static final Relay defaultInstance;
      public static Relay getDefaultInstance() {
        return defaultInstance;
      }
      
      public Relay getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_HALCommand_Relay_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_HALCommand_Relay_fieldAccessorTable;
      }
      
      // required string ID = 1;
      public static final int ID_FIELD_NUMBER = 1;
      private boolean hasID;
      private java.lang.String iD_ = "";
      public boolean hasID() { return hasID; }
      public java.lang.String getID() { return iD_; }
      
      // required bool on = 2;
      public static final int ON_FIELD_NUMBER = 2;
      private boolean hasOn;
      private boolean on_ = false;
      public boolean hasOn() { return hasOn; }
      public boolean getOn() { return on_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        if (!hasID) return false;
        if (!hasOn) return false;
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasID()) {
          output.writeString(1, getID());
        }
        if (hasOn()) {
          output.writeBool(2, getOn());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasID()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(1, getID());
        }
        if (hasOn()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(2, getOn());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static com.cellbots.CellbotProtos.HALCommand.Relay parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Relay parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Relay parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Relay parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Relay parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Relay parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Relay parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.HALCommand.Relay parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.HALCommand.Relay parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALCommand.Relay parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.cellbots.CellbotProtos.HALCommand.Relay prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private com.cellbots.CellbotProtos.HALCommand.Relay result;
        
        // Construct using com.cellbots.CellbotProtos.HALCommand.Relay.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new com.cellbots.CellbotProtos.HALCommand.Relay();
          return builder;
        }
        
        protected com.cellbots.CellbotProtos.HALCommand.Relay internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new com.cellbots.CellbotProtos.HALCommand.Relay();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.cellbots.CellbotProtos.HALCommand.Relay.getDescriptor();
        }
        
        public com.cellbots.CellbotProtos.HALCommand.Relay getDefaultInstanceForType() {
          return com.cellbots.CellbotProtos.HALCommand.Relay.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public com.cellbots.CellbotProtos.HALCommand.Relay build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private com.cellbots.CellbotProtos.HALCommand.Relay buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public com.cellbots.CellbotProtos.HALCommand.Relay buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          com.cellbots.CellbotProtos.HALCommand.Relay returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.cellbots.CellbotProtos.HALCommand.Relay) {
            return mergeFrom((com.cellbots.CellbotProtos.HALCommand.Relay)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(com.cellbots.CellbotProtos.HALCommand.Relay other) {
          if (other == com.cellbots.CellbotProtos.HALCommand.Relay.getDefaultInstance()) return this;
          if (other.hasID()) {
            setID(other.getID());
          }
          if (other.hasOn()) {
            setOn(other.getOn());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 10: {
                setID(input.readString());
                break;
              }
              case 16: {
                setOn(input.readBool());
                break;
              }
            }
          }
        }
        
        
        // required string ID = 1;
        public boolean hasID() {
          return result.hasID();
        }
        public java.lang.String getID() {
          return result.getID();
        }
        public Builder setID(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasID = true;
          result.iD_ = value;
          return this;
        }
        public Builder clearID() {
          result.hasID = false;
          result.iD_ = getDefaultInstance().getID();
          return this;
        }
        
        // required bool on = 2;
        public boolean hasOn() {
          return result.hasOn();
        }
        public boolean getOn() {
          return result.getOn();
        }
        public Builder setOn(boolean value) {
          result.hasOn = true;
          result.on_ = value;
          return this;
        }
        public Builder clearOn() {
          result.hasOn = false;
          result.on_ = false;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:cellbots.HALCommand.Relay)
      }
      
      static {
        defaultInstance = new Relay(true);
        com.cellbots.CellbotProtos.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:cellbots.HALCommand.Relay)
    }
    
    // optional int64 timestamp = 1;
    public static final int TIMESTAMP_FIELD_NUMBER = 1;
    private boolean hasTimestamp;
    private long timestamp_ = 0L;
    public boolean hasTimestamp() { return hasTimestamp; }
    public long getTimestamp() { return timestamp_; }
    
    // optional string txtCommand = 2;
    public static final int TXTCOMMAND_FIELD_NUMBER = 2;
    private boolean hasTxtCommand;
    private java.lang.String txtCommand_ = "";
    public boolean hasTxtCommand() { return hasTxtCommand; }
    public java.lang.String getTxtCommand() { return txtCommand_; }
    
    // optional bool allStop = 3;
    public static final int ALLSTOP_FIELD_NUMBER = 3;
    private boolean hasAllStop;
    private boolean allStop_ = false;
    public boolean hasAllStop() { return hasAllStop; }
    public boolean getAllStop() { return allStop_; }
    
    // repeated .cellbots.HALCommand.Servo servo = 4;
    public static final int SERVO_FIELD_NUMBER = 4;
    private java.util.List<com.cellbots.CellbotProtos.HALCommand.Servo> servo_ =
      java.util.Collections.emptyList();
    public java.util.List<com.cellbots.CellbotProtos.HALCommand.Servo> getServoList() {
      return servo_;
    }
    public int getServoCount() { return servo_.size(); }
    public com.cellbots.CellbotProtos.HALCommand.Servo getServo(int index) {
      return servo_.get(index);
    }
    
    // repeated .cellbots.HALCommand.Motor motor = 5;
    public static final int MOTOR_FIELD_NUMBER = 5;
    private java.util.List<com.cellbots.CellbotProtos.HALCommand.Motor> motor_ =
      java.util.Collections.emptyList();
    public java.util.List<com.cellbots.CellbotProtos.HALCommand.Motor> getMotorList() {
      return motor_;
    }
    public int getMotorCount() { return motor_.size(); }
    public com.cellbots.CellbotProtos.HALCommand.Motor getMotor(int index) {
      return motor_.get(index);
    }
    
    // repeated .cellbots.HALCommand.PWM pwm = 6;
    public static final int PWM_FIELD_NUMBER = 6;
    private java.util.List<com.cellbots.CellbotProtos.HALCommand.PWM> pwm_ =
      java.util.Collections.emptyList();
    public java.util.List<com.cellbots.CellbotProtos.HALCommand.PWM> getPwmList() {
      return pwm_;
    }
    public int getPwmCount() { return pwm_.size(); }
    public com.cellbots.CellbotProtos.HALCommand.PWM getPwm(int index) {
      return pwm_.get(index);
    }
    
    // repeated .cellbots.HALCommand.Relay relay = 7;
    public static final int RELAY_FIELD_NUMBER = 7;
    private java.util.List<com.cellbots.CellbotProtos.HALCommand.Relay> relay_ =
      java.util.Collections.emptyList();
    public java.util.List<com.cellbots.CellbotProtos.HALCommand.Relay> getRelayList() {
      return relay_;
    }
    public int getRelayCount() { return relay_.size(); }
    public com.cellbots.CellbotProtos.HALCommand.Relay getRelay(int index) {
      return relay_.get(index);
    }
    
    // optional string botID = 16;
    public static final int BOTID_FIELD_NUMBER = 16;
    private boolean hasBotID;
    private java.lang.String botID_ = "";
    public boolean hasBotID() { return hasBotID; }
    public java.lang.String getBotID() { return botID_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (com.cellbots.CellbotProtos.HALCommand.Servo element : getServoList()) {
        if (!element.isInitialized()) return false;
      }
      for (com.cellbots.CellbotProtos.HALCommand.Motor element : getMotorList()) {
        if (!element.isInitialized()) return false;
      }
      for (com.cellbots.CellbotProtos.HALCommand.PWM element : getPwmList()) {
        if (!element.isInitialized()) return false;
      }
      for (com.cellbots.CellbotProtos.HALCommand.Relay element : getRelayList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasTimestamp()) {
        output.writeInt64(1, getTimestamp());
      }
      if (hasTxtCommand()) {
        output.writeString(2, getTxtCommand());
      }
      if (hasAllStop()) {
        output.writeBool(3, getAllStop());
      }
      for (com.cellbots.CellbotProtos.HALCommand.Servo element : getServoList()) {
        output.writeMessage(4, element);
      }
      for (com.cellbots.CellbotProtos.HALCommand.Motor element : getMotorList()) {
        output.writeMessage(5, element);
      }
      for (com.cellbots.CellbotProtos.HALCommand.PWM element : getPwmList()) {
        output.writeMessage(6, element);
      }
      for (com.cellbots.CellbotProtos.HALCommand.Relay element : getRelayList()) {
        output.writeMessage(7, element);
      }
      if (hasBotID()) {
        output.writeString(16, getBotID());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTimestamp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, getTimestamp());
      }
      if (hasTxtCommand()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getTxtCommand());
      }
      if (hasAllStop()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, getAllStop());
      }
      for (com.cellbots.CellbotProtos.HALCommand.Servo element : getServoList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, element);
      }
      for (com.cellbots.CellbotProtos.HALCommand.Motor element : getMotorList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, element);
      }
      for (com.cellbots.CellbotProtos.HALCommand.PWM element : getPwmList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, element);
      }
      for (com.cellbots.CellbotProtos.HALCommand.Relay element : getRelayList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, element);
      }
      if (hasBotID()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(16, getBotID());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.cellbots.CellbotProtos.HALCommand parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALCommand parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALCommand parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALCommand parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALCommand parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALCommand parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALCommand parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.cellbots.CellbotProtos.HALCommand parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.cellbots.CellbotProtos.HALCommand parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALCommand parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.cellbots.CellbotProtos.HALCommand prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.cellbots.CellbotProtos.HALCommand result;
      
      // Construct using com.cellbots.CellbotProtos.HALCommand.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.cellbots.CellbotProtos.HALCommand();
        return builder;
      }
      
      protected com.cellbots.CellbotProtos.HALCommand internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.cellbots.CellbotProtos.HALCommand();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cellbots.CellbotProtos.HALCommand.getDescriptor();
      }
      
      public com.cellbots.CellbotProtos.HALCommand getDefaultInstanceForType() {
        return com.cellbots.CellbotProtos.HALCommand.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.cellbots.CellbotProtos.HALCommand build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.cellbots.CellbotProtos.HALCommand buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.cellbots.CellbotProtos.HALCommand buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.servo_ != java.util.Collections.EMPTY_LIST) {
          result.servo_ =
            java.util.Collections.unmodifiableList(result.servo_);
        }
        if (result.motor_ != java.util.Collections.EMPTY_LIST) {
          result.motor_ =
            java.util.Collections.unmodifiableList(result.motor_);
        }
        if (result.pwm_ != java.util.Collections.EMPTY_LIST) {
          result.pwm_ =
            java.util.Collections.unmodifiableList(result.pwm_);
        }
        if (result.relay_ != java.util.Collections.EMPTY_LIST) {
          result.relay_ =
            java.util.Collections.unmodifiableList(result.relay_);
        }
        com.cellbots.CellbotProtos.HALCommand returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cellbots.CellbotProtos.HALCommand) {
          return mergeFrom((com.cellbots.CellbotProtos.HALCommand)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.cellbots.CellbotProtos.HALCommand other) {
        if (other == com.cellbots.CellbotProtos.HALCommand.getDefaultInstance()) return this;
        if (other.hasTimestamp()) {
          setTimestamp(other.getTimestamp());
        }
        if (other.hasTxtCommand()) {
          setTxtCommand(other.getTxtCommand());
        }
        if (other.hasAllStop()) {
          setAllStop(other.getAllStop());
        }
        if (!other.servo_.isEmpty()) {
          if (result.servo_.isEmpty()) {
            result.servo_ = new java.util.ArrayList<com.cellbots.CellbotProtos.HALCommand.Servo>();
          }
          result.servo_.addAll(other.servo_);
        }
        if (!other.motor_.isEmpty()) {
          if (result.motor_.isEmpty()) {
            result.motor_ = new java.util.ArrayList<com.cellbots.CellbotProtos.HALCommand.Motor>();
          }
          result.motor_.addAll(other.motor_);
        }
        if (!other.pwm_.isEmpty()) {
          if (result.pwm_.isEmpty()) {
            result.pwm_ = new java.util.ArrayList<com.cellbots.CellbotProtos.HALCommand.PWM>();
          }
          result.pwm_.addAll(other.pwm_);
        }
        if (!other.relay_.isEmpty()) {
          if (result.relay_.isEmpty()) {
            result.relay_ = new java.util.ArrayList<com.cellbots.CellbotProtos.HALCommand.Relay>();
          }
          result.relay_.addAll(other.relay_);
        }
        if (other.hasBotID()) {
          setBotID(other.getBotID());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setTimestamp(input.readInt64());
              break;
            }
            case 18: {
              setTxtCommand(input.readString());
              break;
            }
            case 24: {
              setAllStop(input.readBool());
              break;
            }
            case 34: {
              com.cellbots.CellbotProtos.HALCommand.Servo.Builder subBuilder = com.cellbots.CellbotProtos.HALCommand.Servo.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addServo(subBuilder.buildPartial());
              break;
            }
            case 42: {
              com.cellbots.CellbotProtos.HALCommand.Motor.Builder subBuilder = com.cellbots.CellbotProtos.HALCommand.Motor.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addMotor(subBuilder.buildPartial());
              break;
            }
            case 50: {
              com.cellbots.CellbotProtos.HALCommand.PWM.Builder subBuilder = com.cellbots.CellbotProtos.HALCommand.PWM.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addPwm(subBuilder.buildPartial());
              break;
            }
            case 58: {
              com.cellbots.CellbotProtos.HALCommand.Relay.Builder subBuilder = com.cellbots.CellbotProtos.HALCommand.Relay.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addRelay(subBuilder.buildPartial());
              break;
            }
            case 130: {
              setBotID(input.readString());
              break;
            }
          }
        }
      }
      
      
      // optional int64 timestamp = 1;
      public boolean hasTimestamp() {
        return result.hasTimestamp();
      }
      public long getTimestamp() {
        return result.getTimestamp();
      }
      public Builder setTimestamp(long value) {
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder clearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
      
      // optional string txtCommand = 2;
      public boolean hasTxtCommand() {
        return result.hasTxtCommand();
      }
      public java.lang.String getTxtCommand() {
        return result.getTxtCommand();
      }
      public Builder setTxtCommand(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasTxtCommand = true;
        result.txtCommand_ = value;
        return this;
      }
      public Builder clearTxtCommand() {
        result.hasTxtCommand = false;
        result.txtCommand_ = getDefaultInstance().getTxtCommand();
        return this;
      }
      
      // optional bool allStop = 3;
      public boolean hasAllStop() {
        return result.hasAllStop();
      }
      public boolean getAllStop() {
        return result.getAllStop();
      }
      public Builder setAllStop(boolean value) {
        result.hasAllStop = true;
        result.allStop_ = value;
        return this;
      }
      public Builder clearAllStop() {
        result.hasAllStop = false;
        result.allStop_ = false;
        return this;
      }
      
      // repeated .cellbots.HALCommand.Servo servo = 4;
      public java.util.List<com.cellbots.CellbotProtos.HALCommand.Servo> getServoList() {
        return java.util.Collections.unmodifiableList(result.servo_);
      }
      public int getServoCount() {
        return result.getServoCount();
      }
      public com.cellbots.CellbotProtos.HALCommand.Servo getServo(int index) {
        return result.getServo(index);
      }
      public Builder setServo(int index, com.cellbots.CellbotProtos.HALCommand.Servo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.servo_.set(index, value);
        return this;
      }
      public Builder setServo(int index, com.cellbots.CellbotProtos.HALCommand.Servo.Builder builderForValue) {
        result.servo_.set(index, builderForValue.build());
        return this;
      }
      public Builder addServo(com.cellbots.CellbotProtos.HALCommand.Servo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.servo_.isEmpty()) {
          result.servo_ = new java.util.ArrayList<com.cellbots.CellbotProtos.HALCommand.Servo>();
        }
        result.servo_.add(value);
        return this;
      }
      public Builder addServo(com.cellbots.CellbotProtos.HALCommand.Servo.Builder builderForValue) {
        if (result.servo_.isEmpty()) {
          result.servo_ = new java.util.ArrayList<com.cellbots.CellbotProtos.HALCommand.Servo>();
        }
        result.servo_.add(builderForValue.build());
        return this;
      }
      public Builder addAllServo(
          java.lang.Iterable<? extends com.cellbots.CellbotProtos.HALCommand.Servo> values) {
        if (result.servo_.isEmpty()) {
          result.servo_ = new java.util.ArrayList<com.cellbots.CellbotProtos.HALCommand.Servo>();
        }
        super.addAll(values, result.servo_);
        return this;
      }
      public Builder clearServo() {
        result.servo_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .cellbots.HALCommand.Motor motor = 5;
      public java.util.List<com.cellbots.CellbotProtos.HALCommand.Motor> getMotorList() {
        return java.util.Collections.unmodifiableList(result.motor_);
      }
      public int getMotorCount() {
        return result.getMotorCount();
      }
      public com.cellbots.CellbotProtos.HALCommand.Motor getMotor(int index) {
        return result.getMotor(index);
      }
      public Builder setMotor(int index, com.cellbots.CellbotProtos.HALCommand.Motor value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.motor_.set(index, value);
        return this;
      }
      public Builder setMotor(int index, com.cellbots.CellbotProtos.HALCommand.Motor.Builder builderForValue) {
        result.motor_.set(index, builderForValue.build());
        return this;
      }
      public Builder addMotor(com.cellbots.CellbotProtos.HALCommand.Motor value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.motor_.isEmpty()) {
          result.motor_ = new java.util.ArrayList<com.cellbots.CellbotProtos.HALCommand.Motor>();
        }
        result.motor_.add(value);
        return this;
      }
      public Builder addMotor(com.cellbots.CellbotProtos.HALCommand.Motor.Builder builderForValue) {
        if (result.motor_.isEmpty()) {
          result.motor_ = new java.util.ArrayList<com.cellbots.CellbotProtos.HALCommand.Motor>();
        }
        result.motor_.add(builderForValue.build());
        return this;
      }
      public Builder addAllMotor(
          java.lang.Iterable<? extends com.cellbots.CellbotProtos.HALCommand.Motor> values) {
        if (result.motor_.isEmpty()) {
          result.motor_ = new java.util.ArrayList<com.cellbots.CellbotProtos.HALCommand.Motor>();
        }
        super.addAll(values, result.motor_);
        return this;
      }
      public Builder clearMotor() {
        result.motor_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .cellbots.HALCommand.PWM pwm = 6;
      public java.util.List<com.cellbots.CellbotProtos.HALCommand.PWM> getPwmList() {
        return java.util.Collections.unmodifiableList(result.pwm_);
      }
      public int getPwmCount() {
        return result.getPwmCount();
      }
      public com.cellbots.CellbotProtos.HALCommand.PWM getPwm(int index) {
        return result.getPwm(index);
      }
      public Builder setPwm(int index, com.cellbots.CellbotProtos.HALCommand.PWM value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.pwm_.set(index, value);
        return this;
      }
      public Builder setPwm(int index, com.cellbots.CellbotProtos.HALCommand.PWM.Builder builderForValue) {
        result.pwm_.set(index, builderForValue.build());
        return this;
      }
      public Builder addPwm(com.cellbots.CellbotProtos.HALCommand.PWM value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.pwm_.isEmpty()) {
          result.pwm_ = new java.util.ArrayList<com.cellbots.CellbotProtos.HALCommand.PWM>();
        }
        result.pwm_.add(value);
        return this;
      }
      public Builder addPwm(com.cellbots.CellbotProtos.HALCommand.PWM.Builder builderForValue) {
        if (result.pwm_.isEmpty()) {
          result.pwm_ = new java.util.ArrayList<com.cellbots.CellbotProtos.HALCommand.PWM>();
        }
        result.pwm_.add(builderForValue.build());
        return this;
      }
      public Builder addAllPwm(
          java.lang.Iterable<? extends com.cellbots.CellbotProtos.HALCommand.PWM> values) {
        if (result.pwm_.isEmpty()) {
          result.pwm_ = new java.util.ArrayList<com.cellbots.CellbotProtos.HALCommand.PWM>();
        }
        super.addAll(values, result.pwm_);
        return this;
      }
      public Builder clearPwm() {
        result.pwm_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .cellbots.HALCommand.Relay relay = 7;
      public java.util.List<com.cellbots.CellbotProtos.HALCommand.Relay> getRelayList() {
        return java.util.Collections.unmodifiableList(result.relay_);
      }
      public int getRelayCount() {
        return result.getRelayCount();
      }
      public com.cellbots.CellbotProtos.HALCommand.Relay getRelay(int index) {
        return result.getRelay(index);
      }
      public Builder setRelay(int index, com.cellbots.CellbotProtos.HALCommand.Relay value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.relay_.set(index, value);
        return this;
      }
      public Builder setRelay(int index, com.cellbots.CellbotProtos.HALCommand.Relay.Builder builderForValue) {
        result.relay_.set(index, builderForValue.build());
        return this;
      }
      public Builder addRelay(com.cellbots.CellbotProtos.HALCommand.Relay value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.relay_.isEmpty()) {
          result.relay_ = new java.util.ArrayList<com.cellbots.CellbotProtos.HALCommand.Relay>();
        }
        result.relay_.add(value);
        return this;
      }
      public Builder addRelay(com.cellbots.CellbotProtos.HALCommand.Relay.Builder builderForValue) {
        if (result.relay_.isEmpty()) {
          result.relay_ = new java.util.ArrayList<com.cellbots.CellbotProtos.HALCommand.Relay>();
        }
        result.relay_.add(builderForValue.build());
        return this;
      }
      public Builder addAllRelay(
          java.lang.Iterable<? extends com.cellbots.CellbotProtos.HALCommand.Relay> values) {
        if (result.relay_.isEmpty()) {
          result.relay_ = new java.util.ArrayList<com.cellbots.CellbotProtos.HALCommand.Relay>();
        }
        super.addAll(values, result.relay_);
        return this;
      }
      public Builder clearRelay() {
        result.relay_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional string botID = 16;
      public boolean hasBotID() {
        return result.hasBotID();
      }
      public java.lang.String getBotID() {
        return result.getBotID();
      }
      public Builder setBotID(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasBotID = true;
        result.botID_ = value;
        return this;
      }
      public Builder clearBotID() {
        result.hasBotID = false;
        result.botID_ = getDefaultInstance().getBotID();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:cellbots.HALCommand)
    }
    
    static {
      defaultInstance = new HALCommand(true);
      com.cellbots.CellbotProtos.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:cellbots.HALCommand)
  }
  
  public static final class HALState extends
      com.google.protobuf.GeneratedMessage {
    // Use HALState.newBuilder() to construct.
    private HALState() {
      initFields();
    }
    private HALState(boolean noInit) {}
    
    private static final HALState defaultInstance;
    public static HALState getDefaultInstance() {
      return defaultInstance;
    }
    
    public HALState getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cellbots.CellbotProtos.internal_static_cellbots_HALState_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cellbots.CellbotProtos.internal_static_cellbots_HALState_fieldAccessorTable;
    }
    
    public static final class SensorValue extends
        com.google.protobuf.GeneratedMessage {
      // Use SensorValue.newBuilder() to construct.
      private SensorValue() {
        initFields();
      }
      private SensorValue(boolean noInit) {}
      
      private static final SensorValue defaultInstance;
      public static SensorValue getDefaultInstance() {
        return defaultInstance;
      }
      
      public SensorValue getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_HALState_SensorValue_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cellbots.CellbotProtos.internal_static_cellbots_HALState_SensorValue_fieldAccessorTable;
      }
      
      public enum SensorUnits
          implements com.google.protobuf.ProtocolMessageEnum {
        MILIVOLTS(0, 1),
        MILIAMPS(1, 2),
        DEG_CELISUS(2, 3),
        CENTIMETERS(3, 4),
        COUNT(4, 5),
        LUX(5, 8),
        SATURATON_RED(6, 9),
        SATURATON_GREEN(7, 10),
        SATURATON_BLUE(8, 11),
        TIME_MS(9, 12),
        HZ(10, 13),
        RESISTNACE_OHMS(12, 14),
        PRESSURE_MILIBAR(13, 15),
        ;
        
        public static final SensorUnits PULSE_WIDTH_MS = HZ;
        
        public final int getNumber() { return value; }
        
        public static SensorUnits valueOf(int value) {
          switch (value) {
            case 1: return MILIVOLTS;
            case 2: return MILIAMPS;
            case 3: return DEG_CELISUS;
            case 4: return CENTIMETERS;
            case 5: return COUNT;
            case 8: return LUX;
            case 9: return SATURATON_RED;
            case 10: return SATURATON_GREEN;
            case 11: return SATURATON_BLUE;
            case 12: return TIME_MS;
            case 13: return HZ;
            case 14: return RESISTNACE_OHMS;
            case 15: return PRESSURE_MILIBAR;
            default: return null;
          }
        }
        
        public static com.google.protobuf.Internal.EnumLiteMap<SensorUnits>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static com.google.protobuf.Internal.EnumLiteMap<SensorUnits>
            internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<SensorUnits>() {
                public SensorUnits findValueByNumber(int number) {
                  return SensorUnits.valueOf(number)
        ;        }
              };
        
        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(index);
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.cellbots.CellbotProtos.HALState.SensorValue.getDescriptor().getEnumTypes().get(0);
        }
        
        private static final SensorUnits[] VALUES = {
          MILIVOLTS, MILIAMPS, DEG_CELISUS, CENTIMETERS, COUNT, LUX, SATURATON_RED, SATURATON_GREEN, SATURATON_BLUE, TIME_MS, HZ, PULSE_WIDTH_MS, RESISTNACE_OHMS, PRESSURE_MILIBAR, 
        };
        public static SensorUnits valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }
        private final int index;
        private final int value;
        private SensorUnits(int index, int value) {
          this.index = index;
          this.value = value;
        }
        
        static {
          com.cellbots.CellbotProtos.getDescriptor();
        }
        
        // @@protoc_insertion_point(enum_scope:cellbots.HALState.SensorValue.SensorUnits)
      }
      
      // required string ID = 1;
      public static final int ID_FIELD_NUMBER = 1;
      private boolean hasID;
      private java.lang.String iD_ = "";
      public boolean hasID() { return hasID; }
      public java.lang.String getID() { return iD_; }
      
      // optional bool outOfRange = 2;
      public static final int OUTOFRANGE_FIELD_NUMBER = 2;
      private boolean hasOutOfRange;
      private boolean outOfRange_ = false;
      public boolean hasOutOfRange() { return hasOutOfRange; }
      public boolean getOutOfRange() { return outOfRange_; }
      
      // optional int32 value = 3;
      public static final int VALUE_FIELD_NUMBER = 3;
      private boolean hasValue;
      private int value_ = 0;
      public boolean hasValue() { return hasValue; }
      public int getValue() { return value_; }
      
      // optional int32 prevValue = 4;
      public static final int PREVVALUE_FIELD_NUMBER = 4;
      private boolean hasPrevValue;
      private int prevValue_ = 0;
      public boolean hasPrevValue() { return hasPrevValue; }
      public int getPrevValue() { return prevValue_; }
      
      // optional int32 minSenseableValue = 5;
      public static final int MINSENSEABLEVALUE_FIELD_NUMBER = 5;
      private boolean hasMinSenseableValue;
      private int minSenseableValue_ = 0;
      public boolean hasMinSenseableValue() { return hasMinSenseableValue; }
      public int getMinSenseableValue() { return minSenseableValue_; }
      
      // optional int32 maxSenseableValue = 6;
      public static final int MAXSENSEABLEVALUE_FIELD_NUMBER = 6;
      private boolean hasMaxSenseableValue;
      private int maxSenseableValue_ = 0;
      public boolean hasMaxSenseableValue() { return hasMaxSenseableValue; }
      public int getMaxSenseableValue() { return maxSenseableValue_; }
      
      // optional .cellbots.HALState.SensorValue.SensorUnits sensorUnits = 7;
      public static final int SENSORUNITS_FIELD_NUMBER = 7;
      private boolean hasSensorUnits;
      private com.cellbots.CellbotProtos.HALState.SensorValue.SensorUnits sensorUnits_;
      public boolean hasSensorUnits() { return hasSensorUnits; }
      public com.cellbots.CellbotProtos.HALState.SensorValue.SensorUnits getSensorUnits() { return sensorUnits_; }
      
      private void initFields() {
        sensorUnits_ = com.cellbots.CellbotProtos.HALState.SensorValue.SensorUnits.MILIVOLTS;
      }
      public final boolean isInitialized() {
        if (!hasID) return false;
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasID()) {
          output.writeString(1, getID());
        }
        if (hasOutOfRange()) {
          output.writeBool(2, getOutOfRange());
        }
        if (hasValue()) {
          output.writeInt32(3, getValue());
        }
        if (hasPrevValue()) {
          output.writeInt32(4, getPrevValue());
        }
        if (hasMinSenseableValue()) {
          output.writeInt32(5, getMinSenseableValue());
        }
        if (hasMaxSenseableValue()) {
          output.writeInt32(6, getMaxSenseableValue());
        }
        if (hasSensorUnits()) {
          output.writeEnum(7, getSensorUnits().getNumber());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasID()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(1, getID());
        }
        if (hasOutOfRange()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(2, getOutOfRange());
        }
        if (hasValue()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, getValue());
        }
        if (hasPrevValue()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(4, getPrevValue());
        }
        if (hasMinSenseableValue()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(5, getMinSenseableValue());
        }
        if (hasMaxSenseableValue()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(6, getMaxSenseableValue());
        }
        if (hasSensorUnits()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(7, getSensorUnits().getNumber());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static com.cellbots.CellbotProtos.HALState.SensorValue parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALState.SensorValue parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALState.SensorValue parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALState.SensorValue parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALState.SensorValue parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALState.SensorValue parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALState.SensorValue parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.HALState.SensorValue parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.cellbots.CellbotProtos.HALState.SensorValue parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.cellbots.CellbotProtos.HALState.SensorValue parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.cellbots.CellbotProtos.HALState.SensorValue prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private com.cellbots.CellbotProtos.HALState.SensorValue result;
        
        // Construct using com.cellbots.CellbotProtos.HALState.SensorValue.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new com.cellbots.CellbotProtos.HALState.SensorValue();
          return builder;
        }
        
        protected com.cellbots.CellbotProtos.HALState.SensorValue internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new com.cellbots.CellbotProtos.HALState.SensorValue();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.cellbots.CellbotProtos.HALState.SensorValue.getDescriptor();
        }
        
        public com.cellbots.CellbotProtos.HALState.SensorValue getDefaultInstanceForType() {
          return com.cellbots.CellbotProtos.HALState.SensorValue.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public com.cellbots.CellbotProtos.HALState.SensorValue build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private com.cellbots.CellbotProtos.HALState.SensorValue buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public com.cellbots.CellbotProtos.HALState.SensorValue buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          com.cellbots.CellbotProtos.HALState.SensorValue returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.cellbots.CellbotProtos.HALState.SensorValue) {
            return mergeFrom((com.cellbots.CellbotProtos.HALState.SensorValue)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(com.cellbots.CellbotProtos.HALState.SensorValue other) {
          if (other == com.cellbots.CellbotProtos.HALState.SensorValue.getDefaultInstance()) return this;
          if (other.hasID()) {
            setID(other.getID());
          }
          if (other.hasOutOfRange()) {
            setOutOfRange(other.getOutOfRange());
          }
          if (other.hasValue()) {
            setValue(other.getValue());
          }
          if (other.hasPrevValue()) {
            setPrevValue(other.getPrevValue());
          }
          if (other.hasMinSenseableValue()) {
            setMinSenseableValue(other.getMinSenseableValue());
          }
          if (other.hasMaxSenseableValue()) {
            setMaxSenseableValue(other.getMaxSenseableValue());
          }
          if (other.hasSensorUnits()) {
            setSensorUnits(other.getSensorUnits());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 10: {
                setID(input.readString());
                break;
              }
              case 16: {
                setOutOfRange(input.readBool());
                break;
              }
              case 24: {
                setValue(input.readInt32());
                break;
              }
              case 32: {
                setPrevValue(input.readInt32());
                break;
              }
              case 40: {
                setMinSenseableValue(input.readInt32());
                break;
              }
              case 48: {
                setMaxSenseableValue(input.readInt32());
                break;
              }
              case 56: {
                int rawValue = input.readEnum();
                com.cellbots.CellbotProtos.HALState.SensorValue.SensorUnits value = com.cellbots.CellbotProtos.HALState.SensorValue.SensorUnits.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(7, rawValue);
                } else {
                  setSensorUnits(value);
                }
                break;
              }
            }
          }
        }
        
        
        // required string ID = 1;
        public boolean hasID() {
          return result.hasID();
        }
        public java.lang.String getID() {
          return result.getID();
        }
        public Builder setID(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasID = true;
          result.iD_ = value;
          return this;
        }
        public Builder clearID() {
          result.hasID = false;
          result.iD_ = getDefaultInstance().getID();
          return this;
        }
        
        // optional bool outOfRange = 2;
        public boolean hasOutOfRange() {
          return result.hasOutOfRange();
        }
        public boolean getOutOfRange() {
          return result.getOutOfRange();
        }
        public Builder setOutOfRange(boolean value) {
          result.hasOutOfRange = true;
          result.outOfRange_ = value;
          return this;
        }
        public Builder clearOutOfRange() {
          result.hasOutOfRange = false;
          result.outOfRange_ = false;
          return this;
        }
        
        // optional int32 value = 3;
        public boolean hasValue() {
          return result.hasValue();
        }
        public int getValue() {
          return result.getValue();
        }
        public Builder setValue(int value) {
          result.hasValue = true;
          result.value_ = value;
          return this;
        }
        public Builder clearValue() {
          result.hasValue = false;
          result.value_ = 0;
          return this;
        }
        
        // optional int32 prevValue = 4;
        public boolean hasPrevValue() {
          return result.hasPrevValue();
        }
        public int getPrevValue() {
          return result.getPrevValue();
        }
        public Builder setPrevValue(int value) {
          result.hasPrevValue = true;
          result.prevValue_ = value;
          return this;
        }
        public Builder clearPrevValue() {
          result.hasPrevValue = false;
          result.prevValue_ = 0;
          return this;
        }
        
        // optional int32 minSenseableValue = 5;
        public boolean hasMinSenseableValue() {
          return result.hasMinSenseableValue();
        }
        public int getMinSenseableValue() {
          return result.getMinSenseableValue();
        }
        public Builder setMinSenseableValue(int value) {
          result.hasMinSenseableValue = true;
          result.minSenseableValue_ = value;
          return this;
        }
        public Builder clearMinSenseableValue() {
          result.hasMinSenseableValue = false;
          result.minSenseableValue_ = 0;
          return this;
        }
        
        // optional int32 maxSenseableValue = 6;
        public boolean hasMaxSenseableValue() {
          return result.hasMaxSenseableValue();
        }
        public int getMaxSenseableValue() {
          return result.getMaxSenseableValue();
        }
        public Builder setMaxSenseableValue(int value) {
          result.hasMaxSenseableValue = true;
          result.maxSenseableValue_ = value;
          return this;
        }
        public Builder clearMaxSenseableValue() {
          result.hasMaxSenseableValue = false;
          result.maxSenseableValue_ = 0;
          return this;
        }
        
        // optional .cellbots.HALState.SensorValue.SensorUnits sensorUnits = 7;
        public boolean hasSensorUnits() {
          return result.hasSensorUnits();
        }
        public com.cellbots.CellbotProtos.HALState.SensorValue.SensorUnits getSensorUnits() {
          return result.getSensorUnits();
        }
        public Builder setSensorUnits(com.cellbots.CellbotProtos.HALState.SensorValue.SensorUnits value) {
          if (value == null) {
            throw new NullPointerException();
          }
          result.hasSensorUnits = true;
          result.sensorUnits_ = value;
          return this;
        }
        public Builder clearSensorUnits() {
          result.hasSensorUnits = false;
          result.sensorUnits_ = com.cellbots.CellbotProtos.HALState.SensorValue.SensorUnits.MILIVOLTS;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:cellbots.HALState.SensorValue)
      }
      
      static {
        defaultInstance = new SensorValue(true);
        com.cellbots.CellbotProtos.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:cellbots.HALState.SensorValue)
    }
    
    // required int64 timestamp = 1;
    public static final int TIMESTAMP_FIELD_NUMBER = 1;
    private boolean hasTimestamp;
    private long timestamp_ = 0L;
    public boolean hasTimestamp() { return hasTimestamp; }
    public long getTimestamp() { return timestamp_; }
    
    // optional string dbgMessage = 2;
    public static final int DBGMESSAGE_FIELD_NUMBER = 2;
    private boolean hasDbgMessage;
    private java.lang.String dbgMessage_ = "";
    public boolean hasDbgMessage() { return hasDbgMessage; }
    public java.lang.String getDbgMessage() { return dbgMessage_; }
    
    // optional int32 vBat = 3;
    public static final int VBAT_FIELD_NUMBER = 3;
    private boolean hasVBat;
    private int vBat_ = 0;
    public boolean hasVBat() { return hasVBat; }
    public int getVBat() { return vBat_; }
    
    // optional int32 currentDraw = 4;
    public static final int CURRENTDRAW_FIELD_NUMBER = 4;
    private boolean hasCurrentDraw;
    private int currentDraw_ = 0;
    public boolean hasCurrentDraw() { return hasCurrentDraw; }
    public int getCurrentDraw() { return currentDraw_; }
    
    // optional int32 powerUsed = 5;
    public static final int POWERUSED_FIELD_NUMBER = 5;
    private boolean hasPowerUsed;
    private int powerUsed_ = 0;
    public boolean hasPowerUsed() { return hasPowerUsed; }
    public int getPowerUsed() { return powerUsed_; }
    
    // optional int32 batteryTemp = 6;
    public static final int BATTERYTEMP_FIELD_NUMBER = 6;
    private boolean hasBatteryTemp;
    private int batteryTemp_ = 0;
    public boolean hasBatteryTemp() { return hasBatteryTemp; }
    public int getBatteryTemp() { return batteryTemp_; }
    
    // optional int32 vCC = 7;
    public static final int VCC_FIELD_NUMBER = 7;
    private boolean hasVCC;
    private int vCC_ = 0;
    public boolean hasVCC() { return hasVCC; }
    public int getVCC() { return vCC_; }
    
    // repeated .cellbots.HALState.SensorValue sensorValue = 8;
    public static final int SENSORVALUE_FIELD_NUMBER = 8;
    private java.util.List<com.cellbots.CellbotProtos.HALState.SensorValue> sensorValue_ =
      java.util.Collections.emptyList();
    public java.util.List<com.cellbots.CellbotProtos.HALState.SensorValue> getSensorValueList() {
      return sensorValue_;
    }
    public int getSensorValueCount() { return sensorValue_.size(); }
    public com.cellbots.CellbotProtos.HALState.SensorValue getSensorValue(int index) {
      return sensorValue_.get(index);
    }
    
    // optional string botID = 16;
    public static final int BOTID_FIELD_NUMBER = 16;
    private boolean hasBotID;
    private java.lang.String botID_ = "";
    public boolean hasBotID() { return hasBotID; }
    public java.lang.String getBotID() { return botID_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasTimestamp) return false;
      for (com.cellbots.CellbotProtos.HALState.SensorValue element : getSensorValueList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasTimestamp()) {
        output.writeInt64(1, getTimestamp());
      }
      if (hasDbgMessage()) {
        output.writeString(2, getDbgMessage());
      }
      if (hasVBat()) {
        output.writeInt32(3, getVBat());
      }
      if (hasCurrentDraw()) {
        output.writeInt32(4, getCurrentDraw());
      }
      if (hasPowerUsed()) {
        output.writeInt32(5, getPowerUsed());
      }
      if (hasBatteryTemp()) {
        output.writeInt32(6, getBatteryTemp());
      }
      if (hasVCC()) {
        output.writeInt32(7, getVCC());
      }
      for (com.cellbots.CellbotProtos.HALState.SensorValue element : getSensorValueList()) {
        output.writeMessage(8, element);
      }
      if (hasBotID()) {
        output.writeString(16, getBotID());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTimestamp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, getTimestamp());
      }
      if (hasDbgMessage()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getDbgMessage());
      }
      if (hasVBat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getVBat());
      }
      if (hasCurrentDraw()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getCurrentDraw());
      }
      if (hasPowerUsed()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, getPowerUsed());
      }
      if (hasBatteryTemp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, getBatteryTemp());
      }
      if (hasVCC()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, getVCC());
      }
      for (com.cellbots.CellbotProtos.HALState.SensorValue element : getSensorValueList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, element);
      }
      if (hasBotID()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(16, getBotID());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.cellbots.CellbotProtos.HALState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.cellbots.CellbotProtos.HALState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.cellbots.CellbotProtos.HALState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.cellbots.CellbotProtos.HALState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.cellbots.CellbotProtos.HALState prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.cellbots.CellbotProtos.HALState result;
      
      // Construct using com.cellbots.CellbotProtos.HALState.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.cellbots.CellbotProtos.HALState();
        return builder;
      }
      
      protected com.cellbots.CellbotProtos.HALState internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.cellbots.CellbotProtos.HALState();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cellbots.CellbotProtos.HALState.getDescriptor();
      }
      
      public com.cellbots.CellbotProtos.HALState getDefaultInstanceForType() {
        return com.cellbots.CellbotProtos.HALState.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.cellbots.CellbotProtos.HALState build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.cellbots.CellbotProtos.HALState buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.cellbots.CellbotProtos.HALState buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.sensorValue_ != java.util.Collections.EMPTY_LIST) {
          result.sensorValue_ =
            java.util.Collections.unmodifiableList(result.sensorValue_);
        }
        com.cellbots.CellbotProtos.HALState returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cellbots.CellbotProtos.HALState) {
          return mergeFrom((com.cellbots.CellbotProtos.HALState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.cellbots.CellbotProtos.HALState other) {
        if (other == com.cellbots.CellbotProtos.HALState.getDefaultInstance()) return this;
        if (other.hasTimestamp()) {
          setTimestamp(other.getTimestamp());
        }
        if (other.hasDbgMessage()) {
          setDbgMessage(other.getDbgMessage());
        }
        if (other.hasVBat()) {
          setVBat(other.getVBat());
        }
        if (other.hasCurrentDraw()) {
          setCurrentDraw(other.getCurrentDraw());
        }
        if (other.hasPowerUsed()) {
          setPowerUsed(other.getPowerUsed());
        }
        if (other.hasBatteryTemp()) {
          setBatteryTemp(other.getBatteryTemp());
        }
        if (other.hasVCC()) {
          setVCC(other.getVCC());
        }
        if (!other.sensorValue_.isEmpty()) {
          if (result.sensorValue_.isEmpty()) {
            result.sensorValue_ = new java.util.ArrayList<com.cellbots.CellbotProtos.HALState.SensorValue>();
          }
          result.sensorValue_.addAll(other.sensorValue_);
        }
        if (other.hasBotID()) {
          setBotID(other.getBotID());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setTimestamp(input.readInt64());
              break;
            }
            case 18: {
              setDbgMessage(input.readString());
              break;
            }
            case 24: {
              setVBat(input.readInt32());
              break;
            }
            case 32: {
              setCurrentDraw(input.readInt32());
              break;
            }
            case 40: {
              setPowerUsed(input.readInt32());
              break;
            }
            case 48: {
              setBatteryTemp(input.readInt32());
              break;
            }
            case 56: {
              setVCC(input.readInt32());
              break;
            }
            case 66: {
              com.cellbots.CellbotProtos.HALState.SensorValue.Builder subBuilder = com.cellbots.CellbotProtos.HALState.SensorValue.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addSensorValue(subBuilder.buildPartial());
              break;
            }
            case 130: {
              setBotID(input.readString());
              break;
            }
          }
        }
      }
      
      
      // required int64 timestamp = 1;
      public boolean hasTimestamp() {
        return result.hasTimestamp();
      }
      public long getTimestamp() {
        return result.getTimestamp();
      }
      public Builder setTimestamp(long value) {
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder clearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
      
      // optional string dbgMessage = 2;
      public boolean hasDbgMessage() {
        return result.hasDbgMessage();
      }
      public java.lang.String getDbgMessage() {
        return result.getDbgMessage();
      }
      public Builder setDbgMessage(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasDbgMessage = true;
        result.dbgMessage_ = value;
        return this;
      }
      public Builder clearDbgMessage() {
        result.hasDbgMessage = false;
        result.dbgMessage_ = getDefaultInstance().getDbgMessage();
        return this;
      }
      
      // optional int32 vBat = 3;
      public boolean hasVBat() {
        return result.hasVBat();
      }
      public int getVBat() {
        return result.getVBat();
      }
      public Builder setVBat(int value) {
        result.hasVBat = true;
        result.vBat_ = value;
        return this;
      }
      public Builder clearVBat() {
        result.hasVBat = false;
        result.vBat_ = 0;
        return this;
      }
      
      // optional int32 currentDraw = 4;
      public boolean hasCurrentDraw() {
        return result.hasCurrentDraw();
      }
      public int getCurrentDraw() {
        return result.getCurrentDraw();
      }
      public Builder setCurrentDraw(int value) {
        result.hasCurrentDraw = true;
        result.currentDraw_ = value;
        return this;
      }
      public Builder clearCurrentDraw() {
        result.hasCurrentDraw = false;
        result.currentDraw_ = 0;
        return this;
      }
      
      // optional int32 powerUsed = 5;
      public boolean hasPowerUsed() {
        return result.hasPowerUsed();
      }
      public int getPowerUsed() {
        return result.getPowerUsed();
      }
      public Builder setPowerUsed(int value) {
        result.hasPowerUsed = true;
        result.powerUsed_ = value;
        return this;
      }
      public Builder clearPowerUsed() {
        result.hasPowerUsed = false;
        result.powerUsed_ = 0;
        return this;
      }
      
      // optional int32 batteryTemp = 6;
      public boolean hasBatteryTemp() {
        return result.hasBatteryTemp();
      }
      public int getBatteryTemp() {
        return result.getBatteryTemp();
      }
      public Builder setBatteryTemp(int value) {
        result.hasBatteryTemp = true;
        result.batteryTemp_ = value;
        return this;
      }
      public Builder clearBatteryTemp() {
        result.hasBatteryTemp = false;
        result.batteryTemp_ = 0;
        return this;
      }
      
      // optional int32 vCC = 7;
      public boolean hasVCC() {
        return result.hasVCC();
      }
      public int getVCC() {
        return result.getVCC();
      }
      public Builder setVCC(int value) {
        result.hasVCC = true;
        result.vCC_ = value;
        return this;
      }
      public Builder clearVCC() {
        result.hasVCC = false;
        result.vCC_ = 0;
        return this;
      }
      
      // repeated .cellbots.HALState.SensorValue sensorValue = 8;
      public java.util.List<com.cellbots.CellbotProtos.HALState.SensorValue> getSensorValueList() {
        return java.util.Collections.unmodifiableList(result.sensorValue_);
      }
      public int getSensorValueCount() {
        return result.getSensorValueCount();
      }
      public com.cellbots.CellbotProtos.HALState.SensorValue getSensorValue(int index) {
        return result.getSensorValue(index);
      }
      public Builder setSensorValue(int index, com.cellbots.CellbotProtos.HALState.SensorValue value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.sensorValue_.set(index, value);
        return this;
      }
      public Builder setSensorValue(int index, com.cellbots.CellbotProtos.HALState.SensorValue.Builder builderForValue) {
        result.sensorValue_.set(index, builderForValue.build());
        return this;
      }
      public Builder addSensorValue(com.cellbots.CellbotProtos.HALState.SensorValue value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.sensorValue_.isEmpty()) {
          result.sensorValue_ = new java.util.ArrayList<com.cellbots.CellbotProtos.HALState.SensorValue>();
        }
        result.sensorValue_.add(value);
        return this;
      }
      public Builder addSensorValue(com.cellbots.CellbotProtos.HALState.SensorValue.Builder builderForValue) {
        if (result.sensorValue_.isEmpty()) {
          result.sensorValue_ = new java.util.ArrayList<com.cellbots.CellbotProtos.HALState.SensorValue>();
        }
        result.sensorValue_.add(builderForValue.build());
        return this;
      }
      public Builder addAllSensorValue(
          java.lang.Iterable<? extends com.cellbots.CellbotProtos.HALState.SensorValue> values) {
        if (result.sensorValue_.isEmpty()) {
          result.sensorValue_ = new java.util.ArrayList<com.cellbots.CellbotProtos.HALState.SensorValue>();
        }
        super.addAll(values, result.sensorValue_);
        return this;
      }
      public Builder clearSensorValue() {
        result.sensorValue_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional string botID = 16;
      public boolean hasBotID() {
        return result.hasBotID();
      }
      public java.lang.String getBotID() {
        return result.getBotID();
      }
      public Builder setBotID(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasBotID = true;
        result.botID_ = value;
        return this;
      }
      public Builder clearBotID() {
        result.hasBotID = false;
        result.botID_ = getDefaultInstance().getBotID();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:cellbots.HALState)
    }
    
    static {
      defaultInstance = new HALState(true);
      com.cellbots.CellbotProtos.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:cellbots.HALState)
  }
  
  public static abstract class HALService
      implements com.google.protobuf.Service {
    protected HALService() {}
    
    public interface Interface {
      public abstract void connect(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.HALConnection request,
          com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.HALConnection> done);
      
      public abstract void execute(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.HALCommand request,
          com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.HALState> done);
      
      public abstract void getConnectionStatus(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.HALConnection request,
          com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.HALConnection> done);
      
    }
    
    public static com.google.protobuf.Service newReflectiveService(
        final Interface impl) {
      return new HALService() {
        @Override
        public  void connect(
            com.google.protobuf.RpcController controller,
            com.cellbots.CellbotProtos.HALConnection request,
            com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.HALConnection> done) {
          impl.connect(controller, request, done);
        }
        
        @Override
        public  void execute(
            com.google.protobuf.RpcController controller,
            com.cellbots.CellbotProtos.HALCommand request,
            com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.HALState> done) {
          impl.execute(controller, request, done);
        }
        
        @Override
        public  void getConnectionStatus(
            com.google.protobuf.RpcController controller,
            com.cellbots.CellbotProtos.HALConnection request,
            com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.HALConnection> done) {
          impl.getConnectionStatus(controller, request, done);
        }
        
      };
    }
    
    public static com.google.protobuf.BlockingService
        newReflectiveBlockingService(final BlockingInterface impl) {
      return new com.google.protobuf.BlockingService() {
        public final com.google.protobuf.Descriptors.ServiceDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        
        public final com.google.protobuf.Message callBlockingMethod(
            com.google.protobuf.Descriptors.MethodDescriptor method,
            com.google.protobuf.RpcController controller,
            com.google.protobuf.Message request)
            throws com.google.protobuf.ServiceException {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.callBlockingMethod() given method descriptor for " +
              "wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return impl.connect(controller, (com.cellbots.CellbotProtos.HALConnection)request);
            case 1:
              return impl.execute(controller, (com.cellbots.CellbotProtos.HALCommand)request);
            case 2:
              return impl.getConnectionStatus(controller, (com.cellbots.CellbotProtos.HALConnection)request);
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }
        
        public final com.google.protobuf.Message
            getRequestPrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.getRequestPrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return com.cellbots.CellbotProtos.HALConnection.getDefaultInstance();
            case 1:
              return com.cellbots.CellbotProtos.HALCommand.getDefaultInstance();
            case 2:
              return com.cellbots.CellbotProtos.HALConnection.getDefaultInstance();
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }
        
        public final com.google.protobuf.Message
            getResponsePrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.getResponsePrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return com.cellbots.CellbotProtos.HALConnection.getDefaultInstance();
            case 1:
              return com.cellbots.CellbotProtos.HALState.getDefaultInstance();
            case 2:
              return com.cellbots.CellbotProtos.HALConnection.getDefaultInstance();
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }
        
      };
    }
    
    public abstract void connect(
        com.google.protobuf.RpcController controller,
        com.cellbots.CellbotProtos.HALConnection request,
        com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.HALConnection> done);
    
    public abstract void execute(
        com.google.protobuf.RpcController controller,
        com.cellbots.CellbotProtos.HALCommand request,
        com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.HALState> done);
    
    public abstract void getConnectionStatus(
        com.google.protobuf.RpcController controller,
        com.cellbots.CellbotProtos.HALConnection request,
        com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.HALConnection> done);
    
    public static final
        com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptor() {
      return com.cellbots.CellbotProtos.getDescriptor().getServices().get(0);
    }
    public final com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    
    public final void callMethod(
        com.google.protobuf.Descriptors.MethodDescriptor method,
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Message request,
        com.google.protobuf.RpcCallback<
          com.google.protobuf.Message> done) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.callMethod() given method descriptor for wrong " +
          "service type.");
      }
      switch(method.getIndex()) {
        case 0:
          this.connect(controller, (com.cellbots.CellbotProtos.HALConnection)request,
            com.google.protobuf.RpcUtil.<com.cellbots.CellbotProtos.HALConnection>specializeCallback(
              done));
          return;
        case 1:
          this.execute(controller, (com.cellbots.CellbotProtos.HALCommand)request,
            com.google.protobuf.RpcUtil.<com.cellbots.CellbotProtos.HALState>specializeCallback(
              done));
          return;
        case 2:
          this.getConnectionStatus(controller, (com.cellbots.CellbotProtos.HALConnection)request,
            com.google.protobuf.RpcUtil.<com.cellbots.CellbotProtos.HALConnection>specializeCallback(
              done));
          return;
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }
    
    public final com.google.protobuf.Message
        getRequestPrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.getRequestPrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return com.cellbots.CellbotProtos.HALConnection.getDefaultInstance();
        case 1:
          return com.cellbots.CellbotProtos.HALCommand.getDefaultInstance();
        case 2:
          return com.cellbots.CellbotProtos.HALConnection.getDefaultInstance();
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }
    
    public final com.google.protobuf.Message
        getResponsePrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.getResponsePrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return com.cellbots.CellbotProtos.HALConnection.getDefaultInstance();
        case 1:
          return com.cellbots.CellbotProtos.HALState.getDefaultInstance();
        case 2:
          return com.cellbots.CellbotProtos.HALConnection.getDefaultInstance();
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }
    
    public static Stub newStub(
        com.google.protobuf.RpcChannel channel) {
      return new Stub(channel);
    }
    
    public static final class Stub extends com.cellbots.CellbotProtos.HALService implements Interface {
      private Stub(com.google.protobuf.RpcChannel channel) {
        this.channel = channel;
      }
      
      private final com.google.protobuf.RpcChannel channel;
      
      public com.google.protobuf.RpcChannel getChannel() {
        return channel;
      }
      
      public  void connect(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.HALConnection request,
          com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.HALConnection> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          com.cellbots.CellbotProtos.HALConnection.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.cellbots.CellbotProtos.HALConnection.class,
            com.cellbots.CellbotProtos.HALConnection.getDefaultInstance()));
      }
      
      public  void execute(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.HALCommand request,
          com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.HALState> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(1),
          controller,
          request,
          com.cellbots.CellbotProtos.HALState.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.cellbots.CellbotProtos.HALState.class,
            com.cellbots.CellbotProtos.HALState.getDefaultInstance()));
      }
      
      public  void getConnectionStatus(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.HALConnection request,
          com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.HALConnection> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(2),
          controller,
          request,
          com.cellbots.CellbotProtos.HALConnection.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.cellbots.CellbotProtos.HALConnection.class,
            com.cellbots.CellbotProtos.HALConnection.getDefaultInstance()));
      }
    }
    
    public static BlockingInterface newBlockingStub(
        com.google.protobuf.BlockingRpcChannel channel) {
      return new BlockingStub(channel);
    }
    
    public interface BlockingInterface {
      public com.cellbots.CellbotProtos.HALConnection connect(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.HALConnection request)
          throws com.google.protobuf.ServiceException;
      
      public com.cellbots.CellbotProtos.HALState execute(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.HALCommand request)
          throws com.google.protobuf.ServiceException;
      
      public com.cellbots.CellbotProtos.HALConnection getConnectionStatus(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.HALConnection request)
          throws com.google.protobuf.ServiceException;
    }
    
    private static final class BlockingStub implements BlockingInterface {
      private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
        this.channel = channel;
      }
      
      private final com.google.protobuf.BlockingRpcChannel channel;
      
      public com.cellbots.CellbotProtos.HALConnection connect(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.HALConnection request)
          throws com.google.protobuf.ServiceException {
        return (com.cellbots.CellbotProtos.HALConnection) channel.callBlockingMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          com.cellbots.CellbotProtos.HALConnection.getDefaultInstance());
      }
      
      
      public com.cellbots.CellbotProtos.HALState execute(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.HALCommand request)
          throws com.google.protobuf.ServiceException {
        return (com.cellbots.CellbotProtos.HALState) channel.callBlockingMethod(
          getDescriptor().getMethods().get(1),
          controller,
          request,
          com.cellbots.CellbotProtos.HALState.getDefaultInstance());
      }
      
      
      public com.cellbots.CellbotProtos.HALConnection getConnectionStatus(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.HALConnection request)
          throws com.google.protobuf.ServiceException {
        return (com.cellbots.CellbotProtos.HALConnection) channel.callBlockingMethod(
          getDescriptor().getMethods().get(2),
          controller,
          request,
          com.cellbots.CellbotProtos.HALConnection.getDefaultInstance());
      }
      
    }
  }
  
  public static abstract class MasterControlService
      implements com.google.protobuf.Service {
    protected MasterControlService() {}
    
    public interface Interface {
      public abstract void processControllerEvent(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.ControllerState request,
          com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.PhoneState> done);
      
      public abstract void setVideoOptions(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.AudioVideoFrame request,
          com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.AudioVideoFrame> done);
      
      public abstract void processAVFrame(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.AudioVideoFrame request,
          com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.PhoneState> done);
      
    }
    
    public static com.google.protobuf.Service newReflectiveService(
        final Interface impl) {
      return new MasterControlService() {
        @Override
        public  void processControllerEvent(
            com.google.protobuf.RpcController controller,
            com.cellbots.CellbotProtos.ControllerState request,
            com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.PhoneState> done) {
          impl.processControllerEvent(controller, request, done);
        }
        
        @Override
        public  void setVideoOptions(
            com.google.protobuf.RpcController controller,
            com.cellbots.CellbotProtos.AudioVideoFrame request,
            com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.AudioVideoFrame> done) {
          impl.setVideoOptions(controller, request, done);
        }
        
        @Override
        public  void processAVFrame(
            com.google.protobuf.RpcController controller,
            com.cellbots.CellbotProtos.AudioVideoFrame request,
            com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.PhoneState> done) {
          impl.processAVFrame(controller, request, done);
        }
        
      };
    }
    
    public static com.google.protobuf.BlockingService
        newReflectiveBlockingService(final BlockingInterface impl) {
      return new com.google.protobuf.BlockingService() {
        public final com.google.protobuf.Descriptors.ServiceDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        
        public final com.google.protobuf.Message callBlockingMethod(
            com.google.protobuf.Descriptors.MethodDescriptor method,
            com.google.protobuf.RpcController controller,
            com.google.protobuf.Message request)
            throws com.google.protobuf.ServiceException {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.callBlockingMethod() given method descriptor for " +
              "wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return impl.processControllerEvent(controller, (com.cellbots.CellbotProtos.ControllerState)request);
            case 1:
              return impl.setVideoOptions(controller, (com.cellbots.CellbotProtos.AudioVideoFrame)request);
            case 2:
              return impl.processAVFrame(controller, (com.cellbots.CellbotProtos.AudioVideoFrame)request);
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }
        
        public final com.google.protobuf.Message
            getRequestPrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.getRequestPrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return com.cellbots.CellbotProtos.ControllerState.getDefaultInstance();
            case 1:
              return com.cellbots.CellbotProtos.AudioVideoFrame.getDefaultInstance();
            case 2:
              return com.cellbots.CellbotProtos.AudioVideoFrame.getDefaultInstance();
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }
        
        public final com.google.protobuf.Message
            getResponsePrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.getResponsePrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return com.cellbots.CellbotProtos.PhoneState.getDefaultInstance();
            case 1:
              return com.cellbots.CellbotProtos.AudioVideoFrame.getDefaultInstance();
            case 2:
              return com.cellbots.CellbotProtos.PhoneState.getDefaultInstance();
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }
        
      };
    }
    
    public abstract void processControllerEvent(
        com.google.protobuf.RpcController controller,
        com.cellbots.CellbotProtos.ControllerState request,
        com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.PhoneState> done);
    
    public abstract void setVideoOptions(
        com.google.protobuf.RpcController controller,
        com.cellbots.CellbotProtos.AudioVideoFrame request,
        com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.AudioVideoFrame> done);
    
    public abstract void processAVFrame(
        com.google.protobuf.RpcController controller,
        com.cellbots.CellbotProtos.AudioVideoFrame request,
        com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.PhoneState> done);
    
    public static final
        com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptor() {
      return com.cellbots.CellbotProtos.getDescriptor().getServices().get(1);
    }
    public final com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    
    public final void callMethod(
        com.google.protobuf.Descriptors.MethodDescriptor method,
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Message request,
        com.google.protobuf.RpcCallback<
          com.google.protobuf.Message> done) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.callMethod() given method descriptor for wrong " +
          "service type.");
      }
      switch(method.getIndex()) {
        case 0:
          this.processControllerEvent(controller, (com.cellbots.CellbotProtos.ControllerState)request,
            com.google.protobuf.RpcUtil.<com.cellbots.CellbotProtos.PhoneState>specializeCallback(
              done));
          return;
        case 1:
          this.setVideoOptions(controller, (com.cellbots.CellbotProtos.AudioVideoFrame)request,
            com.google.protobuf.RpcUtil.<com.cellbots.CellbotProtos.AudioVideoFrame>specializeCallback(
              done));
          return;
        case 2:
          this.processAVFrame(controller, (com.cellbots.CellbotProtos.AudioVideoFrame)request,
            com.google.protobuf.RpcUtil.<com.cellbots.CellbotProtos.PhoneState>specializeCallback(
              done));
          return;
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }
    
    public final com.google.protobuf.Message
        getRequestPrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.getRequestPrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return com.cellbots.CellbotProtos.ControllerState.getDefaultInstance();
        case 1:
          return com.cellbots.CellbotProtos.AudioVideoFrame.getDefaultInstance();
        case 2:
          return com.cellbots.CellbotProtos.AudioVideoFrame.getDefaultInstance();
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }
    
    public final com.google.protobuf.Message
        getResponsePrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.getResponsePrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return com.cellbots.CellbotProtos.PhoneState.getDefaultInstance();
        case 1:
          return com.cellbots.CellbotProtos.AudioVideoFrame.getDefaultInstance();
        case 2:
          return com.cellbots.CellbotProtos.PhoneState.getDefaultInstance();
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }
    
    public static Stub newStub(
        com.google.protobuf.RpcChannel channel) {
      return new Stub(channel);
    }
    
    public static final class Stub extends com.cellbots.CellbotProtos.MasterControlService implements Interface {
      private Stub(com.google.protobuf.RpcChannel channel) {
        this.channel = channel;
      }
      
      private final com.google.protobuf.RpcChannel channel;
      
      public com.google.protobuf.RpcChannel getChannel() {
        return channel;
      }
      
      public  void processControllerEvent(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.ControllerState request,
          com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.PhoneState> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          com.cellbots.CellbotProtos.PhoneState.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.cellbots.CellbotProtos.PhoneState.class,
            com.cellbots.CellbotProtos.PhoneState.getDefaultInstance()));
      }
      
      public  void setVideoOptions(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.AudioVideoFrame request,
          com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.AudioVideoFrame> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(1),
          controller,
          request,
          com.cellbots.CellbotProtos.AudioVideoFrame.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.cellbots.CellbotProtos.AudioVideoFrame.class,
            com.cellbots.CellbotProtos.AudioVideoFrame.getDefaultInstance()));
      }
      
      public  void processAVFrame(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.AudioVideoFrame request,
          com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.PhoneState> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(2),
          controller,
          request,
          com.cellbots.CellbotProtos.PhoneState.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.cellbots.CellbotProtos.PhoneState.class,
            com.cellbots.CellbotProtos.PhoneState.getDefaultInstance()));
      }
    }
    
    public static BlockingInterface newBlockingStub(
        com.google.protobuf.BlockingRpcChannel channel) {
      return new BlockingStub(channel);
    }
    
    public interface BlockingInterface {
      public com.cellbots.CellbotProtos.PhoneState processControllerEvent(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.ControllerState request)
          throws com.google.protobuf.ServiceException;
      
      public com.cellbots.CellbotProtos.AudioVideoFrame setVideoOptions(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.AudioVideoFrame request)
          throws com.google.protobuf.ServiceException;
      
      public com.cellbots.CellbotProtos.PhoneState processAVFrame(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.AudioVideoFrame request)
          throws com.google.protobuf.ServiceException;
    }
    
    private static final class BlockingStub implements BlockingInterface {
      private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
        this.channel = channel;
      }
      
      private final com.google.protobuf.BlockingRpcChannel channel;
      
      public com.cellbots.CellbotProtos.PhoneState processControllerEvent(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.ControllerState request)
          throws com.google.protobuf.ServiceException {
        return (com.cellbots.CellbotProtos.PhoneState) channel.callBlockingMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          com.cellbots.CellbotProtos.PhoneState.getDefaultInstance());
      }
      
      
      public com.cellbots.CellbotProtos.AudioVideoFrame setVideoOptions(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.AudioVideoFrame request)
          throws com.google.protobuf.ServiceException {
        return (com.cellbots.CellbotProtos.AudioVideoFrame) channel.callBlockingMethod(
          getDescriptor().getMethods().get(1),
          controller,
          request,
          com.cellbots.CellbotProtos.AudioVideoFrame.getDefaultInstance());
      }
      
      
      public com.cellbots.CellbotProtos.PhoneState processAVFrame(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.AudioVideoFrame request)
          throws com.google.protobuf.ServiceException {
        return (com.cellbots.CellbotProtos.PhoneState) channel.callBlockingMethod(
          getDescriptor().getMethods().get(2),
          controller,
          request,
          com.cellbots.CellbotProtos.PhoneState.getDefaultInstance());
      }
      
    }
  }
  
  public static abstract class HIDService
      implements com.google.protobuf.Service {
    protected HIDService() {}
    
    public interface Interface {
      public abstract void displayAVFrame(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.AudioVideoFrame request,
          com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.ControllerState> done);
      
      public abstract void displayPhoneState(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.PhoneState request,
          com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.ControllerState> done);
      
      public abstract void displayHALSensorData(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.HALState request,
          com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.ControllerState> done);
      
    }
    
    public static com.google.protobuf.Service newReflectiveService(
        final Interface impl) {
      return new HIDService() {
        @Override
        public  void displayAVFrame(
            com.google.protobuf.RpcController controller,
            com.cellbots.CellbotProtos.AudioVideoFrame request,
            com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.ControllerState> done) {
          impl.displayAVFrame(controller, request, done);
        }
        
        @Override
        public  void displayPhoneState(
            com.google.protobuf.RpcController controller,
            com.cellbots.CellbotProtos.PhoneState request,
            com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.ControllerState> done) {
          impl.displayPhoneState(controller, request, done);
        }
        
        @Override
        public  void displayHALSensorData(
            com.google.protobuf.RpcController controller,
            com.cellbots.CellbotProtos.HALState request,
            com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.ControllerState> done) {
          impl.displayHALSensorData(controller, request, done);
        }
        
      };
    }
    
    public static com.google.protobuf.BlockingService
        newReflectiveBlockingService(final BlockingInterface impl) {
      return new com.google.protobuf.BlockingService() {
        public final com.google.protobuf.Descriptors.ServiceDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        
        public final com.google.protobuf.Message callBlockingMethod(
            com.google.protobuf.Descriptors.MethodDescriptor method,
            com.google.protobuf.RpcController controller,
            com.google.protobuf.Message request)
            throws com.google.protobuf.ServiceException {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.callBlockingMethod() given method descriptor for " +
              "wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return impl.displayAVFrame(controller, (com.cellbots.CellbotProtos.AudioVideoFrame)request);
            case 1:
              return impl.displayPhoneState(controller, (com.cellbots.CellbotProtos.PhoneState)request);
            case 2:
              return impl.displayHALSensorData(controller, (com.cellbots.CellbotProtos.HALState)request);
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }
        
        public final com.google.protobuf.Message
            getRequestPrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.getRequestPrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return com.cellbots.CellbotProtos.AudioVideoFrame.getDefaultInstance();
            case 1:
              return com.cellbots.CellbotProtos.PhoneState.getDefaultInstance();
            case 2:
              return com.cellbots.CellbotProtos.HALState.getDefaultInstance();
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }
        
        public final com.google.protobuf.Message
            getResponsePrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.getResponsePrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return com.cellbots.CellbotProtos.ControllerState.getDefaultInstance();
            case 1:
              return com.cellbots.CellbotProtos.ControllerState.getDefaultInstance();
            case 2:
              return com.cellbots.CellbotProtos.ControllerState.getDefaultInstance();
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }
        
      };
    }
    
    public abstract void displayAVFrame(
        com.google.protobuf.RpcController controller,
        com.cellbots.CellbotProtos.AudioVideoFrame request,
        com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.ControllerState> done);
    
    public abstract void displayPhoneState(
        com.google.protobuf.RpcController controller,
        com.cellbots.CellbotProtos.PhoneState request,
        com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.ControllerState> done);
    
    public abstract void displayHALSensorData(
        com.google.protobuf.RpcController controller,
        com.cellbots.CellbotProtos.HALState request,
        com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.ControllerState> done);
    
    public static final
        com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptor() {
      return com.cellbots.CellbotProtos.getDescriptor().getServices().get(2);
    }
    public final com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    
    public final void callMethod(
        com.google.protobuf.Descriptors.MethodDescriptor method,
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Message request,
        com.google.protobuf.RpcCallback<
          com.google.protobuf.Message> done) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.callMethod() given method descriptor for wrong " +
          "service type.");
      }
      switch(method.getIndex()) {
        case 0:
          this.displayAVFrame(controller, (com.cellbots.CellbotProtos.AudioVideoFrame)request,
            com.google.protobuf.RpcUtil.<com.cellbots.CellbotProtos.ControllerState>specializeCallback(
              done));
          return;
        case 1:
          this.displayPhoneState(controller, (com.cellbots.CellbotProtos.PhoneState)request,
            com.google.protobuf.RpcUtil.<com.cellbots.CellbotProtos.ControllerState>specializeCallback(
              done));
          return;
        case 2:
          this.displayHALSensorData(controller, (com.cellbots.CellbotProtos.HALState)request,
            com.google.protobuf.RpcUtil.<com.cellbots.CellbotProtos.ControllerState>specializeCallback(
              done));
          return;
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }
    
    public final com.google.protobuf.Message
        getRequestPrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.getRequestPrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return com.cellbots.CellbotProtos.AudioVideoFrame.getDefaultInstance();
        case 1:
          return com.cellbots.CellbotProtos.PhoneState.getDefaultInstance();
        case 2:
          return com.cellbots.CellbotProtos.HALState.getDefaultInstance();
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }
    
    public final com.google.protobuf.Message
        getResponsePrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.getResponsePrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return com.cellbots.CellbotProtos.ControllerState.getDefaultInstance();
        case 1:
          return com.cellbots.CellbotProtos.ControllerState.getDefaultInstance();
        case 2:
          return com.cellbots.CellbotProtos.ControllerState.getDefaultInstance();
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }
    
    public static Stub newStub(
        com.google.protobuf.RpcChannel channel) {
      return new Stub(channel);
    }
    
    public static final class Stub extends com.cellbots.CellbotProtos.HIDService implements Interface {
      private Stub(com.google.protobuf.RpcChannel channel) {
        this.channel = channel;
      }
      
      private final com.google.protobuf.RpcChannel channel;
      
      public com.google.protobuf.RpcChannel getChannel() {
        return channel;
      }
      
      public  void displayAVFrame(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.AudioVideoFrame request,
          com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.ControllerState> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          com.cellbots.CellbotProtos.ControllerState.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.cellbots.CellbotProtos.ControllerState.class,
            com.cellbots.CellbotProtos.ControllerState.getDefaultInstance()));
      }
      
      public  void displayPhoneState(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.PhoneState request,
          com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.ControllerState> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(1),
          controller,
          request,
          com.cellbots.CellbotProtos.ControllerState.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.cellbots.CellbotProtos.ControllerState.class,
            com.cellbots.CellbotProtos.ControllerState.getDefaultInstance()));
      }
      
      public  void displayHALSensorData(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.HALState request,
          com.google.protobuf.RpcCallback<com.cellbots.CellbotProtos.ControllerState> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(2),
          controller,
          request,
          com.cellbots.CellbotProtos.ControllerState.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.cellbots.CellbotProtos.ControllerState.class,
            com.cellbots.CellbotProtos.ControllerState.getDefaultInstance()));
      }
    }
    
    public static BlockingInterface newBlockingStub(
        com.google.protobuf.BlockingRpcChannel channel) {
      return new BlockingStub(channel);
    }
    
    public interface BlockingInterface {
      public com.cellbots.CellbotProtos.ControllerState displayAVFrame(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.AudioVideoFrame request)
          throws com.google.protobuf.ServiceException;
      
      public com.cellbots.CellbotProtos.ControllerState displayPhoneState(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.PhoneState request)
          throws com.google.protobuf.ServiceException;
      
      public com.cellbots.CellbotProtos.ControllerState displayHALSensorData(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.HALState request)
          throws com.google.protobuf.ServiceException;
    }
    
    private static final class BlockingStub implements BlockingInterface {
      private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
        this.channel = channel;
      }
      
      private final com.google.protobuf.BlockingRpcChannel channel;
      
      public com.cellbots.CellbotProtos.ControllerState displayAVFrame(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.AudioVideoFrame request)
          throws com.google.protobuf.ServiceException {
        return (com.cellbots.CellbotProtos.ControllerState) channel.callBlockingMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          com.cellbots.CellbotProtos.ControllerState.getDefaultInstance());
      }
      
      
      public com.cellbots.CellbotProtos.ControllerState displayPhoneState(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.PhoneState request)
          throws com.google.protobuf.ServiceException {
        return (com.cellbots.CellbotProtos.ControllerState) channel.callBlockingMethod(
          getDescriptor().getMethods().get(1),
          controller,
          request,
          com.cellbots.CellbotProtos.ControllerState.getDefaultInstance());
      }
      
      
      public com.cellbots.CellbotProtos.ControllerState displayHALSensorData(
          com.google.protobuf.RpcController controller,
          com.cellbots.CellbotProtos.HALState request)
          throws com.google.protobuf.ServiceException {
        return (com.cellbots.CellbotProtos.ControllerState) channel.callBlockingMethod(
          getDescriptor().getMethods().get(2),
          controller,
          request,
          com.cellbots.CellbotProtos.ControllerState.getDefaultInstance());
      }
      
    }
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_cellbots_AudioVideoFrame_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cellbots_AudioVideoFrame_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_cellbots_HALConnection_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cellbots_HALConnection_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_cellbots_PhoneState_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cellbots_PhoneState_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_cellbots_PhoneState_Compass_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cellbots_PhoneState_Compass_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_cellbots_PhoneState_Accelerometer_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cellbots_PhoneState_Accelerometer_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_cellbots_PhoneState_Orientation_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cellbots_PhoneState_Orientation_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_cellbots_PhoneState_WIFI_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cellbots_PhoneState_WIFI_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_cellbots_PhoneState_Cellular_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cellbots_PhoneState_Cellular_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_cellbots_PhoneState_Location_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cellbots_PhoneState_Location_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_cellbots_ControllerState_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cellbots_ControllerState_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_cellbots_ControllerState_KeyEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cellbots_ControllerState_KeyEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_cellbots_ControllerState_StickEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cellbots_ControllerState_StickEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_cellbots_HALCommand_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cellbots_HALCommand_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_cellbots_HALCommand_Servo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cellbots_HALCommand_Servo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_cellbots_HALCommand_Motor_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cellbots_HALCommand_Motor_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_cellbots_HALCommand_PWM_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cellbots_HALCommand_PWM_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_cellbots_HALCommand_Relay_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cellbots_HALCommand_Relay_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_cellbots_HALState_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cellbots_HALState_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_cellbots_HALState_SensorValue_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cellbots_HALState_SensorValue_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\016Cellbots.proto\022\010cellbots\"\354\002\n\017AudioVide" +
      "oFrame\022\021\n\ttimestamp\030\001 \001(\003\022\014\n\004data\030\002 \001(\014\022" +
      "\023\n\013frameNumber\030\003 \001(\003\022\020\n\010sourceID\030\004 \001(\t\022\024" +
      "\n\014whiteBalance\030\005 \001(\005\022\021\n\tzoomLevel\030\006 \001(\005\022" +
      "\030\n\020compressionLevel\030\007 \001(\005\022\017\n\007widthPx\030\010 \001" +
      "(\005\022\020\n\010heightPx\030\t \001(\005\022\020\n\010timeSpan\030\n \001(\005\022\017" +
      "\n\007lightOn\030\013 \001(\010\0224\n\010encoding\030\014 \001(\0162\".cell" +
      "bots.AudioVideoFrame.Encoding\022\r\n\005botID\030\020" +
      " \001(\t\"C\n\010Encoding\022\010\n\004JPEG\020\001\022\010\n\004H263\020\002\022\010\n\004" +
      "H264\020\003\022\007\n\003MP3\020\004\022\007\n\003AAC\020\005\022\007\n\003WAV\020\006\"\307\006\n\rHA",
      "LConnection\022\017\n\007address\030\001 \001(\t\022\014\n\004name\030\002 \001" +
      "(\t\022\014\n\004uuid\030\003 \001(\t\022\020\n\010baudRate\030\005 \001(\005\022\022\n\nre" +
      "adBuffer\030\006 \001(\014\022\023\n\013writeBuffer\030\007 \001(\014\022\021\n\td" +
      "elimiter\030\010 \001(\014\022\014\n\004rssi\030\t \001(\005\022H\n\023connecti" +
      "onDirection\030\013 \001(\0162+.cellbots.HALConnecti" +
      "on.ConnectionDirection\022>\n\016connectionType" +
      "\030\014 \001(\0162&.cellbots.HALConnection.Connecti" +
      "onType\022@\n\017connectionState\030\r \001(\0162\'.cellbo" +
      "ts.HALConnection.ConnectionState\022D\n\023prev" +
      "ConnectionState\030\016 \001(\0162\'.cellbots.HALConn",
      "ection.ConnectionState\022\021\n\ttimestamp\030\017 \001(" +
      "\003\022\r\n\005botID\030\020 \001(\t\022\016\n\006dbgMsg\030\021 \001(\t\"V\n\023Conn" +
      "ectionDirection\022\r\n\tREAD_ONLY\020\001\022\016\n\nWRITE_" +
      "ONLY\020\002\022\017\n\013HALF_DUPLEX\020\003\022\017\n\013FULL_DUPLEX\020\004" +
      "\"\225\001\n\016ConnectionType\022\023\n\017HARDWARE_SERIAL\020\001" +
      "\022\024\n\020BLUETOOTH_SERIAL\020\002\022\020\n\014AUDIO_SERIAL\020\003" +
      "\022\r\n\tAUDIO_PWM\020\004\022\r\n\tAUDIO_PPM\020\005\022\014\n\010AUDIO_" +
      "AM\020\006\022\014\n\010AUDIO_FM\020\007\022\014\n\010INFRARED\020\010\"y\n\017Conn" +
      "ectionState\022\020\n\014DISCONNECTED\020\001\022\n\n\006PAIRED\020" +
      "\002\022\013\n\007BONDING\020\003\022\n\n\006BONDED\020\004\022\013\n\007TALKING\020\005\022",
      "\013\n\007WAITING\020\007\022\n\n\006PAUSED\020\010\022\t\n\005ERROR\020\t\"\267\t\n\n" +
      "PhoneState\022\021\n\ttimestamp\030\001 \002(\003\022\r\n\005botID\030\002" +
      " \001(\t\022\016\n\006dbgMsg\030\003 \001(\t\022-\n\007compass\030\004 \001(\0132\034." +
      "cellbots.PhoneState.Compass\0229\n\raccelerom" +
      "eter\030\005 \001(\0132\".cellbots.PhoneState.Acceler" +
      "ometer\0225\n\013orientation\030\006 \001(\0132 .cellbots.P" +
      "honeState.Orientation\022\031\n\021phoneBatteryLev" +
      "el\030\007 \001(\002\022\030\n\020phoneBatteryTemp\030\010 \001(\005\022\022\n\nli" +
      "ghtLevel\030\t \001(\002\022\021\n\tvibrating\030\n \001(\010\022\033\n\023not" +
      "ificationLightOn\030\013 \001(\010\022\035\n\025notificationLi",
      "ghtFreq\030\014 \001(\005\022\036\n\026notificationLightColor\030" +
      "\r \001(\005\022\021\n\tproximity\030\016 \001(\005\022\030\n\020screenBright" +
      "ness\030\017 \001(\005\022\'\n\004wifi\030\020 \001(\0132\031.cellbots.Phon" +
      "eState.WIFI\022/\n\010cellular\030\021 \001(\0132\035.cellbots" +
      ".PhoneState.Cellular\022/\n\010location\030\022 \001(\0132\035" +
      ".cellbots.PhoneState.Location\022\022\n\ngpsEnab" +
      "led\030\023 \001(\010\022.\n\rHALConnection\030\024 \001(\0132\027.cellb" +
      "ots.HALConnection\032*\n\007Compass\022\t\n\001x\030\001 \001(\002\022" +
      "\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\0320\n\rAccelerometer\022\t" +
      "\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\032;\n\013Orien",
      "tation\022\017\n\007azimuth\030\006 \001(\002\022\r\n\005pitch\030\007 \001(\002\022\014" +
      "\n\004roll\030\010 \001(\002\032\203\001\n\004WIFI\022\017\n\007enabled\030\001 \001(\010\022\021" +
      "\n\tconnected\030\002 \001(\010\022\020\n\010strength\030\003 \001(\005\022\014\n\004k" +
      "bps\030\004 \001(\005\022\014\n\004ssid\030\005 \001(\005\022\n\n\002ip\030\006 \001(\005\022\016\n\006c" +
      "hanel\030\007 \001(\005\022\r\n\005adhoc\030\010 \001(\010\032k\n\010Cellular\022\017" +
      "\n\007enabled\030\001 \001(\010\022\021\n\tconnected\030\002 \001(\010\022\020\n\010st" +
      "rength\030\003 \001(\005\022\014\n\004kbps\030\004 \001(\005\022\n\n\002ip\030\005 \001(\005\022\017" +
      "\n\007roaming\030\006 \001(\010\032\223\001\n\010Location\022\020\n\010accuracy" +
      "\030\001 \001(\002\022\020\n\010altitude\030\002 \001(\001\022\017\n\007bearing\030\003 \001(" +
      "\002\022\020\n\010latitude\030\004 \002(\001\022\021\n\tlongitude\030\005 \002(\001\022\020",
      "\n\010provider\030\006 \001(\t\022\r\n\005speed\030\007 \001(\002\022\014\n\004time\030" +
      "\010 \001(\003\"\230\004\n\017ControllerState\022\021\n\ttimestamp\030\001" +
      " \002(\003\0224\n\010keyEvent\030\002 \003(\0132\".cellbots.Contro" +
      "llerState.KeyEvent\0228\n\nstickEvent\030\003 \003(\0132$" +
      ".cellbots.ControllerState.StickEvent\022\022\n\n" +
      "txtCommand\030\004 \001(\t\022\024\n\014controllerID\030\005 \001(\t\022\r" +
      "\n\005botID\030\020 \001(\t\032P\n\010KeyEvent\022\017\n\007keyCode\030\001 \002" +
      "(\t\022\017\n\007keyDown\030\002 \001(\010\022\r\n\005keyUp\030\003 \001(\010\022\023\n\013ke" +
      "yPressure\030\004 \001(\002\032\366\001\n\nStickEvent\022A\n\tstickT" +
      "ype\030\001 \002(\0162..cellbots.ControllerState.Sti",
      "ckEvent.StickType\022\023\n\013stickNumber\030\002 \002(\005\022\t" +
      "\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\t\n\001z\030\005 \001(\002\"o\n\tStick" +
      "Type\022\n\n\006ANALOG\020\001\022\017\n\013ORIENTATION\020\002\022\020\n\014LIN" +
      "EAR_ACCEL\020\003\022\021\n\rANGULAR_ACCEL\020\004\022\n\n\006SLIDER" +
      "\020\005\022\t\n\005WHEEL\020\006\022\t\n\005MOUSE\020\007\"\365\003\n\nHALCommand\022" +
      "\021\n\ttimestamp\030\001 \001(\003\022\022\n\ntxtCommand\030\002 \001(\t\022\017" +
      "\n\007allStop\030\003 \001(\010\022)\n\005servo\030\004 \003(\0132\032.cellbot" +
      "s.HALCommand.Servo\022)\n\005motor\030\005 \003(\0132\032.cell" +
      "bots.HALCommand.Motor\022%\n\003pwm\030\006 \003(\0132\030.cel" +
      "lbots.HALCommand.PWM\022)\n\005relay\030\007 \003(\0132\032.ce",
      "llbots.HALCommand.Relay\022\r\n\005botID\030\020 \001(\t\032]" +
      "\n\005Servo\022\n\n\002ID\030\001 \002(\t\022\r\n\005speed\030\003 \001(\005\022\026\n\016ta" +
      "rgetPosition\030\004 \001(\005\022\016\n\006torque\030\005 \001(\005\022\021\n\tfr" +
      "eeWheel\030\006 \001(\010\032D\n\005Motor\022\n\n\002ID\030\001 \002(\t\022\r\n\005st" +
      "eps\030\002 \001(\005\022\r\n\005speed\030\003 \001(\005\022\021\n\tfreeWheel\030\004 " +
      "\001(\010\0322\n\003PWM\022\n\n\002ID\030\001 \002(\t\022\021\n\tfrequency\030\002 \002(" +
      "\005\022\014\n\004duty\030\003 \002(\005\032\037\n\005Relay\022\n\n\002ID\030\001 \002(\t\022\n\n\002" +
      "on\030\002 \002(\010\"\211\005\n\010HALState\022\021\n\ttimestamp\030\001 \002(\003" +
      "\022\022\n\ndbgMessage\030\002 \001(\t\022\014\n\004vBat\030\003 \001(\005\022\023\n\013cu" +
      "rrentDraw\030\004 \001(\005\022\021\n\tpowerUsed\030\005 \001(\005\022\023\n\013ba",
      "tteryTemp\030\006 \001(\005\022\013\n\003vCC\030\007 \001(\005\0223\n\013sensorVa" +
      "lue\030\010 \003(\0132\036.cellbots.HALState.SensorValu" +
      "e\022\r\n\005botID\030\020 \001(\t\032\271\003\n\013SensorValue\022\n\n\002ID\030\001" +
      " \002(\t\022\022\n\noutOfRange\030\002 \001(\010\022\r\n\005value\030\003 \001(\005\022" +
      "\021\n\tprevValue\030\004 \001(\005\022\031\n\021minSenseableValue\030" +
      "\005 \001(\005\022\031\n\021maxSenseableValue\030\006 \001(\005\022?\n\013sens" +
      "orUnits\030\007 \001(\0162*.cellbots.HALState.Sensor" +
      "Value.SensorUnits\"\360\001\n\013SensorUnits\022\r\n\tMIL" +
      "IVOLTS\020\001\022\014\n\010MILIAMPS\020\002\022\017\n\013DEG_CELISUS\020\003\022" +
      "\017\n\013CENTIMETERS\020\004\022\t\n\005COUNT\020\005\022\007\n\003LUX\020\010\022\021\n\r",
      "SATURATON_RED\020\t\022\023\n\017SATURATON_GREEN\020\n\022\022\n\016" +
      "SATURATON_BLUE\020\013\022\013\n\007TIME_MS\020\014\022\006\n\002HZ\020\r\022\022\n" +
      "\016PULSE_WIDTH_MS\020\r\022\023\n\017RESISTNACE_OHMS\020\016\022\024" +
      "\n\020PRESSURE_MILIBAR\020\0172\307\001\n\nHALService\022;\n\007c" +
      "onnect\022\027.cellbots.HALConnection\032\027.cellbo" +
      "ts.HALConnection\0223\n\007execute\022\024.cellbots.H" +
      "ALCommand\032\022.cellbots.HALState\022G\n\023getConn" +
      "ectionStatus\022\027.cellbots.HALConnection\032\027." +
      "cellbots.HALConnection2\355\001\n\024MasterControl" +
      "Service\022I\n\026processControllerEvent\022\031.cell",
      "bots.ControllerState\032\024.cellbots.PhoneSta" +
      "te\022G\n\017setVideoOptions\022\031.cellbots.AudioVi" +
      "deoFrame\032\031.cellbots.AudioVideoFrame\022A\n\016p" +
      "rocessAVFrame\022\031.cellbots.AudioVideoFrame" +
      "\032\024.cellbots.PhoneState2\341\001\n\nHIDService\022F\n" +
      "\016displayAVFrame\022\031.cellbots.AudioVideoFra" +
      "me\032\031.cellbots.ControllerState\022D\n\021display" +
      "PhoneState\022\024.cellbots.PhoneState\032\031.cellb" +
      "ots.ControllerState\022E\n\024displayHALSensorD" +
      "ata\022\022.cellbots.HALState\032\031.cellbots.Contr",
      "ollerStateB\035\n\014com.cellbotsB\rCellbotProto" +
      "s"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_cellbots_AudioVideoFrame_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_cellbots_AudioVideoFrame_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_cellbots_AudioVideoFrame_descriptor,
              new java.lang.String[] { "Timestamp", "Data", "FrameNumber", "SourceID", "WhiteBalance", "ZoomLevel", "CompressionLevel", "WidthPx", "HeightPx", "TimeSpan", "LightOn", "Encoding", "BotID", },
              com.cellbots.CellbotProtos.AudioVideoFrame.class,
              com.cellbots.CellbotProtos.AudioVideoFrame.Builder.class);
          internal_static_cellbots_HALConnection_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_cellbots_HALConnection_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_cellbots_HALConnection_descriptor,
              new java.lang.String[] { "Address", "Name", "Uuid", "BaudRate", "ReadBuffer", "WriteBuffer", "Delimiter", "Rssi", "ConnectionDirection", "ConnectionType", "ConnectionState", "PrevConnectionState", "Timestamp", "BotID", "DbgMsg", },
              com.cellbots.CellbotProtos.HALConnection.class,
              com.cellbots.CellbotProtos.HALConnection.Builder.class);
          internal_static_cellbots_PhoneState_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_cellbots_PhoneState_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_cellbots_PhoneState_descriptor,
              new java.lang.String[] { "Timestamp", "BotID", "DbgMsg", "Compass", "Accelerometer", "Orientation", "PhoneBatteryLevel", "PhoneBatteryTemp", "LightLevel", "Vibrating", "NotificationLightOn", "NotificationLightFreq", "NotificationLightColor", "Proximity", "ScreenBrightness", "Wifi", "Cellular", "Location", "GpsEnabled", "HALConnection", },
              com.cellbots.CellbotProtos.PhoneState.class,
              com.cellbots.CellbotProtos.PhoneState.Builder.class);
          internal_static_cellbots_PhoneState_Compass_descriptor =
            internal_static_cellbots_PhoneState_descriptor.getNestedTypes().get(0);
          internal_static_cellbots_PhoneState_Compass_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_cellbots_PhoneState_Compass_descriptor,
              new java.lang.String[] { "X", "Y", "Z", },
              com.cellbots.CellbotProtos.PhoneState.Compass.class,
              com.cellbots.CellbotProtos.PhoneState.Compass.Builder.class);
          internal_static_cellbots_PhoneState_Accelerometer_descriptor =
            internal_static_cellbots_PhoneState_descriptor.getNestedTypes().get(1);
          internal_static_cellbots_PhoneState_Accelerometer_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_cellbots_PhoneState_Accelerometer_descriptor,
              new java.lang.String[] { "X", "Y", "Z", },
              com.cellbots.CellbotProtos.PhoneState.Accelerometer.class,
              com.cellbots.CellbotProtos.PhoneState.Accelerometer.Builder.class);
          internal_static_cellbots_PhoneState_Orientation_descriptor =
            internal_static_cellbots_PhoneState_descriptor.getNestedTypes().get(2);
          internal_static_cellbots_PhoneState_Orientation_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_cellbots_PhoneState_Orientation_descriptor,
              new java.lang.String[] { "Azimuth", "Pitch", "Roll", },
              com.cellbots.CellbotProtos.PhoneState.Orientation.class,
              com.cellbots.CellbotProtos.PhoneState.Orientation.Builder.class);
          internal_static_cellbots_PhoneState_WIFI_descriptor =
            internal_static_cellbots_PhoneState_descriptor.getNestedTypes().get(3);
          internal_static_cellbots_PhoneState_WIFI_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_cellbots_PhoneState_WIFI_descriptor,
              new java.lang.String[] { "Enabled", "Connected", "Strength", "Kbps", "Ssid", "Ip", "Chanel", "Adhoc", },
              com.cellbots.CellbotProtos.PhoneState.WIFI.class,
              com.cellbots.CellbotProtos.PhoneState.WIFI.Builder.class);
          internal_static_cellbots_PhoneState_Cellular_descriptor =
            internal_static_cellbots_PhoneState_descriptor.getNestedTypes().get(4);
          internal_static_cellbots_PhoneState_Cellular_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_cellbots_PhoneState_Cellular_descriptor,
              new java.lang.String[] { "Enabled", "Connected", "Strength", "Kbps", "Ip", "Roaming", },
              com.cellbots.CellbotProtos.PhoneState.Cellular.class,
              com.cellbots.CellbotProtos.PhoneState.Cellular.Builder.class);
          internal_static_cellbots_PhoneState_Location_descriptor =
            internal_static_cellbots_PhoneState_descriptor.getNestedTypes().get(5);
          internal_static_cellbots_PhoneState_Location_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_cellbots_PhoneState_Location_descriptor,
              new java.lang.String[] { "Accuracy", "Altitude", "Bearing", "Latitude", "Longitude", "Provider", "Speed", "Time", },
              com.cellbots.CellbotProtos.PhoneState.Location.class,
              com.cellbots.CellbotProtos.PhoneState.Location.Builder.class);
          internal_static_cellbots_ControllerState_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_cellbots_ControllerState_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_cellbots_ControllerState_descriptor,
              new java.lang.String[] { "Timestamp", "KeyEvent", "StickEvent", "TxtCommand", "ControllerID", "BotID", },
              com.cellbots.CellbotProtos.ControllerState.class,
              com.cellbots.CellbotProtos.ControllerState.Builder.class);
          internal_static_cellbots_ControllerState_KeyEvent_descriptor =
            internal_static_cellbots_ControllerState_descriptor.getNestedTypes().get(0);
          internal_static_cellbots_ControllerState_KeyEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_cellbots_ControllerState_KeyEvent_descriptor,
              new java.lang.String[] { "KeyCode", "KeyDown", "KeyUp", "KeyPressure", },
              com.cellbots.CellbotProtos.ControllerState.KeyEvent.class,
              com.cellbots.CellbotProtos.ControllerState.KeyEvent.Builder.class);
          internal_static_cellbots_ControllerState_StickEvent_descriptor =
            internal_static_cellbots_ControllerState_descriptor.getNestedTypes().get(1);
          internal_static_cellbots_ControllerState_StickEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_cellbots_ControllerState_StickEvent_descriptor,
              new java.lang.String[] { "StickType", "StickNumber", "X", "Y", "Z", },
              com.cellbots.CellbotProtos.ControllerState.StickEvent.class,
              com.cellbots.CellbotProtos.ControllerState.StickEvent.Builder.class);
          internal_static_cellbots_HALCommand_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_cellbots_HALCommand_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_cellbots_HALCommand_descriptor,
              new java.lang.String[] { "Timestamp", "TxtCommand", "AllStop", "Servo", "Motor", "Pwm", "Relay", "BotID", },
              com.cellbots.CellbotProtos.HALCommand.class,
              com.cellbots.CellbotProtos.HALCommand.Builder.class);
          internal_static_cellbots_HALCommand_Servo_descriptor =
            internal_static_cellbots_HALCommand_descriptor.getNestedTypes().get(0);
          internal_static_cellbots_HALCommand_Servo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_cellbots_HALCommand_Servo_descriptor,
              new java.lang.String[] { "ID", "Speed", "TargetPosition", "Torque", "FreeWheel", },
              com.cellbots.CellbotProtos.HALCommand.Servo.class,
              com.cellbots.CellbotProtos.HALCommand.Servo.Builder.class);
          internal_static_cellbots_HALCommand_Motor_descriptor =
            internal_static_cellbots_HALCommand_descriptor.getNestedTypes().get(1);
          internal_static_cellbots_HALCommand_Motor_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_cellbots_HALCommand_Motor_descriptor,
              new java.lang.String[] { "ID", "Steps", "Speed", "FreeWheel", },
              com.cellbots.CellbotProtos.HALCommand.Motor.class,
              com.cellbots.CellbotProtos.HALCommand.Motor.Builder.class);
          internal_static_cellbots_HALCommand_PWM_descriptor =
            internal_static_cellbots_HALCommand_descriptor.getNestedTypes().get(2);
          internal_static_cellbots_HALCommand_PWM_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_cellbots_HALCommand_PWM_descriptor,
              new java.lang.String[] { "ID", "Frequency", "Duty", },
              com.cellbots.CellbotProtos.HALCommand.PWM.class,
              com.cellbots.CellbotProtos.HALCommand.PWM.Builder.class);
          internal_static_cellbots_HALCommand_Relay_descriptor =
            internal_static_cellbots_HALCommand_descriptor.getNestedTypes().get(3);
          internal_static_cellbots_HALCommand_Relay_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_cellbots_HALCommand_Relay_descriptor,
              new java.lang.String[] { "ID", "On", },
              com.cellbots.CellbotProtos.HALCommand.Relay.class,
              com.cellbots.CellbotProtos.HALCommand.Relay.Builder.class);
          internal_static_cellbots_HALState_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_cellbots_HALState_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_cellbots_HALState_descriptor,
              new java.lang.String[] { "Timestamp", "DbgMessage", "VBat", "CurrentDraw", "PowerUsed", "BatteryTemp", "VCC", "SensorValue", "BotID", },
              com.cellbots.CellbotProtos.HALState.class,
              com.cellbots.CellbotProtos.HALState.Builder.class);
          internal_static_cellbots_HALState_SensorValue_descriptor =
            internal_static_cellbots_HALState_descriptor.getNestedTypes().get(0);
          internal_static_cellbots_HALState_SensorValue_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_cellbots_HALState_SensorValue_descriptor,
              new java.lang.String[] { "ID", "OutOfRange", "Value", "PrevValue", "MinSenseableValue", "MaxSenseableValue", "SensorUnits", },
              com.cellbots.CellbotProtos.HALState.SensorValue.class,
              com.cellbots.CellbotProtos.HALState.SensorValue.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
