// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from Cellbots.proto

package com.cellbots;

import java.io.IOException;

import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class SchemaCellbotProtos
{

    public static final class AudioVideoFrame
    {
        public static final MessageSchema WRITE = new MessageSchema();
        public static final BuilderSchema MERGE = new BuilderSchema();
        
        public static class MessageSchema implements Schema<com.cellbots.CellbotProtos.AudioVideoFrame>
        {
            public void writeTo(Output output, com.cellbots.CellbotProtos.AudioVideoFrame message) throws IOException
            {
                if(message.hasTimestamp())
                    output.writeInt64(1, message.getTimestamp(), false);
                if(message.hasData())
                    output.writeByteArray(2, message.getData().toByteArray(), false);

                if(message.hasFrameNumber())
                    output.writeInt64(3, message.getFrameNumber(), false);
                if(message.hasSourceID())
                    output.writeString(4, message.getSourceID(), false);
                if(message.hasWhiteBalance())
                    output.writeInt32(5, message.getWhiteBalance(), false);
                if(message.hasZoomLevel())
                    output.writeInt32(6, message.getZoomLevel(), false);
                if(message.hasCompressionLevel())
                    output.writeInt32(7, message.getCompressionLevel(), false);
                if(message.hasWidthPx())
                    output.writeInt32(8, message.getWidthPx(), false);
                if(message.hasHeightPx())
                    output.writeInt32(9, message.getHeightPx(), false);
                if(message.hasTimeSpan())
                    output.writeInt32(10, message.getTimeSpan(), false);
                if(message.hasLightOn())
                    output.writeBool(11, message.getLightOn(), false);
                if(message.hasEncoding())
                    output.writeEnum(12, message.getEncoding().getNumber(), false);
                if(message.hasBotID())
                    output.writeString(16, message.getBotID(), false);
            }
            public boolean isInitialized(com.cellbots.CellbotProtos.AudioVideoFrame message)
            {
                return message.isInitialized();
            }
            public String getFieldName(int number)
            {
                return AudioVideoFrame.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return AudioVideoFrame.getFieldNumber(name);
            }
            public Class<com.cellbots.CellbotProtos.AudioVideoFrame> typeClass()
            {
                return com.cellbots.CellbotProtos.AudioVideoFrame.class;
            }
            public String messageName()
            {
                return com.cellbots.CellbotProtos.AudioVideoFrame.class.getSimpleName();
            }
            public String messageFullName()
            {
                return com.cellbots.CellbotProtos.AudioVideoFrame.class.getName();
            }
            //unused
            public void mergeFrom(Input input, com.cellbots.CellbotProtos.AudioVideoFrame message) throws IOException {}
            public com.cellbots.CellbotProtos.AudioVideoFrame newMessage() { return null; }
        }
        public static class BuilderSchema implements Schema<com.cellbots.CellbotProtos.AudioVideoFrame.Builder>
        {
            public void mergeFrom(Input input, com.cellbots.CellbotProtos.AudioVideoFrame.Builder builder) throws IOException
            {
                while(true)
                {
                    int number = input.readFieldNumber(this);
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setTimestamp(input.readInt64());
                            break;
                        case 2:
                            builder.setData(com.google.protobuf.ByteString.copyFrom(input.readByteArray()));
                            break;
                        case 3:
                            builder.setFrameNumber(input.readInt64());
                            break;
                        case 4:
                            builder.setSourceID(input.readString());
                            break;
                        case 5:
                            builder.setWhiteBalance(input.readInt32());
                            break;
                        case 6:
                            builder.setZoomLevel(input.readInt32());
                            break;
                        case 7:
                            builder.setCompressionLevel(input.readInt32());
                            break;
                        case 8:
                            builder.setWidthPx(input.readInt32());
                            break;
                        case 9:
                            builder.setHeightPx(input.readInt32());
                            break;
                        case 10:
                            builder.setTimeSpan(input.readInt32());
                            break;
                        case 11:
                            builder.setLightOn(input.readBool());
                            break;
                        case 12:
                            builder.setEncoding(com.cellbots.CellbotProtos.AudioVideoFrame.Encoding.valueOf(input.readEnum()));
                            break;
                        case 16:
                            builder.setBotID(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(com.cellbots.CellbotProtos.AudioVideoFrame.Builder builder)
            {
                return builder.isInitialized();
            }
            public com.cellbots.CellbotProtos.AudioVideoFrame.Builder newMessage()
            {
                return com.cellbots.CellbotProtos.AudioVideoFrame.newBuilder();
            }
            public String getFieldName(int number)
            {
                return AudioVideoFrame.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return AudioVideoFrame.getFieldNumber(name);
            }
            public Class<com.cellbots.CellbotProtos.AudioVideoFrame.Builder> typeClass()
            {
                return com.cellbots.CellbotProtos.AudioVideoFrame.Builder.class;
            }
            public String messageName()
            {
                return com.cellbots.CellbotProtos.AudioVideoFrame.class.getSimpleName();
            }
            public String messageFullName()
            {
                return com.cellbots.CellbotProtos.AudioVideoFrame.class.getName();
            }
            //unused
            public void writeTo(Output output, com.cellbots.CellbotProtos.AudioVideoFrame.Builder builder) throws IOException {}
        }
        public static String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "timestamp";
                case 2: return "data";
                case 3: return "frameNumber";
                case 4: return "sourceID";
                case 5: return "whiteBalance";
                case 6: return "zoomLevel";
                case 7: return "compressionLevel";
                case 8: return "widthPx";
                case 9: return "heightPx";
                case 10: return "timeSpan";
                case 11: return "lightOn";
                case 12: return "encoding";
                case 16: return "botID";
                default: return null;
            }
        }
        public static int getFieldNumber(String name)
        {
            Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("timestamp", 1);
            fieldMap.put("data", 2);
            fieldMap.put("frameNumber", 3);
            fieldMap.put("sourceID", 4);
            fieldMap.put("whiteBalance", 5);
            fieldMap.put("zoomLevel", 6);
            fieldMap.put("compressionLevel", 7);
            fieldMap.put("widthPx", 8);
            fieldMap.put("heightPx", 9);
            fieldMap.put("timeSpan", 10);
            fieldMap.put("lightOn", 11);
            fieldMap.put("encoding", 12);
            fieldMap.put("botID", 16);
        }
    }

    public static final class HALConnection
    {
        public static final MessageSchema WRITE = new MessageSchema();
        public static final BuilderSchema MERGE = new BuilderSchema();
        
        public static class MessageSchema implements Schema<com.cellbots.CellbotProtos.HALConnection>
        {
            public void writeTo(Output output, com.cellbots.CellbotProtos.HALConnection message) throws IOException
            {
                if(message.hasAddress())
                    output.writeString(1, message.getAddress(), false);
                if(message.hasName())
                    output.writeString(2, message.getName(), false);
                if(message.hasUuid())
                    output.writeString(3, message.getUuid(), false);
                if(message.hasBaudRate())
                    output.writeInt32(5, message.getBaudRate(), false);
                if(message.hasReadBuffer())
                    output.writeByteArray(6, message.getReadBuffer().toByteArray(), false);

                if(message.hasWriteBuffer())
                    output.writeByteArray(7, message.getWriteBuffer().toByteArray(), false);

                if(message.hasDelimiter())
                    output.writeByteArray(8, message.getDelimiter().toByteArray(), false);

                if(message.hasRssi())
                    output.writeInt32(9, message.getRssi(), false);
                if(message.hasConnectionDirection())
                    output.writeEnum(11, message.getConnectionDirection().getNumber(), false);
                if(message.hasConnectionType())
                    output.writeEnum(12, message.getConnectionType().getNumber(), false);
                if(message.hasConnectionState())
                    output.writeEnum(13, message.getConnectionState().getNumber(), false);
                if(message.hasPrevConnectionState())
                    output.writeEnum(14, message.getPrevConnectionState().getNumber(), false);
                if(message.hasTimestamp())
                    output.writeInt64(15, message.getTimestamp(), false);
                if(message.hasBotID())
                    output.writeString(16, message.getBotID(), false);
                if(message.hasDbgMsg())
                    output.writeString(17, message.getDbgMsg(), false);
            }
            public boolean isInitialized(com.cellbots.CellbotProtos.HALConnection message)
            {
                return message.isInitialized();
            }
            public String getFieldName(int number)
            {
                return HALConnection.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return HALConnection.getFieldNumber(name);
            }
            public Class<com.cellbots.CellbotProtos.HALConnection> typeClass()
            {
                return com.cellbots.CellbotProtos.HALConnection.class;
            }
            public String messageName()
            {
                return com.cellbots.CellbotProtos.HALConnection.class.getSimpleName();
            }
            public String messageFullName()
            {
                return com.cellbots.CellbotProtos.HALConnection.class.getName();
            }
            //unused
            public void mergeFrom(Input input, com.cellbots.CellbotProtos.HALConnection message) throws IOException {}
            public com.cellbots.CellbotProtos.HALConnection newMessage() { return null; }
        }
        public static class BuilderSchema implements Schema<com.cellbots.CellbotProtos.HALConnection.Builder>
        {
            public void mergeFrom(Input input, com.cellbots.CellbotProtos.HALConnection.Builder builder) throws IOException
            {
                while(true)
                {
                    int number = input.readFieldNumber(this);
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setAddress(input.readString());
                            break;
                        case 2:
                            builder.setName(input.readString());
                            break;
                        case 3:
                            builder.setUuid(input.readString());
                            break;
                        case 5:
                            builder.setBaudRate(input.readInt32());
                            break;
                        case 6:
                            builder.setReadBuffer(com.google.protobuf.ByteString.copyFrom(input.readByteArray()));
                            break;
                        case 7:
                            builder.setWriteBuffer(com.google.protobuf.ByteString.copyFrom(input.readByteArray()));
                            break;
                        case 8:
                            builder.setDelimiter(com.google.protobuf.ByteString.copyFrom(input.readByteArray()));
                            break;
                        case 9:
                            builder.setRssi(input.readInt32());
                            break;
                        case 11:
                            builder.setConnectionDirection(com.cellbots.CellbotProtos.HALConnection.ConnectionDirection.valueOf(input.readEnum()));
                            break;
                        case 12:
                            builder.setConnectionType(com.cellbots.CellbotProtos.HALConnection.ConnectionType.valueOf(input.readEnum()));
                            break;
                        case 13:
                            builder.setConnectionState(com.cellbots.CellbotProtos.HALConnection.ConnectionState.valueOf(input.readEnum()));
                            break;
                        case 14:
                            builder.setPrevConnectionState(com.cellbots.CellbotProtos.HALConnection.ConnectionState.valueOf(input.readEnum()));
                            break;
                        case 15:
                            builder.setTimestamp(input.readInt64());
                            break;
                        case 16:
                            builder.setBotID(input.readString());
                            break;
                        case 17:
                            builder.setDbgMsg(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(com.cellbots.CellbotProtos.HALConnection.Builder builder)
            {
                return builder.isInitialized();
            }
            public com.cellbots.CellbotProtos.HALConnection.Builder newMessage()
            {
                return com.cellbots.CellbotProtos.HALConnection.newBuilder();
            }
            public String getFieldName(int number)
            {
                return HALConnection.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return HALConnection.getFieldNumber(name);
            }
            public Class<com.cellbots.CellbotProtos.HALConnection.Builder> typeClass()
            {
                return com.cellbots.CellbotProtos.HALConnection.Builder.class;
            }
            public String messageName()
            {
                return com.cellbots.CellbotProtos.HALConnection.class.getSimpleName();
            }
            public String messageFullName()
            {
                return com.cellbots.CellbotProtos.HALConnection.class.getName();
            }
            //unused
            public void writeTo(Output output, com.cellbots.CellbotProtos.HALConnection.Builder builder) throws IOException {}
        }
        public static String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "address";
                case 2: return "name";
                case 3: return "uuid";
                case 5: return "baudRate";
                case 6: return "readBuffer";
                case 7: return "writeBuffer";
                case 8: return "delimiter";
                case 9: return "rssi";
                case 11: return "connectionDirection";
                case 12: return "connectionType";
                case 13: return "connectionState";
                case 14: return "prevConnectionState";
                case 15: return "timestamp";
                case 16: return "botID";
                case 17: return "dbgMsg";
                default: return null;
            }
        }
        public static int getFieldNumber(String name)
        {
            Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("address", 1);
            fieldMap.put("name", 2);
            fieldMap.put("uuid", 3);
            fieldMap.put("baudRate", 5);
            fieldMap.put("readBuffer", 6);
            fieldMap.put("writeBuffer", 7);
            fieldMap.put("delimiter", 8);
            fieldMap.put("rssi", 9);
            fieldMap.put("connectionDirection", 11);
            fieldMap.put("connectionType", 12);
            fieldMap.put("connectionState", 13);
            fieldMap.put("prevConnectionState", 14);
            fieldMap.put("timestamp", 15);
            fieldMap.put("botID", 16);
            fieldMap.put("dbgMsg", 17);
        }
    }

    public static final class PhoneState
    {

        public static final class Compass
        {
            public static final MessageSchema WRITE = new MessageSchema();
            public static final BuilderSchema MERGE = new BuilderSchema();
            
            public static class MessageSchema implements Schema<com.cellbots.CellbotProtos.PhoneState.Compass>
            {
                public void writeTo(Output output, com.cellbots.CellbotProtos.PhoneState.Compass message) throws IOException
                {
                    if(message.hasX())
                        output.writeFloat(1, message.getX(), false);
                    if(message.hasY())
                        output.writeFloat(2, message.getY(), false);
                    if(message.hasZ())
                        output.writeFloat(3, message.getZ(), false);
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.PhoneState.Compass message)
                {
                    return message.isInitialized();
                }
                public String getFieldName(int number)
                {
                    return Compass.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Compass.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.PhoneState.Compass> typeClass()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Compass.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Compass.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Compass.class.getName();
                }
                //unused
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.PhoneState.Compass message) throws IOException {}
                public com.cellbots.CellbotProtos.PhoneState.Compass newMessage() { return null; }
            }
            public static class BuilderSchema implements Schema<com.cellbots.CellbotProtos.PhoneState.Compass.Builder>
            {
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.PhoneState.Compass.Builder builder) throws IOException
                {
                    while(true)
                    {
                        int number = input.readFieldNumber(this);
                        switch(number)
                        {
                            case 0:
                                return;
                            case 1:
                                builder.setX(input.readFloat());
                                break;
                            case 2:
                                builder.setY(input.readFloat());
                                break;
                            case 3:
                                builder.setZ(input.readFloat());
                                break;
                            default:
                                input.handleUnknownField(number, this);
                        }
                    }
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.PhoneState.Compass.Builder builder)
                {
                    return builder.isInitialized();
                }
                public com.cellbots.CellbotProtos.PhoneState.Compass.Builder newMessage()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Compass.newBuilder();
                }
                public String getFieldName(int number)
                {
                    return Compass.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Compass.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.PhoneState.Compass.Builder> typeClass()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Compass.Builder.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Compass.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Compass.class.getName();
                }
                //unused
                public void writeTo(Output output, com.cellbots.CellbotProtos.PhoneState.Compass.Builder builder) throws IOException {}
            }
            public static String getFieldName(int number)
            {
                switch(number)
                {
                    case 1: return "x";
                    case 2: return "y";
                    case 3: return "z";
                    default: return null;
                }
            }
            public static int getFieldNumber(String name)
            {
                Integer number = fieldMap.get(name);
                return number == null ? 0 : number.intValue();
            }
            private static final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
            {
                fieldMap.put("x", 1);
                fieldMap.put("y", 2);
                fieldMap.put("z", 3);
            }
        }

        public static final class Accelerometer
        {
            public static final MessageSchema WRITE = new MessageSchema();
            public static final BuilderSchema MERGE = new BuilderSchema();
            
            public static class MessageSchema implements Schema<com.cellbots.CellbotProtos.PhoneState.Accelerometer>
            {
                public void writeTo(Output output, com.cellbots.CellbotProtos.PhoneState.Accelerometer message) throws IOException
                {
                    if(message.hasX())
                        output.writeFloat(1, message.getX(), false);
                    if(message.hasY())
                        output.writeFloat(2, message.getY(), false);
                    if(message.hasZ())
                        output.writeFloat(3, message.getZ(), false);
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.PhoneState.Accelerometer message)
                {
                    return message.isInitialized();
                }
                public String getFieldName(int number)
                {
                    return Accelerometer.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Accelerometer.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.PhoneState.Accelerometer> typeClass()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Accelerometer.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Accelerometer.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Accelerometer.class.getName();
                }
                //unused
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.PhoneState.Accelerometer message) throws IOException {}
                public com.cellbots.CellbotProtos.PhoneState.Accelerometer newMessage() { return null; }
            }
            public static class BuilderSchema implements Schema<com.cellbots.CellbotProtos.PhoneState.Accelerometer.Builder>
            {
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.PhoneState.Accelerometer.Builder builder) throws IOException
                {
                    while(true)
                    {
                        int number = input.readFieldNumber(this);
                        switch(number)
                        {
                            case 0:
                                return;
                            case 1:
                                builder.setX(input.readFloat());
                                break;
                            case 2:
                                builder.setY(input.readFloat());
                                break;
                            case 3:
                                builder.setZ(input.readFloat());
                                break;
                            default:
                                input.handleUnknownField(number, this);
                        }
                    }
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.PhoneState.Accelerometer.Builder builder)
                {
                    return builder.isInitialized();
                }
                public com.cellbots.CellbotProtos.PhoneState.Accelerometer.Builder newMessage()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Accelerometer.newBuilder();
                }
                public String getFieldName(int number)
                {
                    return Accelerometer.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Accelerometer.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.PhoneState.Accelerometer.Builder> typeClass()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Accelerometer.Builder.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Accelerometer.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Accelerometer.class.getName();
                }
                //unused
                public void writeTo(Output output, com.cellbots.CellbotProtos.PhoneState.Accelerometer.Builder builder) throws IOException {}
            }
            public static String getFieldName(int number)
            {
                switch(number)
                {
                    case 1: return "x";
                    case 2: return "y";
                    case 3: return "z";
                    default: return null;
                }
            }
            public static int getFieldNumber(String name)
            {
                Integer number = fieldMap.get(name);
                return number == null ? 0 : number.intValue();
            }
            private static final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
            {
                fieldMap.put("x", 1);
                fieldMap.put("y", 2);
                fieldMap.put("z", 3);
            }
        }

        public static final class Orientation
        {
            public static final MessageSchema WRITE = new MessageSchema();
            public static final BuilderSchema MERGE = new BuilderSchema();
            
            public static class MessageSchema implements Schema<com.cellbots.CellbotProtos.PhoneState.Orientation>
            {
                public void writeTo(Output output, com.cellbots.CellbotProtos.PhoneState.Orientation message) throws IOException
                {
                    if(message.hasAzimuth())
                        output.writeFloat(6, message.getAzimuth(), false);
                    if(message.hasPitch())
                        output.writeFloat(7, message.getPitch(), false);
                    if(message.hasRoll())
                        output.writeFloat(8, message.getRoll(), false);
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.PhoneState.Orientation message)
                {
                    return message.isInitialized();
                }
                public String getFieldName(int number)
                {
                    return Orientation.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Orientation.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.PhoneState.Orientation> typeClass()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Orientation.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Orientation.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Orientation.class.getName();
                }
                //unused
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.PhoneState.Orientation message) throws IOException {}
                public com.cellbots.CellbotProtos.PhoneState.Orientation newMessage() { return null; }
            }
            public static class BuilderSchema implements Schema<com.cellbots.CellbotProtos.PhoneState.Orientation.Builder>
            {
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.PhoneState.Orientation.Builder builder) throws IOException
                {
                    while(true)
                    {
                        int number = input.readFieldNumber(this);
                        switch(number)
                        {
                            case 0:
                                return;
                            case 6:
                                builder.setAzimuth(input.readFloat());
                                break;
                            case 7:
                                builder.setPitch(input.readFloat());
                                break;
                            case 8:
                                builder.setRoll(input.readFloat());
                                break;
                            default:
                                input.handleUnknownField(number, this);
                        }
                    }
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.PhoneState.Orientation.Builder builder)
                {
                    return builder.isInitialized();
                }
                public com.cellbots.CellbotProtos.PhoneState.Orientation.Builder newMessage()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Orientation.newBuilder();
                }
                public String getFieldName(int number)
                {
                    return Orientation.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Orientation.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.PhoneState.Orientation.Builder> typeClass()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Orientation.Builder.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Orientation.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Orientation.class.getName();
                }
                //unused
                public void writeTo(Output output, com.cellbots.CellbotProtos.PhoneState.Orientation.Builder builder) throws IOException {}
            }
            public static String getFieldName(int number)
            {
                switch(number)
                {
                    case 6: return "azimuth";
                    case 7: return "pitch";
                    case 8: return "roll";
                    default: return null;
                }
            }
            public static int getFieldNumber(String name)
            {
                Integer number = fieldMap.get(name);
                return number == null ? 0 : number.intValue();
            }
            private static final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
            {
                fieldMap.put("azimuth", 6);
                fieldMap.put("pitch", 7);
                fieldMap.put("roll", 8);
            }
        }

        public static final class WIFI
        {
            public static final MessageSchema WRITE = new MessageSchema();
            public static final BuilderSchema MERGE = new BuilderSchema();
            
            public static class MessageSchema implements Schema<com.cellbots.CellbotProtos.PhoneState.WIFI>
            {
                public void writeTo(Output output, com.cellbots.CellbotProtos.PhoneState.WIFI message) throws IOException
                {
                    if(message.hasEnabled())
                        output.writeBool(1, message.getEnabled(), false);
                    if(message.hasConnected())
                        output.writeBool(2, message.getConnected(), false);
                    if(message.hasStrength())
                        output.writeInt32(3, message.getStrength(), false);
                    if(message.hasKbps())
                        output.writeInt32(4, message.getKbps(), false);
                    if(message.hasSsid())
                        output.writeInt32(5, message.getSsid(), false);
                    if(message.hasIp())
                        output.writeInt32(6, message.getIp(), false);
                    if(message.hasChanel())
                        output.writeInt32(7, message.getChanel(), false);
                    if(message.hasAdhoc())
                        output.writeBool(8, message.getAdhoc(), false);
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.PhoneState.WIFI message)
                {
                    return message.isInitialized();
                }
                public String getFieldName(int number)
                {
                    return WIFI.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return WIFI.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.PhoneState.WIFI> typeClass()
                {
                    return com.cellbots.CellbotProtos.PhoneState.WIFI.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.WIFI.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.WIFI.class.getName();
                }
                //unused
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.PhoneState.WIFI message) throws IOException {}
                public com.cellbots.CellbotProtos.PhoneState.WIFI newMessage() { return null; }
            }
            public static class BuilderSchema implements Schema<com.cellbots.CellbotProtos.PhoneState.WIFI.Builder>
            {
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.PhoneState.WIFI.Builder builder) throws IOException
                {
                    while(true)
                    {
                        int number = input.readFieldNumber(this);
                        switch(number)
                        {
                            case 0:
                                return;
                            case 1:
                                builder.setEnabled(input.readBool());
                                break;
                            case 2:
                                builder.setConnected(input.readBool());
                                break;
                            case 3:
                                builder.setStrength(input.readInt32());
                                break;
                            case 4:
                                builder.setKbps(input.readInt32());
                                break;
                            case 5:
                                builder.setSsid(input.readInt32());
                                break;
                            case 6:
                                builder.setIp(input.readInt32());
                                break;
                            case 7:
                                builder.setChanel(input.readInt32());
                                break;
                            case 8:
                                builder.setAdhoc(input.readBool());
                                break;
                            default:
                                input.handleUnknownField(number, this);
                        }
                    }
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.PhoneState.WIFI.Builder builder)
                {
                    return builder.isInitialized();
                }
                public com.cellbots.CellbotProtos.PhoneState.WIFI.Builder newMessage()
                {
                    return com.cellbots.CellbotProtos.PhoneState.WIFI.newBuilder();
                }
                public String getFieldName(int number)
                {
                    return WIFI.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return WIFI.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.PhoneState.WIFI.Builder> typeClass()
                {
                    return com.cellbots.CellbotProtos.PhoneState.WIFI.Builder.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.WIFI.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.WIFI.class.getName();
                }
                //unused
                public void writeTo(Output output, com.cellbots.CellbotProtos.PhoneState.WIFI.Builder builder) throws IOException {}
            }
            public static String getFieldName(int number)
            {
                switch(number)
                {
                    case 1: return "enabled";
                    case 2: return "connected";
                    case 3: return "strength";
                    case 4: return "kbps";
                    case 5: return "ssid";
                    case 6: return "ip";
                    case 7: return "chanel";
                    case 8: return "adhoc";
                    default: return null;
                }
            }
            public static int getFieldNumber(String name)
            {
                Integer number = fieldMap.get(name);
                return number == null ? 0 : number.intValue();
            }
            private static final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
            {
                fieldMap.put("enabled", 1);
                fieldMap.put("connected", 2);
                fieldMap.put("strength", 3);
                fieldMap.put("kbps", 4);
                fieldMap.put("ssid", 5);
                fieldMap.put("ip", 6);
                fieldMap.put("chanel", 7);
                fieldMap.put("adhoc", 8);
            }
        }

        public static final class Cellular
        {
            public static final MessageSchema WRITE = new MessageSchema();
            public static final BuilderSchema MERGE = new BuilderSchema();
            
            public static class MessageSchema implements Schema<com.cellbots.CellbotProtos.PhoneState.Cellular>
            {
                public void writeTo(Output output, com.cellbots.CellbotProtos.PhoneState.Cellular message) throws IOException
                {
                    if(message.hasEnabled())
                        output.writeBool(1, message.getEnabled(), false);
                    if(message.hasConnected())
                        output.writeBool(2, message.getConnected(), false);
                    if(message.hasStrength())
                        output.writeInt32(3, message.getStrength(), false);
                    if(message.hasKbps())
                        output.writeInt32(4, message.getKbps(), false);
                    if(message.hasIp())
                        output.writeInt32(5, message.getIp(), false);
                    if(message.hasRoaming())
                        output.writeBool(6, message.getRoaming(), false);
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.PhoneState.Cellular message)
                {
                    return message.isInitialized();
                }
                public String getFieldName(int number)
                {
                    return Cellular.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Cellular.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.PhoneState.Cellular> typeClass()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Cellular.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Cellular.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Cellular.class.getName();
                }
                //unused
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.PhoneState.Cellular message) throws IOException {}
                public com.cellbots.CellbotProtos.PhoneState.Cellular newMessage() { return null; }
            }
            public static class BuilderSchema implements Schema<com.cellbots.CellbotProtos.PhoneState.Cellular.Builder>
            {
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.PhoneState.Cellular.Builder builder) throws IOException
                {
                    while(true)
                    {
                        int number = input.readFieldNumber(this);
                        switch(number)
                        {
                            case 0:
                                return;
                            case 1:
                                builder.setEnabled(input.readBool());
                                break;
                            case 2:
                                builder.setConnected(input.readBool());
                                break;
                            case 3:
                                builder.setStrength(input.readInt32());
                                break;
                            case 4:
                                builder.setKbps(input.readInt32());
                                break;
                            case 5:
                                builder.setIp(input.readInt32());
                                break;
                            case 6:
                                builder.setRoaming(input.readBool());
                                break;
                            default:
                                input.handleUnknownField(number, this);
                        }
                    }
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.PhoneState.Cellular.Builder builder)
                {
                    return builder.isInitialized();
                }
                public com.cellbots.CellbotProtos.PhoneState.Cellular.Builder newMessage()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Cellular.newBuilder();
                }
                public String getFieldName(int number)
                {
                    return Cellular.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Cellular.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.PhoneState.Cellular.Builder> typeClass()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Cellular.Builder.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Cellular.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Cellular.class.getName();
                }
                //unused
                public void writeTo(Output output, com.cellbots.CellbotProtos.PhoneState.Cellular.Builder builder) throws IOException {}
            }
            public static String getFieldName(int number)
            {
                switch(number)
                {
                    case 1: return "enabled";
                    case 2: return "connected";
                    case 3: return "strength";
                    case 4: return "kbps";
                    case 5: return "ip";
                    case 6: return "roaming";
                    default: return null;
                }
            }
            public static int getFieldNumber(String name)
            {
                Integer number = fieldMap.get(name);
                return number == null ? 0 : number.intValue();
            }
            private static final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
            {
                fieldMap.put("enabled", 1);
                fieldMap.put("connected", 2);
                fieldMap.put("strength", 3);
                fieldMap.put("kbps", 4);
                fieldMap.put("ip", 5);
                fieldMap.put("roaming", 6);
            }
        }

        public static final class Location
        {
            public static final MessageSchema WRITE = new MessageSchema();
            public static final BuilderSchema MERGE = new BuilderSchema();
            
            public static class MessageSchema implements Schema<com.cellbots.CellbotProtos.PhoneState.Location>
            {
                public void writeTo(Output output, com.cellbots.CellbotProtos.PhoneState.Location message) throws IOException
                {
                    if(message.hasAccuracy())
                        output.writeFloat(1, message.getAccuracy(), false);
                    if(message.hasAltitude())
                        output.writeDouble(2, message.getAltitude(), false);
                    if(message.hasBearing())
                        output.writeFloat(3, message.getBearing(), false);
                    if(message.hasLatitude())
                        output.writeDouble(4, message.getLatitude(), false);
                    if(message.hasLongitude())
                        output.writeDouble(5, message.getLongitude(), false);
                    if(message.hasProvider())
                        output.writeString(6, message.getProvider(), false);
                    if(message.hasSpeed())
                        output.writeFloat(7, message.getSpeed(), false);
                    if(message.hasTime())
                        output.writeInt64(8, message.getTime(), false);
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.PhoneState.Location message)
                {
                    return message.isInitialized();
                }
                public String getFieldName(int number)
                {
                    return Location.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Location.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.PhoneState.Location> typeClass()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Location.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Location.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Location.class.getName();
                }
                //unused
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.PhoneState.Location message) throws IOException {}
                public com.cellbots.CellbotProtos.PhoneState.Location newMessage() { return null; }
            }
            public static class BuilderSchema implements Schema<com.cellbots.CellbotProtos.PhoneState.Location.Builder>
            {
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.PhoneState.Location.Builder builder) throws IOException
                {
                    while(true)
                    {
                        int number = input.readFieldNumber(this);
                        switch(number)
                        {
                            case 0:
                                return;
                            case 1:
                                builder.setAccuracy(input.readFloat());
                                break;
                            case 2:
                                builder.setAltitude(input.readDouble());
                                break;
                            case 3:
                                builder.setBearing(input.readFloat());
                                break;
                            case 4:
                                builder.setLatitude(input.readDouble());
                                break;
                            case 5:
                                builder.setLongitude(input.readDouble());
                                break;
                            case 6:
                                builder.setProvider(input.readString());
                                break;
                            case 7:
                                builder.setSpeed(input.readFloat());
                                break;
                            case 8:
                                builder.setTime(input.readInt64());
                                break;
                            default:
                                input.handleUnknownField(number, this);
                        }
                    }
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.PhoneState.Location.Builder builder)
                {
                    return builder.isInitialized();
                }
                public com.cellbots.CellbotProtos.PhoneState.Location.Builder newMessage()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Location.newBuilder();
                }
                public String getFieldName(int number)
                {
                    return Location.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Location.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.PhoneState.Location.Builder> typeClass()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Location.Builder.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Location.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.PhoneState.Location.class.getName();
                }
                //unused
                public void writeTo(Output output, com.cellbots.CellbotProtos.PhoneState.Location.Builder builder) throws IOException {}
            }
            public static String getFieldName(int number)
            {
                switch(number)
                {
                    case 1: return "accuracy";
                    case 2: return "altitude";
                    case 3: return "bearing";
                    case 4: return "latitude";
                    case 5: return "longitude";
                    case 6: return "provider";
                    case 7: return "speed";
                    case 8: return "time";
                    default: return null;
                }
            }
            public static int getFieldNumber(String name)
            {
                Integer number = fieldMap.get(name);
                return number == null ? 0 : number.intValue();
            }
            private static final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
            {
                fieldMap.put("accuracy", 1);
                fieldMap.put("altitude", 2);
                fieldMap.put("bearing", 3);
                fieldMap.put("latitude", 4);
                fieldMap.put("longitude", 5);
                fieldMap.put("provider", 6);
                fieldMap.put("speed", 7);
                fieldMap.put("time", 8);
            }
        }

        public static final MessageSchema WRITE = new MessageSchema();
        public static final BuilderSchema MERGE = new BuilderSchema();
        
        public static class MessageSchema implements Schema<com.cellbots.CellbotProtos.PhoneState>
        {
            public void writeTo(Output output, com.cellbots.CellbotProtos.PhoneState message) throws IOException
            {
                if(message.hasTimestamp())
                    output.writeInt64(1, message.getTimestamp(), false);
                if(message.hasBotID())
                    output.writeString(2, message.getBotID(), false);
                if(message.hasDbgMsg())
                    output.writeString(3, message.getDbgMsg(), false);
                if(message.hasCompass())
                    output.writeObject(4, message.getCompass(), com.cellbots.SchemaCellbotProtos.PhoneState.Compass.WRITE, false);

                if(message.hasAccelerometer())
                    output.writeObject(5, message.getAccelerometer(), com.cellbots.SchemaCellbotProtos.PhoneState.Accelerometer.WRITE, false);

                if(message.hasOrientation())
                    output.writeObject(6, message.getOrientation(), com.cellbots.SchemaCellbotProtos.PhoneState.Orientation.WRITE, false);

                if(message.hasPhoneBatteryLevel())
                    output.writeFloat(7, message.getPhoneBatteryLevel(), false);
                if(message.hasPhoneBatteryTemp())
                    output.writeInt32(8, message.getPhoneBatteryTemp(), false);
                if(message.hasLightLevel())
                    output.writeFloat(9, message.getLightLevel(), false);
                if(message.hasVibrating())
                    output.writeBool(10, message.getVibrating(), false);
                if(message.hasNotificationLightOn())
                    output.writeBool(11, message.getNotificationLightOn(), false);
                if(message.hasNotificationLightFreq())
                    output.writeInt32(12, message.getNotificationLightFreq(), false);
                if(message.hasNotificationLightColor())
                    output.writeInt32(13, message.getNotificationLightColor(), false);
                if(message.hasProximity())
                    output.writeInt32(14, message.getProximity(), false);
                if(message.hasScreenBrightness())
                    output.writeInt32(15, message.getScreenBrightness(), false);
                if(message.hasWifi())
                    output.writeObject(16, message.getWifi(), com.cellbots.SchemaCellbotProtos.PhoneState.WIFI.WRITE, false);

                if(message.hasCellular())
                    output.writeObject(17, message.getCellular(), com.cellbots.SchemaCellbotProtos.PhoneState.Cellular.WRITE, false);

                if(message.hasLocation())
                    output.writeObject(18, message.getLocation(), com.cellbots.SchemaCellbotProtos.PhoneState.Location.WRITE, false);

                if(message.hasGpsEnabled())
                    output.writeBool(19, message.getGpsEnabled(), false);
                if(message.hasHALConnection())
                    output.writeObject(20, message.getHALConnection(), com.cellbots.SchemaCellbotProtos.HALConnection.WRITE, false);

            }
            public boolean isInitialized(com.cellbots.CellbotProtos.PhoneState message)
            {
                return message.isInitialized();
            }
            public String getFieldName(int number)
            {
                return PhoneState.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return PhoneState.getFieldNumber(name);
            }
            public Class<com.cellbots.CellbotProtos.PhoneState> typeClass()
            {
                return com.cellbots.CellbotProtos.PhoneState.class;
            }
            public String messageName()
            {
                return com.cellbots.CellbotProtos.PhoneState.class.getSimpleName();
            }
            public String messageFullName()
            {
                return com.cellbots.CellbotProtos.PhoneState.class.getName();
            }
            //unused
            public void mergeFrom(Input input, com.cellbots.CellbotProtos.PhoneState message) throws IOException {}
            public com.cellbots.CellbotProtos.PhoneState newMessage() { return null; }
        }
        public static class BuilderSchema implements Schema<com.cellbots.CellbotProtos.PhoneState.Builder>
        {
            public void mergeFrom(Input input, com.cellbots.CellbotProtos.PhoneState.Builder builder) throws IOException
            {
                while(true)
                {
                    int number = input.readFieldNumber(this);
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setTimestamp(input.readInt64());
                            break;
                        case 2:
                            builder.setBotID(input.readString());
                            break;
                        case 3:
                            builder.setDbgMsg(input.readString());
                            break;
                        case 4:
                            builder.setCompass(input.mergeObject(com.cellbots.CellbotProtos.PhoneState.Compass.newBuilder(), com.cellbots.SchemaCellbotProtos.PhoneState.Compass.MERGE));

                            break;
                        case 5:
                            builder.setAccelerometer(input.mergeObject(com.cellbots.CellbotProtos.PhoneState.Accelerometer.newBuilder(), com.cellbots.SchemaCellbotProtos.PhoneState.Accelerometer.MERGE));

                            break;
                        case 6:
                            builder.setOrientation(input.mergeObject(com.cellbots.CellbotProtos.PhoneState.Orientation.newBuilder(), com.cellbots.SchemaCellbotProtos.PhoneState.Orientation.MERGE));

                            break;
                        case 7:
                            builder.setPhoneBatteryLevel(input.readFloat());
                            break;
                        case 8:
                            builder.setPhoneBatteryTemp(input.readInt32());
                            break;
                        case 9:
                            builder.setLightLevel(input.readFloat());
                            break;
                        case 10:
                            builder.setVibrating(input.readBool());
                            break;
                        case 11:
                            builder.setNotificationLightOn(input.readBool());
                            break;
                        case 12:
                            builder.setNotificationLightFreq(input.readInt32());
                            break;
                        case 13:
                            builder.setNotificationLightColor(input.readInt32());
                            break;
                        case 14:
                            builder.setProximity(input.readInt32());
                            break;
                        case 15:
                            builder.setScreenBrightness(input.readInt32());
                            break;
                        case 16:
                            builder.setWifi(input.mergeObject(com.cellbots.CellbotProtos.PhoneState.WIFI.newBuilder(), com.cellbots.SchemaCellbotProtos.PhoneState.WIFI.MERGE));

                            break;
                        case 17:
                            builder.setCellular(input.mergeObject(com.cellbots.CellbotProtos.PhoneState.Cellular.newBuilder(), com.cellbots.SchemaCellbotProtos.PhoneState.Cellular.MERGE));

                            break;
                        case 18:
                            builder.setLocation(input.mergeObject(com.cellbots.CellbotProtos.PhoneState.Location.newBuilder(), com.cellbots.SchemaCellbotProtos.PhoneState.Location.MERGE));

                            break;
                        case 19:
                            builder.setGpsEnabled(input.readBool());
                            break;
                        case 20:
                            builder.setHALConnection(input.mergeObject(com.cellbots.CellbotProtos.HALConnection.newBuilder(), com.cellbots.SchemaCellbotProtos.HALConnection.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(com.cellbots.CellbotProtos.PhoneState.Builder builder)
            {
                return builder.isInitialized();
            }
            public com.cellbots.CellbotProtos.PhoneState.Builder newMessage()
            {
                return com.cellbots.CellbotProtos.PhoneState.newBuilder();
            }
            public String getFieldName(int number)
            {
                return PhoneState.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return PhoneState.getFieldNumber(name);
            }
            public Class<com.cellbots.CellbotProtos.PhoneState.Builder> typeClass()
            {
                return com.cellbots.CellbotProtos.PhoneState.Builder.class;
            }
            public String messageName()
            {
                return com.cellbots.CellbotProtos.PhoneState.class.getSimpleName();
            }
            public String messageFullName()
            {
                return com.cellbots.CellbotProtos.PhoneState.class.getName();
            }
            //unused
            public void writeTo(Output output, com.cellbots.CellbotProtos.PhoneState.Builder builder) throws IOException {}
        }
        public static String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "timestamp";
                case 2: return "botID";
                case 3: return "dbgMsg";
                case 4: return "compass";
                case 5: return "accelerometer";
                case 6: return "orientation";
                case 7: return "phoneBatteryLevel";
                case 8: return "phoneBatteryTemp";
                case 9: return "lightLevel";
                case 10: return "vibrating";
                case 11: return "notificationLightOn";
                case 12: return "notificationLightFreq";
                case 13: return "notificationLightColor";
                case 14: return "proximity";
                case 15: return "screenBrightness";
                case 16: return "wifi";
                case 17: return "cellular";
                case 18: return "location";
                case 19: return "gpsEnabled";
                case 20: return "hALConnection";
                default: return null;
            }
        }
        public static int getFieldNumber(String name)
        {
            Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("timestamp", 1);
            fieldMap.put("botID", 2);
            fieldMap.put("dbgMsg", 3);
            fieldMap.put("compass", 4);
            fieldMap.put("accelerometer", 5);
            fieldMap.put("orientation", 6);
            fieldMap.put("phoneBatteryLevel", 7);
            fieldMap.put("phoneBatteryTemp", 8);
            fieldMap.put("lightLevel", 9);
            fieldMap.put("vibrating", 10);
            fieldMap.put("notificationLightOn", 11);
            fieldMap.put("notificationLightFreq", 12);
            fieldMap.put("notificationLightColor", 13);
            fieldMap.put("proximity", 14);
            fieldMap.put("screenBrightness", 15);
            fieldMap.put("wifi", 16);
            fieldMap.put("cellular", 17);
            fieldMap.put("location", 18);
            fieldMap.put("gpsEnabled", 19);
            fieldMap.put("hALConnection", 20);
        }
    }

    public static final class ControllerState
    {

        public static final class KeyEvent
        {
            public static final MessageSchema WRITE = new MessageSchema();
            public static final BuilderSchema MERGE = new BuilderSchema();
            
            public static class MessageSchema implements Schema<com.cellbots.CellbotProtos.ControllerState.KeyEvent>
            {
                public void writeTo(Output output, com.cellbots.CellbotProtos.ControllerState.KeyEvent message) throws IOException
                {
                    if(message.hasKeyCode())
                        output.writeString(1, message.getKeyCode(), false);
                    if(message.hasKeyDown())
                        output.writeBool(2, message.getKeyDown(), false);
                    if(message.hasKeyUp())
                        output.writeBool(3, message.getKeyUp(), false);
                    if(message.hasKeyPressure())
                        output.writeFloat(4, message.getKeyPressure(), false);
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.ControllerState.KeyEvent message)
                {
                    return message.isInitialized();
                }
                public String getFieldName(int number)
                {
                    return KeyEvent.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return KeyEvent.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.ControllerState.KeyEvent> typeClass()
                {
                    return com.cellbots.CellbotProtos.ControllerState.KeyEvent.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.ControllerState.KeyEvent.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.ControllerState.KeyEvent.class.getName();
                }
                //unused
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.ControllerState.KeyEvent message) throws IOException {}
                public com.cellbots.CellbotProtos.ControllerState.KeyEvent newMessage() { return null; }
            }
            public static class BuilderSchema implements Schema<com.cellbots.CellbotProtos.ControllerState.KeyEvent.Builder>
            {
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.ControllerState.KeyEvent.Builder builder) throws IOException
                {
                    while(true)
                    {
                        int number = input.readFieldNumber(this);
                        switch(number)
                        {
                            case 0:
                                return;
                            case 1:
                                builder.setKeyCode(input.readString());
                                break;
                            case 2:
                                builder.setKeyDown(input.readBool());
                                break;
                            case 3:
                                builder.setKeyUp(input.readBool());
                                break;
                            case 4:
                                builder.setKeyPressure(input.readFloat());
                                break;
                            default:
                                input.handleUnknownField(number, this);
                        }
                    }
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.ControllerState.KeyEvent.Builder builder)
                {
                    return builder.isInitialized();
                }
                public com.cellbots.CellbotProtos.ControllerState.KeyEvent.Builder newMessage()
                {
                    return com.cellbots.CellbotProtos.ControllerState.KeyEvent.newBuilder();
                }
                public String getFieldName(int number)
                {
                    return KeyEvent.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return KeyEvent.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.ControllerState.KeyEvent.Builder> typeClass()
                {
                    return com.cellbots.CellbotProtos.ControllerState.KeyEvent.Builder.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.ControllerState.KeyEvent.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.ControllerState.KeyEvent.class.getName();
                }
                //unused
                public void writeTo(Output output, com.cellbots.CellbotProtos.ControllerState.KeyEvent.Builder builder) throws IOException {}
            }
            public static String getFieldName(int number)
            {
                switch(number)
                {
                    case 1: return "keyCode";
                    case 2: return "keyDown";
                    case 3: return "keyUp";
                    case 4: return "keyPressure";
                    default: return null;
                }
            }
            public static int getFieldNumber(String name)
            {
                Integer number = fieldMap.get(name);
                return number == null ? 0 : number.intValue();
            }
            private static final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
            {
                fieldMap.put("keyCode", 1);
                fieldMap.put("keyDown", 2);
                fieldMap.put("keyUp", 3);
                fieldMap.put("keyPressure", 4);
            }
        }

        public static final class StickEvent
        {
            public static final MessageSchema WRITE = new MessageSchema();
            public static final BuilderSchema MERGE = new BuilderSchema();
            
            public static class MessageSchema implements Schema<com.cellbots.CellbotProtos.ControllerState.StickEvent>
            {
                public void writeTo(Output output, com.cellbots.CellbotProtos.ControllerState.StickEvent message) throws IOException
                {
                    if(message.hasStickType())
                        output.writeEnum(1, message.getStickType().getNumber(), false);
                    if(message.hasStickNumber())
                        output.writeInt32(2, message.getStickNumber(), false);
                    if(message.hasX())
                        output.writeFloat(3, message.getX(), false);
                    if(message.hasY())
                        output.writeFloat(4, message.getY(), false);
                    if(message.hasZ())
                        output.writeFloat(5, message.getZ(), false);
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.ControllerState.StickEvent message)
                {
                    return message.isInitialized();
                }
                public String getFieldName(int number)
                {
                    return StickEvent.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return StickEvent.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.ControllerState.StickEvent> typeClass()
                {
                    return com.cellbots.CellbotProtos.ControllerState.StickEvent.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.ControllerState.StickEvent.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.ControllerState.StickEvent.class.getName();
                }
                //unused
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.ControllerState.StickEvent message) throws IOException {}
                public com.cellbots.CellbotProtos.ControllerState.StickEvent newMessage() { return null; }
            }
            public static class BuilderSchema implements Schema<com.cellbots.CellbotProtos.ControllerState.StickEvent.Builder>
            {
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.ControllerState.StickEvent.Builder builder) throws IOException
                {
                    while(true)
                    {
                        int number = input.readFieldNumber(this);
                        switch(number)
                        {
                            case 0:
                                return;
                            case 1:
                                builder.setStickType(com.cellbots.CellbotProtos.ControllerState.StickEvent.StickType.valueOf(input.readEnum()));
                                break;
                            case 2:
                                builder.setStickNumber(input.readInt32());
                                break;
                            case 3:
                                builder.setX(input.readFloat());
                                break;
                            case 4:
                                builder.setY(input.readFloat());
                                break;
                            case 5:
                                builder.setZ(input.readFloat());
                                break;
                            default:
                                input.handleUnknownField(number, this);
                        }
                    }
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.ControllerState.StickEvent.Builder builder)
                {
                    return builder.isInitialized();
                }
                public com.cellbots.CellbotProtos.ControllerState.StickEvent.Builder newMessage()
                {
                    return com.cellbots.CellbotProtos.ControllerState.StickEvent.newBuilder();
                }
                public String getFieldName(int number)
                {
                    return StickEvent.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return StickEvent.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.ControllerState.StickEvent.Builder> typeClass()
                {
                    return com.cellbots.CellbotProtos.ControllerState.StickEvent.Builder.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.ControllerState.StickEvent.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.ControllerState.StickEvent.class.getName();
                }
                //unused
                public void writeTo(Output output, com.cellbots.CellbotProtos.ControllerState.StickEvent.Builder builder) throws IOException {}
            }
            public static String getFieldName(int number)
            {
                switch(number)
                {
                    case 1: return "stickType";
                    case 2: return "stickNumber";
                    case 3: return "x";
                    case 4: return "y";
                    case 5: return "z";
                    default: return null;
                }
            }
            public static int getFieldNumber(String name)
            {
                Integer number = fieldMap.get(name);
                return number == null ? 0 : number.intValue();
            }
            private static final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
            {
                fieldMap.put("stickType", 1);
                fieldMap.put("stickNumber", 2);
                fieldMap.put("x", 3);
                fieldMap.put("y", 4);
                fieldMap.put("z", 5);
            }
        }

        public static final MessageSchema WRITE = new MessageSchema();
        public static final BuilderSchema MERGE = new BuilderSchema();
        
        public static class MessageSchema implements Schema<com.cellbots.CellbotProtos.ControllerState>
        {
            public void writeTo(Output output, com.cellbots.CellbotProtos.ControllerState message) throws IOException
            {
                if(message.hasTimestamp())
                    output.writeInt64(1, message.getTimestamp(), false);
                for(com.cellbots.CellbotProtos.ControllerState.KeyEvent keyEvent : message.getKeyEventList())
                    output.writeObject(2, keyEvent, com.cellbots.SchemaCellbotProtos.ControllerState.KeyEvent.WRITE, true);

                for(com.cellbots.CellbotProtos.ControllerState.StickEvent stickEvent : message.getStickEventList())
                    output.writeObject(3, stickEvent, com.cellbots.SchemaCellbotProtos.ControllerState.StickEvent.WRITE, true);

                if(message.hasTxtCommand())
                    output.writeString(4, message.getTxtCommand(), false);
                if(message.hasControllerID())
                    output.writeString(5, message.getControllerID(), false);
                if(message.hasBotID())
                    output.writeString(16, message.getBotID(), false);
            }
            public boolean isInitialized(com.cellbots.CellbotProtos.ControllerState message)
            {
                return message.isInitialized();
            }
            public String getFieldName(int number)
            {
                return ControllerState.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return ControllerState.getFieldNumber(name);
            }
            public Class<com.cellbots.CellbotProtos.ControllerState> typeClass()
            {
                return com.cellbots.CellbotProtos.ControllerState.class;
            }
            public String messageName()
            {
                return com.cellbots.CellbotProtos.ControllerState.class.getSimpleName();
            }
            public String messageFullName()
            {
                return com.cellbots.CellbotProtos.ControllerState.class.getName();
            }
            //unused
            public void mergeFrom(Input input, com.cellbots.CellbotProtos.ControllerState message) throws IOException {}
            public com.cellbots.CellbotProtos.ControllerState newMessage() { return null; }
        }
        public static class BuilderSchema implements Schema<com.cellbots.CellbotProtos.ControllerState.Builder>
        {
            public void mergeFrom(Input input, com.cellbots.CellbotProtos.ControllerState.Builder builder) throws IOException
            {
                while(true)
                {
                    int number = input.readFieldNumber(this);
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setTimestamp(input.readInt64());
                            break;
                        case 2:
                            builder.addKeyEvent(input.mergeObject(com.cellbots.CellbotProtos.ControllerState.KeyEvent.newBuilder(), com.cellbots.SchemaCellbotProtos.ControllerState.KeyEvent.MERGE));

                            break;
                        case 3:
                            builder.addStickEvent(input.mergeObject(com.cellbots.CellbotProtos.ControllerState.StickEvent.newBuilder(), com.cellbots.SchemaCellbotProtos.ControllerState.StickEvent.MERGE));

                            break;
                        case 4:
                            builder.setTxtCommand(input.readString());
                            break;
                        case 5:
                            builder.setControllerID(input.readString());
                            break;
                        case 16:
                            builder.setBotID(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(com.cellbots.CellbotProtos.ControllerState.Builder builder)
            {
                return builder.isInitialized();
            }
            public com.cellbots.CellbotProtos.ControllerState.Builder newMessage()
            {
                return com.cellbots.CellbotProtos.ControllerState.newBuilder();
            }
            public String getFieldName(int number)
            {
                return ControllerState.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return ControllerState.getFieldNumber(name);
            }
            public Class<com.cellbots.CellbotProtos.ControllerState.Builder> typeClass()
            {
                return com.cellbots.CellbotProtos.ControllerState.Builder.class;
            }
            public String messageName()
            {
                return com.cellbots.CellbotProtos.ControllerState.class.getSimpleName();
            }
            public String messageFullName()
            {
                return com.cellbots.CellbotProtos.ControllerState.class.getName();
            }
            //unused
            public void writeTo(Output output, com.cellbots.CellbotProtos.ControllerState.Builder builder) throws IOException {}
        }
        public static String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "timestamp";
                case 2: return "keyEvent";
                case 3: return "stickEvent";
                case 4: return "txtCommand";
                case 5: return "controllerID";
                case 16: return "botID";
                default: return null;
            }
        }
        public static int getFieldNumber(String name)
        {
            Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("timestamp", 1);
            fieldMap.put("keyEvent", 2);
            fieldMap.put("stickEvent", 3);
            fieldMap.put("txtCommand", 4);
            fieldMap.put("controllerID", 5);
            fieldMap.put("botID", 16);
        }
    }

    public static final class HALCommand
    {

        public static final class Servo
        {
            public static final MessageSchema WRITE = new MessageSchema();
            public static final BuilderSchema MERGE = new BuilderSchema();
            
            public static class MessageSchema implements Schema<com.cellbots.CellbotProtos.HALCommand.Servo>
            {
                public void writeTo(Output output, com.cellbots.CellbotProtos.HALCommand.Servo message) throws IOException
                {
                    if(message.hasID())
                        output.writeString(1, message.getID(), false);
                    if(message.hasSpeed())
                        output.writeInt32(3, message.getSpeed(), false);
                    if(message.hasTargetPosition())
                        output.writeInt32(4, message.getTargetPosition(), false);
                    if(message.hasTorque())
                        output.writeInt32(5, message.getTorque(), false);
                    if(message.hasFreeWheel())
                        output.writeBool(6, message.getFreeWheel(), false);
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.HALCommand.Servo message)
                {
                    return message.isInitialized();
                }
                public String getFieldName(int number)
                {
                    return Servo.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Servo.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.HALCommand.Servo> typeClass()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Servo.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Servo.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Servo.class.getName();
                }
                //unused
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.HALCommand.Servo message) throws IOException {}
                public com.cellbots.CellbotProtos.HALCommand.Servo newMessage() { return null; }
            }
            public static class BuilderSchema implements Schema<com.cellbots.CellbotProtos.HALCommand.Servo.Builder>
            {
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.HALCommand.Servo.Builder builder) throws IOException
                {
                    while(true)
                    {
                        int number = input.readFieldNumber(this);
                        switch(number)
                        {
                            case 0:
                                return;
                            case 1:
                                builder.setID(input.readString());
                                break;
                            case 3:
                                builder.setSpeed(input.readInt32());
                                break;
                            case 4:
                                builder.setTargetPosition(input.readInt32());
                                break;
                            case 5:
                                builder.setTorque(input.readInt32());
                                break;
                            case 6:
                                builder.setFreeWheel(input.readBool());
                                break;
                            default:
                                input.handleUnknownField(number, this);
                        }
                    }
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.HALCommand.Servo.Builder builder)
                {
                    return builder.isInitialized();
                }
                public com.cellbots.CellbotProtos.HALCommand.Servo.Builder newMessage()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Servo.newBuilder();
                }
                public String getFieldName(int number)
                {
                    return Servo.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Servo.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.HALCommand.Servo.Builder> typeClass()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Servo.Builder.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Servo.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Servo.class.getName();
                }
                //unused
                public void writeTo(Output output, com.cellbots.CellbotProtos.HALCommand.Servo.Builder builder) throws IOException {}
            }
            public static String getFieldName(int number)
            {
                switch(number)
                {
                    case 1: return "iD";
                    case 3: return "speed";
                    case 4: return "targetPosition";
                    case 5: return "torque";
                    case 6: return "freeWheel";
                    default: return null;
                }
            }
            public static int getFieldNumber(String name)
            {
                Integer number = fieldMap.get(name);
                return number == null ? 0 : number.intValue();
            }
            private static final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
            {
                fieldMap.put("iD", 1);
                fieldMap.put("speed", 3);
                fieldMap.put("targetPosition", 4);
                fieldMap.put("torque", 5);
                fieldMap.put("freeWheel", 6);
            }
        }

        public static final class Motor
        {
            public static final MessageSchema WRITE = new MessageSchema();
            public static final BuilderSchema MERGE = new BuilderSchema();
            
            public static class MessageSchema implements Schema<com.cellbots.CellbotProtos.HALCommand.Motor>
            {
                public void writeTo(Output output, com.cellbots.CellbotProtos.HALCommand.Motor message) throws IOException
                {
                    if(message.hasID())
                        output.writeString(1, message.getID(), false);
                    if(message.hasSteps())
                        output.writeInt32(2, message.getSteps(), false);
                    if(message.hasSpeed())
                        output.writeInt32(3, message.getSpeed(), false);
                    if(message.hasFreeWheel())
                        output.writeBool(4, message.getFreeWheel(), false);
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.HALCommand.Motor message)
                {
                    return message.isInitialized();
                }
                public String getFieldName(int number)
                {
                    return Motor.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Motor.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.HALCommand.Motor> typeClass()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Motor.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Motor.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Motor.class.getName();
                }
                //unused
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.HALCommand.Motor message) throws IOException {}
                public com.cellbots.CellbotProtos.HALCommand.Motor newMessage() { return null; }
            }
            public static class BuilderSchema implements Schema<com.cellbots.CellbotProtos.HALCommand.Motor.Builder>
            {
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.HALCommand.Motor.Builder builder) throws IOException
                {
                    while(true)
                    {
                        int number = input.readFieldNumber(this);
                        switch(number)
                        {
                            case 0:
                                return;
                            case 1:
                                builder.setID(input.readString());
                                break;
                            case 2:
                                builder.setSteps(input.readInt32());
                                break;
                            case 3:
                                builder.setSpeed(input.readInt32());
                                break;
                            case 4:
                                builder.setFreeWheel(input.readBool());
                                break;
                            default:
                                input.handleUnknownField(number, this);
                        }
                    }
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.HALCommand.Motor.Builder builder)
                {
                    return builder.isInitialized();
                }
                public com.cellbots.CellbotProtos.HALCommand.Motor.Builder newMessage()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Motor.newBuilder();
                }
                public String getFieldName(int number)
                {
                    return Motor.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Motor.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.HALCommand.Motor.Builder> typeClass()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Motor.Builder.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Motor.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Motor.class.getName();
                }
                //unused
                public void writeTo(Output output, com.cellbots.CellbotProtos.HALCommand.Motor.Builder builder) throws IOException {}
            }
            public static String getFieldName(int number)
            {
                switch(number)
                {
                    case 1: return "iD";
                    case 2: return "steps";
                    case 3: return "speed";
                    case 4: return "freeWheel";
                    default: return null;
                }
            }
            public static int getFieldNumber(String name)
            {
                Integer number = fieldMap.get(name);
                return number == null ? 0 : number.intValue();
            }
            private static final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
            {
                fieldMap.put("iD", 1);
                fieldMap.put("steps", 2);
                fieldMap.put("speed", 3);
                fieldMap.put("freeWheel", 4);
            }
        }

        public static final class PWM
        {
            public static final MessageSchema WRITE = new MessageSchema();
            public static final BuilderSchema MERGE = new BuilderSchema();
            
            public static class MessageSchema implements Schema<com.cellbots.CellbotProtos.HALCommand.PWM>
            {
                public void writeTo(Output output, com.cellbots.CellbotProtos.HALCommand.PWM message) throws IOException
                {
                    if(message.hasID())
                        output.writeString(1, message.getID(), false);
                    if(message.hasFrequency())
                        output.writeInt32(2, message.getFrequency(), false);
                    if(message.hasDuty())
                        output.writeInt32(3, message.getDuty(), false);
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.HALCommand.PWM message)
                {
                    return message.isInitialized();
                }
                public String getFieldName(int number)
                {
                    return PWM.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return PWM.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.HALCommand.PWM> typeClass()
                {
                    return com.cellbots.CellbotProtos.HALCommand.PWM.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.HALCommand.PWM.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.HALCommand.PWM.class.getName();
                }
                //unused
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.HALCommand.PWM message) throws IOException {}
                public com.cellbots.CellbotProtos.HALCommand.PWM newMessage() { return null; }
            }
            public static class BuilderSchema implements Schema<com.cellbots.CellbotProtos.HALCommand.PWM.Builder>
            {
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.HALCommand.PWM.Builder builder) throws IOException
                {
                    while(true)
                    {
                        int number = input.readFieldNumber(this);
                        switch(number)
                        {
                            case 0:
                                return;
                            case 1:
                                builder.setID(input.readString());
                                break;
                            case 2:
                                builder.setFrequency(input.readInt32());
                                break;
                            case 3:
                                builder.setDuty(input.readInt32());
                                break;
                            default:
                                input.handleUnknownField(number, this);
                        }
                    }
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.HALCommand.PWM.Builder builder)
                {
                    return builder.isInitialized();
                }
                public com.cellbots.CellbotProtos.HALCommand.PWM.Builder newMessage()
                {
                    return com.cellbots.CellbotProtos.HALCommand.PWM.newBuilder();
                }
                public String getFieldName(int number)
                {
                    return PWM.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return PWM.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.HALCommand.PWM.Builder> typeClass()
                {
                    return com.cellbots.CellbotProtos.HALCommand.PWM.Builder.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.HALCommand.PWM.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.HALCommand.PWM.class.getName();
                }
                //unused
                public void writeTo(Output output, com.cellbots.CellbotProtos.HALCommand.PWM.Builder builder) throws IOException {}
            }
            public static String getFieldName(int number)
            {
                switch(number)
                {
                    case 1: return "iD";
                    case 2: return "frequency";
                    case 3: return "duty";
                    default: return null;
                }
            }
            public static int getFieldNumber(String name)
            {
                Integer number = fieldMap.get(name);
                return number == null ? 0 : number.intValue();
            }
            private static final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
            {
                fieldMap.put("iD", 1);
                fieldMap.put("frequency", 2);
                fieldMap.put("duty", 3);
            }
        }

        public static final class Relay
        {
            public static final MessageSchema WRITE = new MessageSchema();
            public static final BuilderSchema MERGE = new BuilderSchema();
            
            public static class MessageSchema implements Schema<com.cellbots.CellbotProtos.HALCommand.Relay>
            {
                public void writeTo(Output output, com.cellbots.CellbotProtos.HALCommand.Relay message) throws IOException
                {
                    if(message.hasID())
                        output.writeString(1, message.getID(), false);
                    if(message.hasOn())
                        output.writeBool(2, message.getOn(), false);
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.HALCommand.Relay message)
                {
                    return message.isInitialized();
                }
                public String getFieldName(int number)
                {
                    return Relay.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Relay.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.HALCommand.Relay> typeClass()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Relay.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Relay.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Relay.class.getName();
                }
                //unused
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.HALCommand.Relay message) throws IOException {}
                public com.cellbots.CellbotProtos.HALCommand.Relay newMessage() { return null; }
            }
            public static class BuilderSchema implements Schema<com.cellbots.CellbotProtos.HALCommand.Relay.Builder>
            {
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.HALCommand.Relay.Builder builder) throws IOException
                {
                    while(true)
                    {
                        int number = input.readFieldNumber(this);
                        switch(number)
                        {
                            case 0:
                                return;
                            case 1:
                                builder.setID(input.readString());
                                break;
                            case 2:
                                builder.setOn(input.readBool());
                                break;
                            default:
                                input.handleUnknownField(number, this);
                        }
                    }
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.HALCommand.Relay.Builder builder)
                {
                    return builder.isInitialized();
                }
                public com.cellbots.CellbotProtos.HALCommand.Relay.Builder newMessage()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Relay.newBuilder();
                }
                public String getFieldName(int number)
                {
                    return Relay.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Relay.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.HALCommand.Relay.Builder> typeClass()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Relay.Builder.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Relay.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.HALCommand.Relay.class.getName();
                }
                //unused
                public void writeTo(Output output, com.cellbots.CellbotProtos.HALCommand.Relay.Builder builder) throws IOException {}
            }
            public static String getFieldName(int number)
            {
                switch(number)
                {
                    case 1: return "iD";
                    case 2: return "on";
                    default: return null;
                }
            }
            public static int getFieldNumber(String name)
            {
                Integer number = fieldMap.get(name);
                return number == null ? 0 : number.intValue();
            }
            private static final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
            {
                fieldMap.put("iD", 1);
                fieldMap.put("on", 2);
            }
        }

        public static final MessageSchema WRITE = new MessageSchema();
        public static final BuilderSchema MERGE = new BuilderSchema();
        
        public static class MessageSchema implements Schema<com.cellbots.CellbotProtos.HALCommand>
        {
            public void writeTo(Output output, com.cellbots.CellbotProtos.HALCommand message) throws IOException
            {
                if(message.hasTimestamp())
                    output.writeInt64(1, message.getTimestamp(), false);
                if(message.hasTxtCommand())
                    output.writeString(2, message.getTxtCommand(), false);
                if(message.hasAllStop())
                    output.writeBool(3, message.getAllStop(), false);
                for(com.cellbots.CellbotProtos.HALCommand.Servo servo : message.getServoList())
                    output.writeObject(4, servo, com.cellbots.SchemaCellbotProtos.HALCommand.Servo.WRITE, true);

                for(com.cellbots.CellbotProtos.HALCommand.Motor motor : message.getMotorList())
                    output.writeObject(5, motor, com.cellbots.SchemaCellbotProtos.HALCommand.Motor.WRITE, true);

                for(com.cellbots.CellbotProtos.HALCommand.PWM pwm : message.getPwmList())
                    output.writeObject(6, pwm, com.cellbots.SchemaCellbotProtos.HALCommand.PWM.WRITE, true);

                for(com.cellbots.CellbotProtos.HALCommand.Relay relay : message.getRelayList())
                    output.writeObject(7, relay, com.cellbots.SchemaCellbotProtos.HALCommand.Relay.WRITE, true);

                if(message.hasBotID())
                    output.writeString(16, message.getBotID(), false);
            }
            public boolean isInitialized(com.cellbots.CellbotProtos.HALCommand message)
            {
                return message.isInitialized();
            }
            public String getFieldName(int number)
            {
                return HALCommand.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return HALCommand.getFieldNumber(name);
            }
            public Class<com.cellbots.CellbotProtos.HALCommand> typeClass()
            {
                return com.cellbots.CellbotProtos.HALCommand.class;
            }
            public String messageName()
            {
                return com.cellbots.CellbotProtos.HALCommand.class.getSimpleName();
            }
            public String messageFullName()
            {
                return com.cellbots.CellbotProtos.HALCommand.class.getName();
            }
            //unused
            public void mergeFrom(Input input, com.cellbots.CellbotProtos.HALCommand message) throws IOException {}
            public com.cellbots.CellbotProtos.HALCommand newMessage() { return null; }
        }
        public static class BuilderSchema implements Schema<com.cellbots.CellbotProtos.HALCommand.Builder>
        {
            public void mergeFrom(Input input, com.cellbots.CellbotProtos.HALCommand.Builder builder) throws IOException
            {
                while(true)
                {
                    int number = input.readFieldNumber(this);
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setTimestamp(input.readInt64());
                            break;
                        case 2:
                            builder.setTxtCommand(input.readString());
                            break;
                        case 3:
                            builder.setAllStop(input.readBool());
                            break;
                        case 4:
                            builder.addServo(input.mergeObject(com.cellbots.CellbotProtos.HALCommand.Servo.newBuilder(), com.cellbots.SchemaCellbotProtos.HALCommand.Servo.MERGE));

                            break;
                        case 5:
                            builder.addMotor(input.mergeObject(com.cellbots.CellbotProtos.HALCommand.Motor.newBuilder(), com.cellbots.SchemaCellbotProtos.HALCommand.Motor.MERGE));

                            break;
                        case 6:
                            builder.addPwm(input.mergeObject(com.cellbots.CellbotProtos.HALCommand.PWM.newBuilder(), com.cellbots.SchemaCellbotProtos.HALCommand.PWM.MERGE));

                            break;
                        case 7:
                            builder.addRelay(input.mergeObject(com.cellbots.CellbotProtos.HALCommand.Relay.newBuilder(), com.cellbots.SchemaCellbotProtos.HALCommand.Relay.MERGE));

                            break;
                        case 16:
                            builder.setBotID(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(com.cellbots.CellbotProtos.HALCommand.Builder builder)
            {
                return builder.isInitialized();
            }
            public com.cellbots.CellbotProtos.HALCommand.Builder newMessage()
            {
                return com.cellbots.CellbotProtos.HALCommand.newBuilder();
            }
            public String getFieldName(int number)
            {
                return HALCommand.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return HALCommand.getFieldNumber(name);
            }
            public Class<com.cellbots.CellbotProtos.HALCommand.Builder> typeClass()
            {
                return com.cellbots.CellbotProtos.HALCommand.Builder.class;
            }
            public String messageName()
            {
                return com.cellbots.CellbotProtos.HALCommand.class.getSimpleName();
            }
            public String messageFullName()
            {
                return com.cellbots.CellbotProtos.HALCommand.class.getName();
            }
            //unused
            public void writeTo(Output output, com.cellbots.CellbotProtos.HALCommand.Builder builder) throws IOException {}
        }
        public static String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "timestamp";
                case 2: return "txtCommand";
                case 3: return "allStop";
                case 4: return "servo";
                case 5: return "motor";
                case 6: return "pwm";
                case 7: return "relay";
                case 16: return "botID";
                default: return null;
            }
        }
        public static int getFieldNumber(String name)
        {
            Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("timestamp", 1);
            fieldMap.put("txtCommand", 2);
            fieldMap.put("allStop", 3);
            fieldMap.put("servo", 4);
            fieldMap.put("motor", 5);
            fieldMap.put("pwm", 6);
            fieldMap.put("relay", 7);
            fieldMap.put("botID", 16);
        }
    }

    public static final class HALState
    {

        public static final class SensorValue
        {
            public static final MessageSchema WRITE = new MessageSchema();
            public static final BuilderSchema MERGE = new BuilderSchema();
            
            public static class MessageSchema implements Schema<com.cellbots.CellbotProtos.HALState.SensorValue>
            {
                public void writeTo(Output output, com.cellbots.CellbotProtos.HALState.SensorValue message) throws IOException
                {
                    if(message.hasID())
                        output.writeString(1, message.getID(), false);
                    if(message.hasOutOfRange())
                        output.writeBool(2, message.getOutOfRange(), false);
                    if(message.hasValue())
                        output.writeInt32(3, message.getValue(), false);
                    if(message.hasPrevValue())
                        output.writeInt32(4, message.getPrevValue(), false);
                    if(message.hasMinSenseableValue())
                        output.writeInt32(5, message.getMinSenseableValue(), false);
                    if(message.hasMaxSenseableValue())
                        output.writeInt32(6, message.getMaxSenseableValue(), false);
                    if(message.hasSensorUnits())
                        output.writeEnum(7, message.getSensorUnits().getNumber(), false);
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.HALState.SensorValue message)
                {
                    return message.isInitialized();
                }
                public String getFieldName(int number)
                {
                    return SensorValue.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return SensorValue.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.HALState.SensorValue> typeClass()
                {
                    return com.cellbots.CellbotProtos.HALState.SensorValue.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.HALState.SensorValue.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.HALState.SensorValue.class.getName();
                }
                //unused
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.HALState.SensorValue message) throws IOException {}
                public com.cellbots.CellbotProtos.HALState.SensorValue newMessage() { return null; }
            }
            public static class BuilderSchema implements Schema<com.cellbots.CellbotProtos.HALState.SensorValue.Builder>
            {
                public void mergeFrom(Input input, com.cellbots.CellbotProtos.HALState.SensorValue.Builder builder) throws IOException
                {
                    while(true)
                    {
                        int number = input.readFieldNumber(this);
                        switch(number)
                        {
                            case 0:
                                return;
                            case 1:
                                builder.setID(input.readString());
                                break;
                            case 2:
                                builder.setOutOfRange(input.readBool());
                                break;
                            case 3:
                                builder.setValue(input.readInt32());
                                break;
                            case 4:
                                builder.setPrevValue(input.readInt32());
                                break;
                            case 5:
                                builder.setMinSenseableValue(input.readInt32());
                                break;
                            case 6:
                                builder.setMaxSenseableValue(input.readInt32());
                                break;
                            case 7:
                                builder.setSensorUnits(com.cellbots.CellbotProtos.HALState.SensorValue.SensorUnits.valueOf(input.readEnum()));
                                break;
                            default:
                                input.handleUnknownField(number, this);
                        }
                    }
                }
                public boolean isInitialized(com.cellbots.CellbotProtos.HALState.SensorValue.Builder builder)
                {
                    return builder.isInitialized();
                }
                public com.cellbots.CellbotProtos.HALState.SensorValue.Builder newMessage()
                {
                    return com.cellbots.CellbotProtos.HALState.SensorValue.newBuilder();
                }
                public String getFieldName(int number)
                {
                    return SensorValue.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return SensorValue.getFieldNumber(name);
                }
                public Class<com.cellbots.CellbotProtos.HALState.SensorValue.Builder> typeClass()
                {
                    return com.cellbots.CellbotProtos.HALState.SensorValue.Builder.class;
                }
                public String messageName()
                {
                    return com.cellbots.CellbotProtos.HALState.SensorValue.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return com.cellbots.CellbotProtos.HALState.SensorValue.class.getName();
                }
                //unused
                public void writeTo(Output output, com.cellbots.CellbotProtos.HALState.SensorValue.Builder builder) throws IOException {}
            }
            public static String getFieldName(int number)
            {
                switch(number)
                {
                    case 1: return "iD";
                    case 2: return "outOfRange";
                    case 3: return "value";
                    case 4: return "prevValue";
                    case 5: return "minSenseableValue";
                    case 6: return "maxSenseableValue";
                    case 7: return "sensorUnits";
                    default: return null;
                }
            }
            public static int getFieldNumber(String name)
            {
                Integer number = fieldMap.get(name);
                return number == null ? 0 : number.intValue();
            }
            private static final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
            {
                fieldMap.put("iD", 1);
                fieldMap.put("outOfRange", 2);
                fieldMap.put("value", 3);
                fieldMap.put("prevValue", 4);
                fieldMap.put("minSenseableValue", 5);
                fieldMap.put("maxSenseableValue", 6);
                fieldMap.put("sensorUnits", 7);
            }
        }

        public static final MessageSchema WRITE = new MessageSchema();
        public static final BuilderSchema MERGE = new BuilderSchema();
        
        public static class MessageSchema implements Schema<com.cellbots.CellbotProtos.HALState>
        {
            public void writeTo(Output output, com.cellbots.CellbotProtos.HALState message) throws IOException
            {
                if(message.hasTimestamp())
                    output.writeInt64(1, message.getTimestamp(), false);
                if(message.hasDbgMessage())
                    output.writeString(2, message.getDbgMessage(), false);
                if(message.hasVBat())
                    output.writeInt32(3, message.getVBat(), false);
                if(message.hasCurrentDraw())
                    output.writeInt32(4, message.getCurrentDraw(), false);
                if(message.hasPowerUsed())
                    output.writeInt32(5, message.getPowerUsed(), false);
                if(message.hasBatteryTemp())
                    output.writeInt32(6, message.getBatteryTemp(), false);
                if(message.hasVCC())
                    output.writeInt32(7, message.getVCC(), false);
                for(com.cellbots.CellbotProtos.HALState.SensorValue sensorValue : message.getSensorValueList())
                    output.writeObject(8, sensorValue, com.cellbots.SchemaCellbotProtos.HALState.SensorValue.WRITE, true);

                if(message.hasBotID())
                    output.writeString(16, message.getBotID(), false);
            }
            public boolean isInitialized(com.cellbots.CellbotProtos.HALState message)
            {
                return message.isInitialized();
            }
            public String getFieldName(int number)
            {
                return HALState.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return HALState.getFieldNumber(name);
            }
            public Class<com.cellbots.CellbotProtos.HALState> typeClass()
            {
                return com.cellbots.CellbotProtos.HALState.class;
            }
            public String messageName()
            {
                return com.cellbots.CellbotProtos.HALState.class.getSimpleName();
            }
            public String messageFullName()
            {
                return com.cellbots.CellbotProtos.HALState.class.getName();
            }
            //unused
            public void mergeFrom(Input input, com.cellbots.CellbotProtos.HALState message) throws IOException {}
            public com.cellbots.CellbotProtos.HALState newMessage() { return null; }
        }
        public static class BuilderSchema implements Schema<com.cellbots.CellbotProtos.HALState.Builder>
        {
            public void mergeFrom(Input input, com.cellbots.CellbotProtos.HALState.Builder builder) throws IOException
            {
                while(true)
                {
                    int number = input.readFieldNumber(this);
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setTimestamp(input.readInt64());
                            break;
                        case 2:
                            builder.setDbgMessage(input.readString());
                            break;
                        case 3:
                            builder.setVBat(input.readInt32());
                            break;
                        case 4:
                            builder.setCurrentDraw(input.readInt32());
                            break;
                        case 5:
                            builder.setPowerUsed(input.readInt32());
                            break;
                        case 6:
                            builder.setBatteryTemp(input.readInt32());
                            break;
                        case 7:
                            builder.setVCC(input.readInt32());
                            break;
                        case 8:
                            builder.addSensorValue(input.mergeObject(com.cellbots.CellbotProtos.HALState.SensorValue.newBuilder(), com.cellbots.SchemaCellbotProtos.HALState.SensorValue.MERGE));

                            break;
                        case 16:
                            builder.setBotID(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(com.cellbots.CellbotProtos.HALState.Builder builder)
            {
                return builder.isInitialized();
            }
            public com.cellbots.CellbotProtos.HALState.Builder newMessage()
            {
                return com.cellbots.CellbotProtos.HALState.newBuilder();
            }
            public String getFieldName(int number)
            {
                return HALState.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return HALState.getFieldNumber(name);
            }
            public Class<com.cellbots.CellbotProtos.HALState.Builder> typeClass()
            {
                return com.cellbots.CellbotProtos.HALState.Builder.class;
            }
            public String messageName()
            {
                return com.cellbots.CellbotProtos.HALState.class.getSimpleName();
            }
            public String messageFullName()
            {
                return com.cellbots.CellbotProtos.HALState.class.getName();
            }
            //unused
            public void writeTo(Output output, com.cellbots.CellbotProtos.HALState.Builder builder) throws IOException {}
        }
        public static String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "timestamp";
                case 2: return "dbgMessage";
                case 3: return "vBat";
                case 4: return "currentDraw";
                case 5: return "powerUsed";
                case 6: return "batteryTemp";
                case 7: return "vCC";
                case 8: return "sensorValue";
                case 16: return "botID";
                default: return null;
            }
        }
        public static int getFieldNumber(String name)
        {
            Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("timestamp", 1);
            fieldMap.put("dbgMessage", 2);
            fieldMap.put("vBat", 3);
            fieldMap.put("currentDraw", 4);
            fieldMap.put("powerUsed", 5);
            fieldMap.put("batteryTemp", 6);
            fieldMap.put("vCC", 7);
            fieldMap.put("sensorValue", 8);
            fieldMap.put("botID", 16);
        }
    }

}
